Index: Z01_python_introduction.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Podstawowe operatory\\n\",\n    \"\\n\",\n    \" * \\\\+ – dodawanie: 4 + 7.5 daje 11.5;\\n\",\n    \" * \\\\- – odejmowanie: 30 - 24 daje 6;\\n\",\n    \" * \\\\* – mnożenie: 2 * 3 daje 6;\\n\",\n    \" * \\\\*\\\\* – potęgowanie: 3 ** 4 daje 81;\\n\",\n    \" * / – dzielenie: 4 / 3 daje 1;\\n\",\n    \" * // – dzielenie całkowite: 4 // 3.0 daje 1;\\n\",\n    \" * % – dzielenie modulo: 8 % 3 daje 2. \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Operatory porównania:\\n\",\n    \"\\n\",\n    \" * < – mniejsze,\\n\",\n    \" * \\\\> – większe,\\n\",\n    \" * <= – mniejsze lub równe,\\n\",\n    \" * == – równe,\\n\",\n    \" * != – różne. \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# 1. Warunki\\n\",\n    \"Python używa zmiennych logicznych w celu oceny warunków. \\n\",\n    \"Wartości logiczne prawda (True) i fałsz (False) są zwracane, gdy wyrażenie jest porównywane i oceniane. \\n\",\n    \"\\n\",\n    \"Na przykład:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 41,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"True\\n\",\n      \"False\\n\",\n      \"True\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"x = 2\\n\",\n    \"print(x == 2)\\n\",\n    \"print(x == 3)\\n\",\n    \"print(x < 3)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# 1.1 Instrukcje Warunkowe\\n\",\n    \"Aby uzależnić wykonanie instrukcji od rezultatu porównania, używamy instrukcji warunkowej\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 42,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"OK\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"x=2\\n\",\n    \"\\n\",\n    \"if x==2: \\n\",\n    \"    print(\\\"OK\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Przykład bardziej skomplikowany:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 43,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"2\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"a = 2\\n\",\n    \"b = 4\\n\",\n    \"if a > b:\\n\",\n    \"    print(b)\\n\",\n    \"else:\\n\",\n    \"    print(a)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"W powyższym przykładzie użyliśmy pełnej instrukcji warunkowej <b>IF/ELSE</b>. Istnieje jeszcze bardziej bogatsza instrukcja warunkowa tzw. instrukcja wyboru wielokrotnego <b>IF/ELIF/ELSE</b>:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 44,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Ten program porównuje dwie liczby\\n\",\n      \"Podaj pierwszą z dwóch liczb:\\n\",\n      \"Podaj drugą z dwóch liczb:\\n\",\n      \"Liczba  w stosunku do  jest:\\n\",\n      \"taka sama\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(\\\"Ten program porównuje dwie liczby\\\")\\n\",\n    \"x = input(\\\"Podaj pierwszą z dwóch liczb:\\\")                                 \\n\",\n    \"y = input(\\\"Podaj drugą z dwóch liczb:\\\")                                    \\n\",\n    \"print(\\\"Liczba\\\",x,\\\"w stosunku do\\\",y,\\\"jest:\\\",)\\n\",\n    \"if x==y:\\n\",\n    \"    print(\\\"taka sama\\\")\\n\",\n    \"elif x>y:\\n\",\n    \"    print(\\\"większa\\\")\\n\",\n    \"else:\\n\",\n    \"    print(\\\"mniejsza\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Operatory logiczne\\n\",\n    \"Operatory logiczne, takie jak: <b>and</b> i <b>or</b> umożliwiają budowanie złożonych wyrażeń logicznych, na przykład:\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zad. 1\\n\",\n    \"\\n\",\n    \"Napisz program, który sprawdzi, czy podane przez użytkownika koła mają niepuste przecięcie. Użytkownik programu podaje współrzędne środka oraz promień każdego koła.\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Operator ,,in''\\n\",\n    \"Operator <b>in</b> może być używany w celu sprawdzenia, czy określony ,,obiekt'' istnieje w obrębie iterowalnego kontenera obiektów, np. listy:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 45,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"if name in [\\\"John\\\", \\\"Rick\\\"]:\\n\",\n    \"    print(\\\"Your name is either John or Rick.\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Instrukcje warunkowe możemy zagnieżdżać, np.:\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# 2. Pętle\\n\",\n    \"W Pythonie istnieją dwa typy pętli: <b>for<b> i <b>while<b>.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# 2.1 Pętle iterowane po elementach sekwencji\\n\",\n    \"\\n\",\n    \"Typowa pętla po liczbach:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 46,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"3\\n\",\n      \"4\\n\",\n      \"5\\n\",\n      \"6\\n\",\n      \"7\\n\",\n      \"8\\n\",\n      \"9\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"for x in range(3,10):\\n\",\n    \"      print(x)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Funkcja <b>range</b> tworzy \\\"listę\\\" wartości całkowitych: \\n\",\n    \"\\n\",\n    \"- od zera do podanej wartości (jeżeli podamy 1 argument) \\n\",\n    \"- od - do (jeżeli podamy 2 argumenty)\\n\",\n    \"- możemy podać też trzeci parametr określający przyrost (normalnie +1).\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 47,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"range(0, 10)\\n\",\n      \"range(3, 10)\\n\",\n      \"range(1, 10, 2)\\n\",\n      \"range(4, 0, -1)\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(range(10))\\n\",\n    \"print(range(3, 10))\\n\",\n    \"print(range(1,10,2))\\n\",\n    \"print(range(4,0,-1))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Pętla <b>for</b> może też iterować inne typy danych, np napisy, listy:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 48,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Zdrabniamy literki\\n\",\n      \"2 3 5 7 \\n\",\n      \"apple orange peach \"\n     ]\n    }\n   ],\n   \"source\": [\n    \"bar = \\\"Zdrabniamy literki\\\"\\n\",\n    \"for i in bar:\\n\",\n    \"    print(i, end =\\\"\\\")\\n\",\n    \"print()\\n\",\n    \"\\n\",\n    \"x = [2, 3, 5, 7]\\n\",\n    \"for i in x:\\n\",\n    \"    print(i, end =\\\" \\\") \\n\",\n    \"print()\\n\",\n    \"\\n\",\n    \"for e in ['apple', 'orange', 'peach']:\\n\",\n    \"    print(e, end =\\\" \\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"W takiej pętli nie mamy dostępu do indeksu elementu w liście, ale możemy taki uzyskać, odpowiednio mapując kolekcję za pomocą <b>enumerate</b> (generator):\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 49,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[(0, 'apple'), (1, 'orange'), (2, 'peach')] \\n\",\n      \"\\n\",\n      \"0 apple\\n\",\n      \"1 orange\\n\",\n      \"2 peach\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(list(enumerate(['apple', 'orange', 'peach'])), \\\"\\\\n\\\")\\n\",\n    \"\\n\",\n    \"for i, x in enumerate(['apple', 'orange', 'peach']):\\n\",\n    \"    print(i, x)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# 2.2 Pętla while\\n\",\n    \"\\n\",\n    \"Pętla **while** powtarza instrukcje znajdujące się w jej wnętrzu tak długo, dopóki podany warunek logiczny jest spełniony. \\n\",\n    \"\\n\",\n    \"Na przykład:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 50,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[1, 2, 3, 4, 5]\\n\",\n      \"[1, 2, 3, 4]\\n\",\n      \"[1, 2, 3]\\n\",\n      \"[1, 2]\\n\",\n      \"[1]\\n\",\n      \"[]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"x=[1,2,3,4,5,6]\\n\",\n    \"while x:\\n\",\n    \"    x=x[:len(x)-1] # funkcja len() zwraca długość listy (liczbę elementów)\\n\",\n    \"    print(x)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 51,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Jestem w while.\\n\",\n      \"Jestem w while.\\n\",\n      \"Jestem w while.\\n\",\n      \"Jestem w while.\\n\",\n      \"Jestem w while.\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"licznik = 10\\n\",\n    \"\\n\",\n    \"while licznik < 15:\\n\",\n    \"    licznik += 1\\n\",\n    \"    print(\\\"Jestem w while.\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"\\n\",\n    \"# Zad. 2\\n\",\n    \"Napisz program, który będzie wczytywał kolejne słowa i je wypisywał aż do wczytania słowa \\\"stop\\\" po którym program się zatrzyma.\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zad. 3\\n\",\n    \"\\n\",\n    \"Napisz program tworzący tablicę n na m elementową w kształcie tablicy szachowej. Np. dla\\n\",\n    \"<br />\\n\",\n    \"<tt>\\n\",\n    \"n = 5<br />\\n\",\n    \"m = 5\\n\",\n    \"</tt>\\n\",\n    \"\\n\",\n    \"otrzymujemy\\n\",\n    \"\\n\",\n    \"<br />\\n\",\n    \"<tt>\\n\",\n    \"10101<br />\\n\",\n    \"01010<br />\\n\",\n    \"10101<br />\\n\",\n    \"01010<br />\\n\",\n    \"10101<br />\\n\",\n    \"</tt>\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# 3. Formatowanie liczb\\n\",\n    \"\\n\",\n    \"Celem pętli często jest wyświetlenie kolumny liczb. \\n\",\n    \"\\n\",\n    \"Aby liczby wyświetlane były w należyty sposób i w pożądanym miejscu używamy operatora formatowania **%** w połączeniu z ciągiem formatującym. \\n\",\n    \"\\n\",\n    \"Ciąg formatujący składa się ze znaku **%**, po którym następują \\n\",\n    \"\\n\",\n    \"* opcje formatowania, \\n\",\n    \"* ilość znaków przeznaczonych do wyświetlenia \\n\",\n    \"* oraz typ danej do wyświetlenia \\n\",\n    \"(przy czym tylko trzeci element – tj. typ danych jest wymagany).\\n\",\n    \"\\n\",\n    \"Typ danej sygnalizujemy pojedynczą literą. I tak:\\n\",\n    \"* litera s oznacza napis (konwertuje każdy typ danych na tekst), np.:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 54,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"10\\n\",\n      \"[0, 1, 2, 3, 4, 5]\\n\",\n      \"txt\\n\",\n      \"      test\\n\",\n      \"test      \\n\",\n      \"xylop\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# stary sposób\\n\",\n    \"\\n\",\n    \"print(\\\"%s\\\" % 10)\\n\",\n    \"print(\\\"%s\\\" % list(range(6)))\\n\",\n    \"print(\\\"%s\\\" % \\\"txt\\\")\\n\",\n    \"print('%10s' % 'test')\\n\",\n    \"print('%-10s' % 'test')\\n\",\n    \"print('%.5s' % 'xylophone')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"* litera **d** oznacza dziesiętną liczbę całkowitą (konwertuje kompatybilny typ danych na liczbę całkowitą), np.:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 55,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"255\\n\",\n      \"2\\n\",\n      \"255\\n\",\n      \"2\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(\\\"%d\\\" % 0xff)\\n\",\n    \"print(\\\"%d\\\" % 2)\\n\",\n    \"print('{:d}'.format(0xff))\\n\",\n    \"print('{:d}'.format(2))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"* litera **f** oznacza liczbę zmiennopozycyjną w postaci ułamka dziesiętnego, np.:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 56,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"123.000000\\n\",\n      \"1.230000\\n\",\n      \"123.000000\\n\",\n      \"1.230000\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(\\\"%f\\\" % 123)\\n\",\n    \"print(\\\"%f\\\" % 1.23)\\n\",\n    \"\\n\",\n    \"print('{:f}'.format(123))\\n\",\n    \"print('{:f}'.format(1.23))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zad. 4\\n\",\n    \"\\n\",\n    \"Napisać program rysujący \\\"miarkę\\\" o zadanej długości. Należy prawidłowo obsłużyć liczby składające się z kilku cyfr, np.:\\n\",\n    \"\\n\",\n    \"$$|....|....|....|....|....|....|....|....|$$\\n\",\n    \"$$0 \\\\quad \\\\ 1 \\\\quad \\\\ 2 \\\\quad \\\\ 3 \\\\quad \\\\ 4 \\\\quad \\\\ 5 \\\\quad \\\\ 6 \\\\quad \\\\ 7 \\\\quad \\\\ 8$$\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Funkcje\\n\",\n    \"\\n\",\n    \"Definicja funkcji musi zawierać:\\n\",\n    \"\\n\",\n    \"* nagłówek funkcji:\\n\",\n    \"  * nazwę funkcji, która pozwoli zidentyfikować funkcję w pozostałej części programu,\\n\",\n    \"  * listę argumentów\\n\",\n    \"* ciało funkcji, zawierające instrukcje, które zostaną wykonane w momencie wywołania (użycia) funkcji\\n\",\n    \"  * jeżeli funkcja ma zwracać jakiś rezultat, musi zawierać instrukcję ,,return''\\n\",\n    \"\\n\",\n    \"W języku Python składnia definicji funkcji jest następująca:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 58,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"def nazwa_funkcji (lista_parametrow):\\n\",\n    \"    instrukcje_do_wykonania\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Przykład funkcji:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 59,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"To jest użycie funkcji\\n\",\n      \"tak\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# Przykład 1\\n\",\n    \"def wypisz(lancuch):\\n\",\n    \"    print(lancuch)\\n\",\n    \"    \\n\",\n    \"wypisz(\\\"To jest użycie funkcji\\\")\\n\",\n    \"x = \\\"tak\\\"\\n\",\n    \"wypisz(x)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 60,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"12\\n\",\n      \"1\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# Przykład 2 - zwraca wynik\\n\",\n    \"def suma(x, y):\\n\",\n    \"    return x+y\\n\",\n    \"\\n\",\n    \"print(suma(4,8))\\n\",\n    \"x = suma(2, -1)\\n\",\n    \"print(x)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Wiele rezultatów\\n\",\n    \"Jeżeli chcemy aby funkcja zwracała więcej niż jedną zmienną to stosujemy krotkę ,,(zmienna_1, ..., zmienna_n)'':\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 61,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"(6, -2)\\n\",\n      \"(6, -2)\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"def f1(a,b):\\n\",\n    \"    return a+b,a-b\\n\",\n    \"\\n\",\n    \"def f2(a,b):\\n\",\n    \"    return (a+b,a-b)\\n\",\n    \"\\n\",\n    \"print(f1(2, 4))\\n\",\n    \"print(f2(2, 4))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zad. 5\\n\",\n    \"\\n\",\n    \"Napisz funkcje, która zwraca:\\n\",\n    \"\\n\",\n    \"* sumę,\\n\",\n    \"* różnicę,\\n\",\n    \"* iloczyn elementów listy.\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Typy sekwencyjne\\n\",\n    \"\\n\",\n    \"Sekwencyjne typy danych służą do przechowywaniu wielu wartości w pojedynczej zmiennej (w innych językach nazywane tablicami), w odróżnieniu od typów prostych, takich jak np. int, które w pojedynczej zmiennej mogą zachować tylko jedną wartość. Do typów sekwencyjnych należą: napisy (łańcuchy znaków), listy, krotki.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# 1. Napisy/łańcuchy\\n\",\n    \"Do tej pory poznaliśmy już jeden typ sekwencyjny, mianowicie typ łańcuchowy (łańcuchy znaków). Wartości napisów podajemy w cudzysłowach lub apostrofach:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 62,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"T\\n\",\n      \"o\\n\",\n      \"j\\n\",\n      \"s\\n\",\n      \"i\\n\",\n      \"p\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"x = \\\"To jest napis\\\"\\n\",\n    \"print(x[0])\\n\",\n    \"print(x[1])\\n\",\n    \"print(x[3])\\n\",\n    \"\\n\",\n    \"print(x[-1])\\n\",\n    \"print(x[-2])\\n\",\n    \"print(x[-3])\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 63,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"13\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"x = \\\"To jest napis\\\"\\n\",\n    \"print(len(x))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# 2. Listy\\n\",\n    \"Do zapamiętywania sekwencji danych nie będącymi znakami (np. liczby) służy typ sekwencyjny - **lista**. Elementy list mogą być dowolnego typu, to znaczy mogą zawierać zarówno liczby jak i napisy.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 64,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[1, 2, 3]\\n\",\n      \"[1, 'tak', 5]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"x = [1, 2, 3]\\n\",\n    \"y = [1, 'tak', 5]\\n\",\n    \"\\n\",\n    \"print(x)\\n\",\n    \"print(y)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 65,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"True\\n\",\n      \"False\\n\",\n      \"True\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"x = [1, 2, 3, 4]\\n\",\n    \"\\n\",\n    \"print(2 in x)\\n\",\n    \"print(3 not in x)\\n\",\n    \"print(5 not in x)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 66,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[range(0, 5), [8, -7, -1]]\\n\",\n      \"range(0, 5)\\n\",\n      \"[8, -7, -1]\\n\",\n      \"-7\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"x = [range(5), [8, -7, -1]]\\n\",\n    \"\\n\",\n    \"print(x)\\n\",\n    \"print(x[0])\\n\",\n    \"print(x[1])\\n\",\n    \"print(x[1][1])\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zad. 6\\n\",\n    \"\\n\",\n    \"Napisać program zamieniający napis na napis „rozstrzelony”, czyli wstawiający spacje przed napisem, pomiędzy literami i po napisie. Przykład: **'Python' → ' P y t h o n '**. \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zad. 7\\n\",\n    \"Napisz funkcję **reverse(napis)**, która z napisu będącego jej argumentem tworzy odwrócony napis. Przykładowo, wywołanie reverse(\\\"hello\\\") powinno zwrócić napis \\\"olleh\\\". \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Moduły i pakiety\\n\",\n    \"Moduł to plik w Pythonie zawierający definicję klas, funkcji, stałych i zmiennych. Definicje zawarte w module mogą być zaimportowane do innych modułów lub do modułu głównego. Wewnątrz modułu jego nazwa dostępna jest jako wartość zmiennej globalnej **<tt>\\\\__name__</tt>**.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Wybrane pakiety, moduły:\\n\",\n    \"\\n\",\n    \"* random - moduł ten zawiera funkcje obsługujące generowanie liczb pseudolosowych:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 37,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"3\\n\",\n      \"6\\n\",\n      \"10\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"import random\\n\",\n    \"\\n\",\n    \"random.seed() # inicjalizacja generatora liczb pseudolosowych\\n\",\n    \"\\n\",\n    \"# losowanie liczb całkowitych z zakresu od..do.\\n\",\n    \"print(random.randint(1,10))\\n\",\n    \"print(random.randint(1,10))\\n\",\n    \"print(random.randint(1,10))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"* **math** - moduł ten zawiera definicje najczęściej używanych funkcji matematycznych:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 38,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"5\\n\",\n      \"4\\n\",\n      \"3.0\\n\",\n      \"(0.5, 2.0)\\n\",\n      \"7.38905609893065\\n\",\n      \"1.0\\n\",\n      \"3.0\\n\",\n      \"1.5\\n\",\n      \"0.0\\n\",\n      \"0.5403023058681398\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"from math import *\\n\",\n    \"\\n\",\n    \"print(ceil(4.7)) # zwraca sufit liczby rzeczywistej\\n\",\n    \"print(floor(4.7)) # zwraca podłogę liczby rzeczywistej\\n\",\n    \"print(fabs(-3)) # zwraca wartość absolutną liczby rzeczywistej\\n\",\n    \"print(modf(2.5)) # zwraca krotkę zawierającą część ułamkową i całkowitą liczby rzeczywistej\\n\",\n    \"print(exp(2)) # zwraca e do potęgi x\\n\",\n    \"print(log(e)) # zwraca logarytm naturalny\\n\",\n    \"print(log(8, 2)) # zwraca logarytm o podstawie 2 (drugi parametr)\\n\",\n    \"print(sqrt(2.25)) # zwraca pierwiastek kwadratowy\\n\",\n    \"print(acos(1))\\n\",\n    \"print(cos(1))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"\\n\",\n    \"# Zad. 8\\n\",\n    \"\\n\",\n    \"Wyestymować wartość liczby $\\\\pi$ metodą Monte Carlo.\\n\",\n    \"\\n\",\n    \"Pole kwadratu to $4r^2$, a pole koła wynosi $\\\\pi r^2$. W takim razie stosunek:\\n\",\n    \"$$\\n\",\n    \"\\\\frac{P_{kola}}{P_{kwadratu}} = \\\\frac{\\\\pi r^2}{4 r^2} = \\\\frac{\\\\pi}{4}.\\n\",\n    \"$$\\n\",\n    \"W konsekwencji: \\n\",\n    \"$$\\n\",\n    \"\\\\pi = 4 \\\\frac{P_{kola}}{P_{kwadratu}}.\\n\",\n    \"$$\\n\",\n    \"\\n\",\n    \"Jeżeli będziemy losować punkty o współrzędnych od $-2r$ do $2r$, to stosunek liczby punktów zawierających się w kole o środku w punkcie $(0,0)$ i promieniu $r$ do wszystkich wylosowanych punktów, będzie dążył w nieskończoności (z pewnym prawdopodobieństwem) do stosunku tego pola koła do koła kwadratu o boku $2r$.\\n\",\n    \"\\n\",\n    \"Cała metoda sprowadza się więc do tego, by losować punkty i sprawdzać, czy mieszczą się w kole. \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": false\n   },\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.6.0\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 0\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Z01_python_introduction.ipynb b/Z01_python_introduction.ipynb
--- a/Z01_python_introduction.ipynb	(revision 23b7d23cdb1c969d11dad11bcc79574ad6e5458b)
+++ b/Z01_python_introduction.ipynb	(date 1648214639560)
@@ -41,7 +41,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 41,
+   "execution_count": 1,
    "metadata": {
     "collapsed": false
    },
@@ -73,7 +73,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 42,
+   "execution_count": 2,
    "metadata": {
     "collapsed": false
    },
@@ -82,15 +82,15 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "OK\n"
+      "OK2\n"
      ]
     }
    ],
    "source": [
-    "x=2\n",
+    "x = 2\n",
     "\n",
-    "if x==2: \n",
-    "    print(\"OK\")"
+    "if x == 2:\n",
+    "    print(\"OK2\")"
    ]
   },
   {
@@ -102,7 +102,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 43,
+   "execution_count": 3,
    "metadata": {
     "collapsed": false
    },
@@ -133,7 +133,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 44,
+   "execution_count": 4,
    "metadata": {
     "collapsed": false
    },
@@ -143,21 +143,19 @@
      "output_type": "stream",
      "text": [
       "Ten program porównuje dwie liczby\n",
-      "Podaj pierwszą z dwóch liczb:\n",
-      "Podaj drugą z dwóch liczb:\n",
-      "Liczba  w stosunku do  jest:\n",
-      "taka sama\n"
+      "Liczba 1 w stosunku do 3 jest:\n",
+      "mniejsza\n"
      ]
     }
    ],
    "source": [
     "print(\"Ten program porównuje dwie liczby\")\n",
-    "x = input(\"Podaj pierwszą z dwóch liczb:\")                                 \n",
-    "y = input(\"Podaj drugą z dwóch liczb:\")                                    \n",
-    "print(\"Liczba\",x,\"w stosunku do\",y,\"jest:\",)\n",
-    "if x==y:\n",
+    "x = input(\"Podaj pierwszą z dwóch liczb:\")\n",
+    "y = input(\"Podaj drugą z dwóch liczb:\")\n",
+    "print(\"Liczba\", x, \"w stosunku do\", y, \"jest:\", )\n",
+    "if x == y:\n",
     "    print(\"taka sama\")\n",
-    "elif x>y:\n",
+    "elif x > y:\n",
     "    print(\"większa\")\n",
     "else:\n",
     "    print(\"mniejsza\")"
@@ -182,12 +180,28 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 12,
    "metadata": {
     "collapsed": true
    },
-   "outputs": [],
-   "source": []
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "True\n"
+     ]
+    }
+   ],
+   "source": [
+    "def czy_przeciete(s1, r1, s2, r2):\n",
+    "    from math import sqrt\n",
+    "    dist = sqrt((s1[0] - s2[0]) ** 2 + (s1[1] - s2[1]) ** 2)\n",
+    "    return dist <= (r1 + r2)\n",
+    "\n",
+    "\n",
+    "print(czy_przeciete([0, 0], 5, [7, 0], 2))"
+   ]
   },
   {
    "cell_type": "markdown",
@@ -199,11 +213,23 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 45,
+   "execution_count": 5,
    "metadata": {
     "collapsed": true
    },
-   "outputs": [],
+   "outputs": [
+    {
+     "ename": "NameError",
+     "evalue": "name 'name' is not defined",
+     "output_type": "error",
+     "traceback": [
+      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[1;31mNameError\u001B[0m                                 Traceback (most recent call last)",
+      "Input \u001B[1;32mIn [5]\u001B[0m, in \u001B[0;36m<cell line: 1>\u001B[1;34m()\u001B[0m\n\u001B[1;32m----> 1\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[43mname\u001B[49m \u001B[38;5;129;01min\u001B[39;00m [\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mJohn\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mRick\u001B[39m\u001B[38;5;124m\"\u001B[39m]:\n\u001B[0;32m      2\u001B[0m     \u001B[38;5;28mprint\u001B[39m(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mYour name is either John or Rick.\u001B[39m\u001B[38;5;124m\"\u001B[39m)\n",
+      "\u001B[1;31mNameError\u001B[0m: name 'name' is not defined"
+     ]
+    }
+   ],
    "source": [
     "if name in [\"John\", \"Rick\"]:\n",
     "    print(\"Your name is either John or Rick.\")"
@@ -235,28 +261,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 46,
+   "execution_count": null,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "3\n",
-      "4\n",
-      "5\n",
-      "6\n",
-      "7\n",
-      "8\n",
-      "9\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
-    "for x in range(3,10):\n",
-    "      print(x)"
+    "for x in range(3, 10):\n",
+    "    print(x)"
    ]
   },
   {
@@ -272,27 +284,16 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 47,
+   "execution_count": null,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "range(0, 10)\n",
-      "range(3, 10)\n",
-      "range(1, 10, 2)\n",
-      "range(4, 0, -1)\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "print(range(10))\n",
     "print(range(3, 10))\n",
-    "print(range(1,10,2))\n",
-    "print(range(4,0,-1))"
+    "print(range(1, 10, 2))\n",
+    "print(range(4, 0, -1))"
    ]
   },
   {
@@ -304,34 +305,24 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 48,
+   "execution_count": null,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Zdrabniamy literki\n",
-      "2 3 5 7 \n",
-      "apple orange peach "
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "bar = \"Zdrabniamy literki\"\n",
     "for i in bar:\n",
-    "    print(i, end =\"\")\n",
+    "    print(i, end=\"\")\n",
     "print()\n",
     "\n",
     "x = [2, 3, 5, 7]\n",
     "for i in x:\n",
-    "    print(i, end =\" \") \n",
+    "    print(i, end=\" \")\n",
     "print()\n",
     "\n",
     "for e in ['apple', 'orange', 'peach']:\n",
-    "    print(e, end =\" \")"
+    "    print(e, end=\" \")"
    ]
   },
   {
@@ -343,23 +334,11 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 49,
+   "execution_count": null,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "[(0, 'apple'), (1, 'orange'), (2, 'peach')] \n",
-      "\n",
-      "0 apple\n",
-      "1 orange\n",
-      "2 peach\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "print(list(enumerate(['apple', 'orange', 'peach'])), \"\\n\")\n",
     "\n",
@@ -380,50 +359,25 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 50,
+   "execution_count": null,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "[1, 2, 3, 4, 5]\n",
-      "[1, 2, 3, 4]\n",
-      "[1, 2, 3]\n",
-      "[1, 2]\n",
-      "[1]\n",
-      "[]\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
-    "x=[1,2,3,4,5,6]\n",
+    "x = [1, 2, 3, 4, 5, 6]\n",
     "while x:\n",
-    "    x=x[:len(x)-1] # funkcja len() zwraca długość listy (liczbę elementów)\n",
+    "    x = x[:len(x) - 1]  # funkcja len() zwraca długość listy (liczbę elementów)\n",
     "    print(x)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 51,
+   "execution_count": null,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Jestem w while.\n",
-      "Jestem w while.\n",
-      "Jestem w while.\n",
-      "Jestem w while.\n",
-      "Jestem w while.\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "licznik = 10\n",
     "\n",
@@ -443,12 +397,32 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 14,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [],
-   "source": []
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "['abc', 'def', 'ghi', 'stop']\n"
+     ]
+    }
+   ],
+   "source": [
+    "def wczytaj():\n",
+    "    slowo = \"\"\n",
+    "    lista_slow = []\n",
+    "    while slowo != 'stop':\n",
+    "        slowo = input()\n",
+    "        lista_slow.append(slowo)\n",
+    "\n",
+    "    return lista_slow\n",
+    "\n",
+    "\n",
+    "print(wczytaj())"
+   ]
   },
   {
    "cell_type": "markdown",
@@ -477,12 +451,26 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 18,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [],
-   "source": []
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "[[1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]]\n"
+     ]
+    }
+   ],
+   "source": [
+    "def szachownica(n, m):\n",
+    "    return [[(x + i + 1) % 2 for x in range(m)] for i in range(n)]\n",
+    "\n",
+    "\n",
+    "print(szachownica(4, 10))"
+   ]
   },
   {
    "cell_type": "markdown",
@@ -507,7 +495,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 54,
+   "execution_count": 21,
    "metadata": {
     "collapsed": false
    },
@@ -545,7 +533,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 55,
+   "execution_count": 22,
    "metadata": {
     "collapsed": false
    },
@@ -577,22 +565,11 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 56,
+   "execution_count": null,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "123.000000\n",
-      "1.230000\n",
-      "123.000000\n",
-      "1.230000\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "print(\"%f\" % 123)\n",
     "print(\"%f\" % 1.23)\n",
@@ -615,12 +592,29 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 30,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [],
-   "source": []
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|...|\n",
+      "0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  "
+     ]
+    }
+   ],
+   "source": [
+    "def miarka(n, step):\n",
+    "    print((\"|\" + \".\" * step) * n + \"|\")\n",
+    "    for i in range(n + 1):\n",
+    "        print((\"%-\" + str(step + 1) + \"s\") % i, end=\"\")\n",
+    "\n",
+    "\n",
+    "miarka(40, 3)"
+   ]
   },
   {
    "cell_type": "markdown",
@@ -641,13 +635,13 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 58,
+   "execution_count": null,
    "metadata": {
     "collapsed": true
    },
    "outputs": [],
    "source": [
-    "def nazwa_funkcji (lista_parametrow):\n",
+    "def nazwa_funkcji(lista_parametrow):\n",
     "    instrukcje_do_wykonania"
    ]
   },
@@ -660,25 +654,17 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 59,
+   "execution_count": null,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "To jest użycie funkcji\n",
-      "tak\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "# Przykład 1\n",
     "def wypisz(lancuch):\n",
     "    print(lancuch)\n",
-    "    \n",
+    "\n",
+    "\n",
     "wypisz(\"To jest użycie funkcji\")\n",
     "x = \"tak\"\n",
     "wypisz(x)"
@@ -686,26 +672,18 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 60,
+   "execution_count": null,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "12\n",
-      "1\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "# Przykład 2 - zwraca wynik\n",
     "def suma(x, y):\n",
-    "    return x+y\n",
+    "    return x + y\n",
     "\n",
-    "print(suma(4,8))\n",
+    "\n",
+    "print(suma(4, 8))\n",
     "x = suma(2, -1)\n",
     "print(x)"
    ]
@@ -720,26 +698,19 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 61,
+   "execution_count": null,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "(6, -2)\n",
-      "(6, -2)\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
-    "def f1(a,b):\n",
-    "    return a+b,a-b\n",
+    "def f1(a, b):\n",
+    "    return a + b, a - b\n",
+    "\n",
     "\n",
-    "def f2(a,b):\n",
-    "    return (a+b,a-b)\n",
+    "def f2(a, b):\n",
+    "    return (a + b, a - b)\n",
+    "\n",
     "\n",
     "print(f1(2, 4))\n",
     "print(f2(2, 4))"
@@ -760,12 +731,31 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 31,
    "metadata": {
     "collapsed": true
    },
-   "outputs": [],
-   "source": []
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "(11, 4, 30)\n"
+     ]
+    }
+   ],
+   "source": [
+    "def stats(arr):\n",
+    "    delta = max(arr) - min(arr)\n",
+    "    product = 1\n",
+    "    for el in arr:\n",
+    "        product *= el\n",
+    "\n",
+    "    return sum(arr), delta, product\n",
+    "\n",
+    "\n",
+    "print(stats([1, 3, 2, 5]))"
+   ]
   },
   {
    "cell_type": "markdown",
@@ -786,24 +776,11 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 62,
+   "execution_count": null,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "T\n",
-      "o\n",
-      "j\n",
-      "s\n",
-      "i\n",
-      "p\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "x = \"To jest napis\"\n",
     "print(x[0])\n",
@@ -817,19 +794,11 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 63,
+   "execution_count": null,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "13\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "x = \"To jest napis\"\n",
     "print(len(x))"
@@ -845,20 +814,11 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 64,
+   "execution_count": null,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "[1, 2, 3]\n",
-      "[1, 'tak', 5]\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "x = [1, 2, 3]\n",
     "y = [1, 'tak', 5]\n",
@@ -869,21 +829,11 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 65,
+   "execution_count": null,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "True\n",
-      "False\n",
-      "True\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "x = [1, 2, 3, 4]\n",
     "\n",
@@ -894,22 +844,11 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 66,
+   "execution_count": null,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "[range(0, 5), [8, -7, -1]]\n",
-      "range(0, 5)\n",
-      "[8, -7, -1]\n",
-      "-7\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "x = [range(5), [8, -7, -1]]\n",
     "\n",
@@ -930,12 +869,26 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 34,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [],
-   "source": []
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "P y t h o n\n"
+     ]
+    }
+   ],
+   "source": [
+    "def normalize(word):\n",
+    "    return \" \".join(list(word))\n",
+    "\n",
+    "\n",
+    "print(normalize(\"Python\"))"
+   ]
   },
   {
    "cell_type": "markdown",
@@ -947,12 +900,26 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 35,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [],
-   "source": []
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "olleh\n"
+     ]
+    }
+   ],
+   "source": [
+    "def reverse(word):\n",
+    "    return word[::-1]\n",
+    "\n",
+    "\n",
+    "print(reverse(\"hello\"))"
+   ]
   },
   {
    "cell_type": "markdown",
@@ -973,30 +940,20 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 37,
+   "execution_count": null,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "3\n",
-      "6\n",
-      "10\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "import random\n",
     "\n",
-    "random.seed() # inicjalizacja generatora liczb pseudolosowych\n",
+    "random.seed()  # inicjalizacja generatora liczb pseudolosowych\n",
     "\n",
     "# losowanie liczb całkowitych z zakresu od..do.\n",
-    "print(random.randint(1,10))\n",
-    "print(random.randint(1,10))\n",
-    "print(random.randint(1,10))"
+    "print(random.randint(1, 10))\n",
+    "print(random.randint(1, 10))\n",
+    "print(random.randint(1, 10))"
    ]
   },
   {
@@ -1008,39 +965,22 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 38,
+   "execution_count": null,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "5\n",
-      "4\n",
-      "3.0\n",
-      "(0.5, 2.0)\n",
-      "7.38905609893065\n",
-      "1.0\n",
-      "3.0\n",
-      "1.5\n",
-      "0.0\n",
-      "0.5403023058681398\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "from math import *\n",
     "\n",
-    "print(ceil(4.7)) # zwraca sufit liczby rzeczywistej\n",
-    "print(floor(4.7)) # zwraca podłogę liczby rzeczywistej\n",
-    "print(fabs(-3)) # zwraca wartość absolutną liczby rzeczywistej\n",
-    "print(modf(2.5)) # zwraca krotkę zawierającą część ułamkową i całkowitą liczby rzeczywistej\n",
-    "print(exp(2)) # zwraca e do potęgi x\n",
-    "print(log(e)) # zwraca logarytm naturalny\n",
-    "print(log(8, 2)) # zwraca logarytm o podstawie 2 (drugi parametr)\n",
-    "print(sqrt(2.25)) # zwraca pierwiastek kwadratowy\n",
+    "print(ceil(4.7))  # zwraca sufit liczby rzeczywistej\n",
+    "print(floor(4.7))  # zwraca podłogę liczby rzeczywistej\n",
+    "print(fabs(-3))  # zwraca wartość absolutną liczby rzeczywistej\n",
+    "print(modf(2.5))  # zwraca krotkę zawierającą część ułamkową i całkowitą liczby rzeczywistej\n",
+    "print(exp(2))  # zwraca e do potęgi x\n",
+    "print(log(e))  # zwraca logarytm naturalny\n",
+    "print(log(8, 2))  # zwraca logarytm o podstawie 2 (drugi parametr)\n",
+    "print(sqrt(2.25))  # zwraca pierwiastek kwadratowy\n",
     "print(acos(1))\n",
     "print(cos(1))"
    ]
@@ -1070,12 +1010,39 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 109,
    "metadata": {
     "collapsed": false
    },
-   "outputs": [],
-   "source": []
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "3.14776\n"
+     ]
+    }
+   ],
+   "source": [
+    "from math import sqrt\n",
+    "\n",
+    "\n",
+    "def dist(p1, p2):\n",
+    "    return sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)\n",
+    "\n",
+    "\n",
+    "def estimate(accuracy, r=1):\n",
+    "    from random import uniform\n",
+    "    counter = 0\n",
+    "    for _ in range(accuracy):\n",
+    "        point = (uniform(-r, r), uniform(-2*r, 2*r))\n",
+    "        if dist((0, 0), point) <= r:\n",
+    "            counter += 1\n",
+    "\n",
+    "    return 8*counter/accuracy\n",
+    "\n",
+    "print(estimate(1000000))\n"
+   ]
   }
  ],
  "metadata": {
@@ -1099,4 +1066,4 @@
  },
  "nbformat": 4,
  "nbformat_minor": 0
-}
+}
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1648214639580)
+++ b/.idea/.gitignore	(date 1648214639580)
@@ -0,0 +1,10 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
+# CodeStream ignored files
+/../../podstawy_sztucznej_inteligencji\.idea/codestream.xml
Index: Z02_numy_pandas.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"source\": [\n    \"# NumPy - operacje arytmetyczne w Pythonie\\n\",\n    \"\\n\",\n    \"Standardowe typy danych i procedury Pythona nie nadają się do poważnych zastosowań numerycznych. Konieczne było opracowanie zoptymalizowanych pod względem typowych operacji numerycznych typów danych i procedur. Stworzony został Numerical Python, zwany w skrócie NumPy. Podczas rozwoju tego pakietu kierowano się podejściem zastosowanym w takich językach jak Basis, MATLAB, rodzina języków APL, FORTRAN i innych. Tak więc NumPy jest biblioteką Pythona służącą do obliczeń naukowych. Dostarcza ona listę matematycznych funkcji użytecznych w takich zagadnieniach jak:\\n\",\n    \"  \\n\",\n    \"  * algebra liniowa,\\n\",\n    \"  * transformacje Fouriera,\\n\",\n    \"  * generowanie liczb losowych,\\n\",\n    \"  * oraz wszystkie operacje na tablicach i macierzach, które są podstawowymi obiektami w Numpy.\\n\",\n    \"  \\n\",\n    \"Żeby można korzystać z dobrodziejstwa tej biblioteki należy ją zaimportować:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import numpy\\n\",\n    \"# lub\\n\",\n    \"import numpy as np \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Tworzenie macierzy\\n\",\n    \"Do stworzenia tablicy jedno-, dwu- i wielowymiarowej używamy funkcji **array**:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[1 2 3]\\n\",\n      \"\\n\",\n      \" \\n\",\n      \"\\n\",\n      \"[[1 2 3]\\n\",\n      \" [4 5 6]]\\n\",\n      \"\\n\",\n      \" \\n\",\n      \"\\n\",\n      \"[[[1 1 1]\\n\",\n      \"  [1 1 1]]\\n\",\n      \"\\n\",\n      \" [[2 2 2]\\n\",\n      \"  [2 2 2]]]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"x = np.array([1,2,3]) # tablica jednowymiarowa\\n\",\n    \"A = np.array([[1,2,3] , [4,5,6]]) # tablica dwuwymiarowa\\n\",\n    \"B = np.array( [[[1,1,1],[1,1,1]], [[2,2,2],[2,2,2]]]) # wielowymiarowa\\n\",\n    \"\\n\",\n    \"print(x)\\n\",\n    \"print(\\\"\\\\n \\\\n\\\")\\n\",\n    \"print(A)\\n\",\n    \"print(\\\"\\\\n \\\\n\\\")\\n\",\n    \"print(B)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Przy tworzeniu tablicy istnieje możliwość zadeklarowania jej typu:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[[1.+0.j 0.+0.j]\\n\",\n      \" [0.+0.j 1.+0.j]]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"z = np.array( [[1,0], [0,1]], dtype=complex) # tablica liczb zespolonych\\n\",\n    \"print(z) \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Do tworzenia tablicy jednowymiarowej (wektora) składającego się z elementów z danego zakresu używamy polecenia **arange(start, stop, krok)**:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[0 1 2 3 4 5 6 7 8 9]\\n\",\n      \" \\n\",\n      \"[0 2 4 6 8]\\n\",\n      \" \\n\",\n      \"[0.  0.5 1.  1.5 2.  2.5 3.  3.5 4.  4.5 5.  5.5 6.  6.5 7.  7.5 8.  8.5\\n\",\n      \" 9.  9.5]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(np.arange(10), end='\\\\n \\\\n')\\n\",\n    \"print(np.arange(0, 10, 2), end='\\\\n \\\\n')\\n\",\n    \"print(np.arange(0., 10, 0.5))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Jeśli chcemy wygenerować tablicę o określonej liczbie z danego przedziału, używamy funkcji **linspace**:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[ 0.  5. 10.]\\n\",\n      \" \\n\",\n      \"[0.   0.25 0.5  0.75 1.  ]\\n\"\n     ]\n    },\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"C:\\\\ProgramData\\\\Anaconda3\\\\lib\\\\site-packages\\\\ipykernel_launcher.py:1: DeprecationWarning: object of type <class 'float'> cannot be safely interpreted as an integer.\\n\",\n      \"  \\\"\\\"\\\"Entry point for launching an IPython kernel.\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(np.linspace(0., 10., 3.), end='\\\\n \\\\n')\\n\",\n    \"print(np.linspace(0., 1, 5) )\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Biblioteka Numpy oferuje wiele możliwości budowania typowych tablic:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[[1. 1. 1.]\\n\",\n      \" [1. 1. 1.]\\n\",\n      \" [1. 1. 1.]] \\n\",\n      \"\\n\",\n      \"[[0. 0.]\\n\",\n      \" [0. 0.]\\n\",\n      \" [0. 0.]] \\n\",\n      \"\\n\",\n      \"[[1. 0. 0. 0.]\\n\",\n      \" [0. 1. 0. 0.]\\n\",\n      \" [0. 0. 1. 0.]\\n\",\n      \" [0. 0. 0. 1.]]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(np.ones((3,3)), '\\\\n') # dwuwymiarowa tablica (3x3) wypełniona jedynkami\\n\",\n    \"print(np.zeros((3,2)), '\\\\n') # dwuwymiarowa tablica (3x2) wypełniona zerami\\n\",\n    \"print(np.eye(4)) # macierz jednostkowa 4x4\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Korzystając z powyższych funkcji możemy w łatwy sposób tworzyć dowolne macierze, zmieniając ich rozmiary.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[[ 0  1  2]\\n\",\n      \" [ 3  4  5]\\n\",\n      \" [ 6  7  8]\\n\",\n      \" [ 9 10 11]\\n\",\n      \" [12 13 14]] \\n\",\n      \"\\n\",\n      \"[[0.         0.07142857 0.14285714]\\n\",\n      \" [0.21428571 0.28571429 0.35714286]\\n\",\n      \" [0.42857143 0.5        0.57142857]\\n\",\n      \" [0.64285714 0.71428571 0.78571429]\\n\",\n      \" [0.85714286 0.92857143 1.        ]]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(np.arange(15).reshape(5,3), '\\\\n')\\n\",\n    \"print(np.linspace(0., 1, 15).reshape(5,3))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Operacje na indeksach tablicy\\n\",\n    \"Żeby odwołać się do konkretnej wartości tablicy należy użyć **[]** z odpowiednim indeksem (pamiętamy, że w Pythonie zaczynamy indeksować od 0).\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14] \\n\",\n      \"\\n\",\n      \"3 \\n\",\n      \"\\n\",\n      \"[[ 0  1  2  3]\\n\",\n      \" [ 4  5  6  7]\\n\",\n      \" [ 8  9 10 11]\\n\",\n      \" [12 13 14 15]\\n\",\n      \" [16 17 18 19]] \\n\",\n      \"\\n\",\n      \"11\\n\",\n      \"11 \\n\",\n      \"\\n\",\n      \"[ 8  9 10 11] \\n\",\n      \"\\n\",\n      \"[ 2  6 10 14 18]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"x = np.arange(15)\\n\",\n    \"print(x, '\\\\n')\\n\",\n    \"print(x[3], '\\\\n')\\n\",\n    \"\\n\",\n    \"A = np.arange(20).reshape(5,4)\\n\",\n    \"print(A, '\\\\n')\\n\",\n    \"print(A[2, 3])\\n\",\n    \"print(A[2][3], '\\\\n') # równoważnie\\n\",\n    \"print(A[2], '\\\\n') # trzeci wiersz\\n\",\n    \"print(A[:, 2]) # trzecia kolumna\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Aby wyświetlić fragment tablicy od  $n-1$  do  $m-1$  elementów używamy składni: **tablica[n:m]**, analogicznie aby wyświetlić elementy tablicy pomiędzy  $n-1$ , a  $m-1$  przesuwając się o wartość  $k$  używamy składni **tablica[n:m:k]**. \\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14] \\n\",\n      \"\\n\",\n      \"[ 3  4  5  6  7  8  9 10]\\n\",\n      \"[3 5 7 9] \\n\",\n      \"\\n\",\n      \"[[ 8  9 10 11]\\n\",\n      \" [12 13 14 15]] \\n\",\n      \"\\n\",\n      \"[[ 2  3]\\n\",\n      \" [ 6  7]\\n\",\n      \" [10 11]\\n\",\n      \" [14 15]\\n\",\n      \" [18 19]] \\n\",\n      \"\\n\",\n      \"[[ 2  3]\\n\",\n      \" [ 6  7]\\n\",\n      \" [10 11]\\n\",\n      \" [14 15]\\n\",\n      \" [18 19]]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"x = np.arange(15)\\n\",\n    \"print(x, '\\\\n')\\n\",\n    \"print(x[3:11])\\n\",\n    \"print(x[3:11:2], '\\\\n')\\n\",\n    \"\\n\",\n    \"A = np.arange(20).reshape(5,4)\\n\",\n    \"print(A[2:4], '\\\\n') # wiersze od trzeciego do czwartego\\n\",\n    \"print(A[:,2:4], '\\\\n') # trzecia i czwarta kolumnę\\n\",\n    \"print(A[:,[2,3]]) # równoważnie\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Jak widać z powyższych przykładów, przecinek w nawiasach **[]** rozdziela poszczególne wymiary tablic.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[5 6 7] \\n\",\n      \"\\n\",\n      \"[[4 5]\\n\",\n      \" [8 9]] \\n\",\n      \"\\n\",\n      \"[4 6]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(A[1,1:5], '\\\\n') # elementy z drugiego wiersza i od drugiej do piątej kolumny \\n\",\n    \"print(A[1:3, :2], '\\\\n') # elementy od drugiego do trzeciego wiersza, \\n\",\n    \"                 # znajdujące się w kolumnach od pierwszej do drugiej\\n\",\n    \"print(A[1,0:5:2]) # elementy drugiego wiersza i kolumny od pierwszej do piątej co dwie\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Tablice można też budować w oparciu o już istniejące:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 11,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[[ 0  1  2  3]\\n\",\n      \" [ 4  5  6  7]\\n\",\n      \" [ 8  9 10 11]\\n\",\n      \" [12 13 14 15]\\n\",\n      \" [16 17 18 19]] \\n\",\n      \"\\n\",\n      \"[[10 11]\\n\",\n      \" [14 15]]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"A = np.arange(20).reshape(5,4)\\n\",\n    \"print(A, '\\\\n')\\n\",\n    \"\\n\",\n    \"B = A[2:4, 2:]\\n\",\n    \"print(B)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zmiana rozmiaru, kształtu tablicy\\n\",\n    \"Do zmiany rozmiaru tablicy już utworzonej służy funkcja: reshape. Operacja ta nie zmieni zawartości oryginalnej tablicy, pokaże jedynie jej elementy w zadanej postaci.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[0 1 2 3 4 5 6 7] \\n\",\n      \"\\n\",\n      \"[[0 1 2 3]\\n\",\n      \" [4 5 6 7]] \\n\",\n      \"\\n\",\n      \"[0 1 2 3 4 5 6 7]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"A = np.arange(8)\\n\",\n    \"print(A,'\\\\n')\\n\",\n    \"print(A.reshape((2, 4)), '\\\\n')\\n\",\n    \"print(A)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Aby zmienić kształt tablicy za pomocą funkcji reshape możemy zrobić tak:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 13,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[0 1 2 3 4 5 6 7] \\n\",\n      \"\\n\",\n      \"[[0 1 2 3]\\n\",\n      \" [4 5 6 7]]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"A = np.arange(8)\\n\",\n    \"print(A,'\\\\n')\\n\",\n    \"A = A.reshape((2, 4))\\n\",\n    \"print(A)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"lub użyć funkcję **resize**:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 14,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[0 1 2 3 4 5 6 7] \\n\",\n      \"\\n\",\n      \"[[0 1 2 3]\\n\",\n      \" [4 5 6 7]]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"A = np.arange(8)\\n\",\n    \"print(A,'\\\\n')\\n\",\n    \"A.resize(2, 4)\\n\",\n    \"# print A.resize(2, 4), '\\\\n'\\n\",\n    \"print(A)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Do sprawdzenia wymiaru tablicy służy funkcja **shape**:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 15,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"(5, 4) \\n\",\n      \"\\n\",\n      \"5 \\n\",\n      \"\\n\",\n      \"4 \\n\",\n      \"\\n\",\n      \"20\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"A = np.arange(20).reshape(5,4)\\n\",\n    \"print(A.shape, '\\\\n') # wymiar tablicy\\n\",\n    \"print(A.shape[0], '\\\\n') # pierwszy wymiar\\n\",\n    \"print(A.shape[1], '\\\\n') # drugi wymiar\\n\",\n    \"print(A.size) # liczba wszystkich elementów w tablicy \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Transpozycja macierzy:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 16,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[[0 1 2 3]\\n\",\n      \" [4 5 6 7]] \\n\",\n      \"\\n\",\n      \"[[0 4]\\n\",\n      \" [1 5]\\n\",\n      \" [2 6]\\n\",\n      \" [3 7]] \\n\",\n      \"\\n\",\n      \"[[0 4]\\n\",\n      \" [1 5]\\n\",\n      \" [2 6]\\n\",\n      \" [3 7]]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"A = np.arange(8).reshape(2,4)\\n\",\n    \"print(A, '\\\\n')\\n\",\n    \"print(A.T, '\\\\n')\\n\",\n    \"print(np.transpose(A))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Podobnie jak przy funkcji reshape aby zachować wynik transpozycji macierzy musimy go przypisać do nowej zmiennej.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 17,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[[0 1 2 3]\\n\",\n      \" [4 5 6 7]] \\n\",\n      \"\\n\",\n      \"[[0 4]\\n\",\n      \" [1 5]\\n\",\n      \" [2 6]\\n\",\n      \" [3 7]]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(A, '\\\\n')\\n\",\n    \"A = A.T\\n\",\n    \"print(A)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Podobnie jest z poleceniem **swapaxes(tablica, oś1, oś2)**, które wyświetli zmienione wiersze z kolumnami dla tablicy dwuwymiarowej. Dla wielowymiarowych tablic zmieni ono elementy dla zadanych osi.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 18,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[[1 2 3]] \\n\",\n      \"\\n\",\n      \"[[1]\\n\",\n      \" [2]\\n\",\n      \" [3]] \\n\",\n      \"\\n\",\n      \"[[[0 1]\\n\",\n      \"  [2 3]]\\n\",\n      \"\\n\",\n      \" [[4 5]\\n\",\n      \"  [6 7]]] \\n\",\n      \"\\n\",\n      \"[[[0 4]\\n\",\n      \"  [2 6]]\\n\",\n      \"\\n\",\n      \" [[1 5]\\n\",\n      \"  [3 7]]]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"x = np.array([[1,2,3]])\\n\",\n    \"print(x, '\\\\n')\\n\",\n    \"print(np.swapaxes(x,0,1), '\\\\n')\\n\",\n    \"\\n\",\n    \"x = np.array([[[0,1],[2,3]],[[4,5],[6,7]]])\\n\",\n    \"print(x, '\\\\n')\\n\",\n    \"print(np.swapaxes(x, 0, 2))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Aby zmienić tablicę na jednowymiarową, możemy użyć polecenia:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 19,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[[0 1 2 3]\\n\",\n      \" [4 5 6 7]] \\n\",\n      \"\\n\",\n      \"[0 1 2 3 4 5 6 7] \\n\",\n      \"\\n\",\n      \"[0 1 2 3 4 5 6 7]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"A = np.arange(8).reshape(2,4)\\n\",\n    \"print(A, '\\\\n')\\n\",\n    \"print(np.ravel(A), '\\\\n')\\n\",\n    \"print(A.reshape(-1,))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Podstawowe operacje na tablicach\\n\",\n    \"\\n\",\n    \"  * dodawanie:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 20,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[1 5 8 5 9]\\n\",\n      \"[1 5 8 5 9] \\n\",\n      \"\\n\",\n      \"[2 5 7 3 6] \\n\",\n      \"\\n\",\n      \"[[15 17 19]\\n\",\n      \" [21 23 25]\\n\",\n      \" [27 29 31]\\n\",\n      \" [33 35 37]\\n\",\n      \" [39 41 43]]\\n\",\n      \"[[15 17 19]\\n\",\n      \" [21 23 25]\\n\",\n      \" [27 29 31]\\n\",\n      \" [33 35 37]\\n\",\n      \" [39 41 43]] \\n\",\n      \"\\n\",\n      \"[[20 21 22]\\n\",\n      \" [23 24 25]\\n\",\n      \" [26 27 28]\\n\",\n      \" [29 30 31]\\n\",\n      \" [32 33 34]] \\n\",\n      \"\\n\",\n      \"[[15 16 17]\\n\",\n      \" [18 19 20]\\n\",\n      \" [21 22 23]\\n\",\n      \" [24 25 26]\\n\",\n      \" [27 28 29]] \\n\",\n      \"\\n\",\n      \"[1 2 3] \\n\",\n      \"\\n\",\n      \"[[16 18 20]\\n\",\n      \" [19 21 23]\\n\",\n      \" [22 24 26]\\n\",\n      \" [25 27 29]\\n\",\n      \" [28 30 32]]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"x = np.array([1,4,6,2,5])\\n\",\n    \"v = np.arange(5)\\n\",\n    \"print(x+v)\\n\",\n    \"print(np.add(x, v), '\\\\n') # równoważnie\\n\",\n    \"print(x+1, '\\\\n')\\n\",\n    \"\\n\",\n    \"A = np.arange(15, 30).reshape((5, 3))\\n\",\n    \"B = np.arange(15).reshape((5, 3))\\n\",\n    \"print(A+B)\\n\",\n    \"print(np.add(A, B), '\\\\n')\\n\",\n    \"print(A+5, '\\\\n')\\n\",\n    \"\\n\",\n    \"x = np.array([1,2,3])\\n\",\n    \"print(A, '\\\\n')\\n\",\n    \"print(x, '\\\\n')\\n\",\n    \"print(np.add(A, x)) # dodawanie do każdego wiersza wektora x\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"* odejmowanie:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 21,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[ 1  3  4 -1  1]\\n\",\n      \"[ 1  3  4 -1  1] \\n\",\n      \"\\n\",\n      \"[0 3 5 1 4]\\n\",\n      \"[[15 15 15]\\n\",\n      \" [15 15 15]\\n\",\n      \" [15 15 15]\\n\",\n      \" [15 15 15]\\n\",\n      \" [15 15 15]]\\n\",\n      \"[[15 15 15]\\n\",\n      \" [15 15 15]\\n\",\n      \" [15 15 15]\\n\",\n      \" [15 15 15]\\n\",\n      \" [15 15 15]] \\n\",\n      \"\\n\",\n      \"[[14 15 16]\\n\",\n      \" [17 18 19]\\n\",\n      \" [20 21 22]\\n\",\n      \" [23 24 25]\\n\",\n      \" [26 27 28]] \\n\",\n      \"\\n\",\n      \"[[14 14 14]\\n\",\n      \" [17 17 17]\\n\",\n      \" [20 20 20]\\n\",\n      \" [23 23 23]\\n\",\n      \" [26 26 26]]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"x = np.array([1,4,6,2,5])\\n\",\n    \"v = np.arange(5)\\n\",\n    \"print(x-v)\\n\",\n    \"print(np.subtract(x, v), '\\\\n') # równoważnie\\n\",\n    \"print(x-1)\\n\",\n    \"\\n\",\n    \"A = np.arange(15, 30).reshape((5, 3))\\n\",\n    \"B = np.arange(15).reshape((5, 3))\\n\",\n    \"print(A-B)\\n\",\n    \"print(np.subtract(A, B), '\\\\n')\\n\",\n    \"print(A-1, '\\\\n')\\n\",\n    \"\\n\",\n    \"x = np.array([1,2,3])\\n\",\n    \"print(np.subtract(A, x)) # odjęcie od każdego wiersza wektora x\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"* mnożenie:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 22,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[ 5 20 30 10 25] \\n\",\n      \"\\n\",\n      \"42 \\n\",\n      \"\\n\",\n      \"[ 0  4 12  6 20] \\n\",\n      \"\\n\",\n      \"[[ 5 15]\\n\",\n      \" [ 0 30]] \\n\",\n      \"\\n\",\n      \"[[ 22   0]\\n\",\n      \" [ 48 -12]] \\n\",\n      \"\\n\",\n      \"[[ -2  18]\\n\",\n      \" [  0 -12]]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"x = np.array([1,4,6,2,5])\\n\",\n    \"v = np.arange(5)\\n\",\n    \"print(x*5, '\\\\n')\\n\",\n    \"print(np.dot(x,v), '\\\\n') # iloczyn skalarny\\n\",\n    \"print(x*v, '\\\\n' )# to nie, mnożony jest element przez element! \\n\",\n    \"\\n\",\n    \"A = np.array([[1, 3], [0, 6]])\\n\",\n    \"print(A*5, '\\\\n')\\n\",\n    \"\\n\",\n    \"B = np.array([[-2, 6], [8, -2]])\\n\",\n    \"print(np.dot(A, B), '\\\\n')\\n\",\n    \"print(A*B) # to nie, mnożony jest element przez element! \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"NumPy ma możliwość deklarowania macierzy, różnią się one w tym środowisku od tablic tym, że operacja mnożenia nie dotyczy mnożenia elementów, tylko klasycznego mnożenia macierzy:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 23,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[[17  1]\\n\",\n      \" [28  1]] \\n\",\n      \"\\n\",\n      \"[[17  1]\\n\",\n      \" [28  1]]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"A = np.matrix( ((2,3), (3, 5)) )\\n\",\n    \"B = np.matrix( ((1,2), (5, -1)) )\\n\",\n    \"\\n\",\n    \"print(A * B, '\\\\n')\\n\",\n    \"print(np.dot(A, B))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"  * potęgowanie:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 24,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[1 4 6 2 5] \\n\",\n      \"\\n\",\n      \"[ 1 16 36  4 25]\\n\",\n      \"[ 1 16 36  4 25] \\n\",\n      \"\\n\",\n      \"[[0 1 2]\\n\",\n      \" [3 4 5]\\n\",\n      \" [6 7 8]] \\n\",\n      \"\\n\",\n      \"[[ 0  1  4]\\n\",\n      \" [ 9 16 25]\\n\",\n      \" [36 49 64]] \\n\",\n      \"\\n\",\n      \"[[ 0  1  4]\\n\",\n      \" [ 9 16 25]\\n\",\n      \" [36 49 64]]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"x = np.array([1,4,6,2,5])\\n\",\n    \"print(x, '\\\\n')\\n\",\n    \"\\n\",\n    \"print(x**2)\\n\",\n    \"print(np.power(x, 2), '\\\\n') # równoważnie\\n\",\n    \"\\n\",\n    \"A = np.arange(9).reshape((3, 3))\\n\",\n    \"print(A, '\\\\n')\\n\",\n    \"print(A**2, '\\\\n') # kwadrat elementów tablicy\\n\",\n    \"print(np.power(A, 2)) # równoważnie\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Więcej funkcji można znaleźć tutaj: [https://docs.scipy.org/doc/numpy/reference/routines.math.html].\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Porównania elementów tablic\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 25,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[[False False False]\\n\",\n      \" [False False False]\\n\",\n      \" [False False False]\\n\",\n      \" [False False False]\\n\",\n      \" [False False False]] \\n\",\n      \"\\n\",\n      \"[[ True  True  True]\\n\",\n      \" [ True  True  True]\\n\",\n      \" [ True  True  True]\\n\",\n      \" [ True  True  True]\\n\",\n      \" [ True  True  True]] \\n\",\n      \"\\n\",\n      \"[[False False False]\\n\",\n      \" [False False False]\\n\",\n      \" [False False False]\\n\",\n      \" [False False False]\\n\",\n      \" [ True False False]] \\n\",\n      \"\\n\",\n      \"True \\n\",\n      \"\\n\",\n      \"False\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"A = np.arange(5, 20).reshape((5, 3))\\n\",\n    \"B = np.arange(15).reshape((5, 3))\\n\",\n    \"\\n\",\n    \"print(A < B, '\\\\n')\\n\",\n    \"print(A == A, '\\\\n')\\n\",\n    \"print(A == 17, '\\\\n')\\n\",\n    \"print(np.any( A > 17 ), '\\\\n') # prawdziwe, jeśli każdy element z osobna spełnia warunek \\n\",\n    \"print(np.all( A > 17 )) # prawdziwe jeśli wszystkie elementy spełniają warunek\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Łączenie i dzielenie tablic\\n\",\n    \"Biblioteka <i>NumPy</i> daje nam narzędzia dzięki, którym możemy łączyć i dzielić tablice. Zaczniemy od omówienia problemu łączenia tablic:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 26,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[[1 2]\\n\",\n      \" [3 4]] \\n\",\n      \"\\n\",\n      \"[[5 6]] \\n\",\n      \"\\n\",\n      \"[[1 2]\\n\",\n      \" [3 4]\\n\",\n      \" [5 6]] \\n\",\n      \"\\n\",\n      \"[[1 2]\\n\",\n      \" [3 4]\\n\",\n      \" [5 6]] \\n\",\n      \"\\n\",\n      \"[[1 2 5]\\n\",\n      \" [3 4 6]] \\n\",\n      \"\\n\",\n      \"[[1 2 5]\\n\",\n      \" [3 4 6]]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"x = np.array([[1, 2], [3, 4]])\\n\",\n    \"y = np.array([[5, 6]])\\n\",\n    \"\\n\",\n    \"print(x, '\\\\n')\\n\",\n    \"print(y, '\\\\n')\\n\",\n    \"\\n\",\n    \"# łączenie wierszowe\\n\",\n    \"print(np.concatenate((x, y), axis=0), '\\\\n')\\n\",\n    \"print(np.vstack((x,y)), '\\\\n')\\n\",\n    \"\\n\",\n    \"# łączenie kolumnowe\\n\",\n    \"print(np.concatenate((x,y.T), axis=1), '\\\\n')\\n\",\n    \"print(np.hstack((x,y.T)))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Wybrane metody z algebry linowej\\n\",\n    \"Do części funkcji typowych dla algebry liniowej możemy się odwołać po zaimportowaniu biblioteki **linalg** będącej integralną częścią biblioteki NumPy.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 27,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import numpy.linalg as alg \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Można tam znaleźć funkcję obliczającą:\\n\",\n    \"\\n\",\n    \"* macierz odwrotną:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 28,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[[-2.   1. ]\\n\",\n      \" [ 1.5 -0.5]] \\n\",\n      \"\\n\",\n      \"[[1.00000000e+00 1.11022302e-16]\\n\",\n      \" [0.00000000e+00 1.00000000e+00]]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"A = np.array([[1., 2.], [3., 4.]])\\n\",\n    \"invA = alg.inv(A)\\n\",\n    \"print(invA, '\\\\n')\\n\",\n    \"print(np.dot(A, invA))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"  * wyznacznik:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 29,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[[1. 2.]\\n\",\n      \" [3. 4.]] \\n\",\n      \"\\n\",\n      \"-2.0000000000000004\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(A, '\\\\n')\\n\",\n    \"print(alg.det(A))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"  * ślad:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 30,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[[1. 2.]\\n\",\n      \" [3. 4.]] \\n\",\n      \"\\n\",\n      \"5.0\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(A, '\\\\n')\\n\",\n    \"print(np.trace(A))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"  * normę dla macierz lub wektora:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 31,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"5.477225575051661 \\n\",\n      \"\\n\",\n      \"5.477225575051661 \\n\",\n      \"\\n\",\n      \"7.0 \\n\",\n      \"\\n\",\n      \"[3.16227766 4.47213595] \\n\",\n      \"\\n\",\n      \"[2.23606798 5.        ] \\n\",\n      \"\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(alg.norm(A), '\\\\n') # Euklidesowa\\n\",\n    \"print(alg.norm(A, 'fro'), '\\\\n') # Frobeniusa\\n\",\n    \"print(alg.norm(A, np.inf), '\\\\n') # maksimum\\n\",\n    \"\\n\",\n    \"print(alg.norm(A, axis=0), '\\\\n') # wierszy\\n\",\n    \"print(alg.norm(A, axis=1), '\\\\n') # kolumn\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"  * rozwiązywanie układów równań:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 32,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[2.33333333 0.66666667]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# 4*x_1 + x_2 = 10\\n\",\n    \"# 3*x_1 = 7\\n\",\n    \"A = np.array([[4,1], [3,0]])\\n\",\n    \"b = np.array([10,7])\\n\",\n    \"print(np.linalg.solve(A, b))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Statystyka\\n\",\n    \"<i>NumPy</i> oferuje dużo możliwości generacji liczb losowych. Poniżej podaję niektóre z nich, więcej można znaleźć tutaj:\\n\",\n    \"[https://docs.scipy.org/doc/numpy/reference/routines.random.html]\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 33,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[[0.51331593 0.71828258]\\n\",\n      \" [0.31437938 0.42175377]\\n\",\n      \" [0.87209429 0.01614226]] \\n\",\n      \"\\n\",\n      \"[[ 3.26489408 -0.84423382  3.17960921]\\n\",\n      \" [ 2.38894145  2.36848575  4.27726106]] \\n\",\n      \"\\n\",\n      \"[[4 0 3]\\n\",\n      \" [0 1 2]\\n\",\n      \" [2 4 0]] \\n\",\n      \"\\n\",\n      \"[0 4 3] \\n\",\n      \"\\n\",\n      \"[[0.08460561 0.13215186 1.05790284]\\n\",\n      \" [0.19639517 1.74343072 1.35525228]] \\n\",\n      \"\\n\",\n      \"[[4 1 2 5]\\n\",\n      \" [1 2 2 4]] \\n\",\n      \"\\n\",\n      \"[ 1.16642122 -0.83369971  0.71169424 -0.6633981   0.97364497 -0.80360861\\n\",\n      \" -0.01146566] \\n\",\n      \"\\n\",\n      \"[10  7  7  3  1  4  8  5  6  6] \\n\",\n      \"\\n\",\n      \"[[ 1.46862811 -1.7177219 ]\\n\",\n      \" [ 0.83913167 -3.46827871]\\n\",\n      \" [10.02853104 -7.21854854]\\n\",\n      \" [ 3.5565149  -4.51507624]\\n\",\n      \" [ 2.96303611 -3.70456031]\\n\",\n      \" [ 2.14766288 -3.65611269]\\n\",\n      \" [ 6.03688058 -4.68693286]] \\n\",\n      \"\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# macierz losowa 3x2 (liczby z przedziału [0, 1)) \\n\",\n    \"print(np.random.rand(3,2), '\\\\n')\\n\",\n    \"\\n\",\n    \"# macierz losowa 2x3 o elementach z rozkładu N(mu, sigma^2) = N(1, 4)\\n\",\n    \"print(2 * np.random.randn(2, 3) + 1, '\\\\n')\\n\",\n    \"\\n\",\n    \"# macierz losowa 3x3 o elementach całkowitych z przedziału [0, 5)\\n\",\n    \"print(np.random.randint(5, size=(3, 3)), '\\\\n')\\n\",\n    \"\\n\",\n    \"# losowe wybranie 3 liczb z [0, 1, 2, 3, 4]\\n\",\n    \"print(np.random.choice(5, 3, replace=False), '\\\\n')\\n\",\n    \"\\n\",\n    \"# rozkład wykładniczy (scale = 1/lambda)\\n\",\n    \"print(numpy.random.exponential(scale=1.0, size=(2, 3)), '\\\\n')\\n\",\n    \"\\n\",\n    \"# rozkład geometryczny\\n\",\n    \"print(np.random.geometric(p=0.35, size=(2,4)), '\\\\n')\\n\",\n    \"\\n\",\n    \"# rozkład normalny N(mu, sigma)\\n\",\n    \"print(np.random.normal(0.0, 1, size=7), '\\\\n')\\n\",\n    \"\\n\",\n    \"# rozkład Poissona\\n\",\n    \"print(np.random.poisson(5, 10), '\\\\n')\\n\",\n    \"\\n\",\n    \"# rozkład wielowymiarowy rozkład normalny\\n\",\n    \"mean = [5, -5]\\n\",\n    \"cov = [[10, -6], [-6, 5]]\\n\",\n    \"print(np.random.multivariate_normal(mean, cov, 7), '\\\\n')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Proste statystyki:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 34,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"3.8359494419580757 \\n\",\n      \"\\n\",\n      \"-1.3538077707295026 \\n\",\n      \"\\n\",\n      \"7.957616559033794 \\n\",\n      \"\\n\",\n      \"2.9097761372025803 \\n\",\n      \"\\n\",\n      \"1.1368023655762562\\n\",\n      \"1.1368023655762562 \\n\",\n      \"\\n\",\n      \"1.486329163903139 \\n\",\n      \"\\n\",\n      \"1.6628696116007926\\n\",\n      \"1.6628696116007926 \\n\",\n      \"\\n\",\n      \"2.765135345185371\\n\",\n      \"2.765135345185371\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"x = np.random.normal(2.0, 2.5, size=7)\\n\",\n    \"\\n\",\n    \"print(x.max(),'\\\\n') #maksymalna wartość\\n\",\n    \"\\n\",\n    \"print(x.min(),'\\\\n') # minimalna wartość \\n\",\n    \"\\n\",\n    \"print(x.sum(),'\\\\n') # suma wszystkich elementów \\n\",\n    \"\\n\",\n    \"print(x.prod(),'\\\\n') # iloczyn wszystkich elementów \\n\",\n    \"\\n\",\n    \"print(x.mean()) # średnia z wszystkich elementów\\n\",\n    \"print(np.mean(x),'\\\\n')\\n\",\n    \"\\n\",\n    \"print(np.median(x),'\\\\n') # mediana\\n\",\n    \"\\n\",\n    \"print(x.std()) # odchylenie standardowe \\n\",\n    \"print(np.std(x),'\\\\n')\\n\",\n    \"\\n\",\n    \"print(x.var()) # wariancja\\n\",\n    \"print(np.var(x))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie 1\\n\",\n    \"Wygeneruj losową tablice 100 x 10, która będzie reprezentować 100 punktów w 10 wymiarowej przestrzeni. Napisz funkcję, która policzy odległość euklidesową pomiędzy każdą parą punktów, czy potrafisz zrobić to w jednej linijce, bez użycia żadnych pętli/wytworników pętli? Przypomnienie, dla dwóch wektorów  xx  i  yy  odległość euklidesową liczymy ze wzoru: \\n\",\n    \"\\n\",\n    \"$$\\n\",\n    \"d(x,y)=\\\\|x-y\\\\|_2^2=\\\\sum_{i=1}^n |x_i-y_i|^2.\\n\",\n    \"$$\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie 2\\n\",\n    \"\\n\",\n    \"Wygeneruj losową tablicę z wielowymiarowego rozkładu normalnego (procedura random.multivariate_normal), która będzie reprezentować 100 punktów w 5 wymiarowej przestrzeni. Napisz funkcję do normalizacji zbioru punktów (zrób to w jednej linijce, bez użycia pętli):\\n\",\n    \"\\n\",\n    \"$$\\n\",\n    \"x_{ij} = \\\\frac{x_{ij}-\\\\mu_j}{\\\\sigma_j},\\n\",\n    \"$$\\n\",\n    \"\\n\",\n    \"gdzie  $μ_j$  to średnia, a  $σ_j$  to odchylenie standardowe po  $j$-tej kolumnie, zaś  $x_{ij}$  to  $j$-ta współrzędna  $i$ -tego wektora.\\n\",\n    \"\\n\",\n    \"Policz średnią i macierz kowariancji tak przekształconych danych. Co zaobserwowałeś?\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie 3\\n\",\n    \"\\n\",\n    \"Wypełni 100-elementową tablicę liczbami losowymi naturalnymi z zakresu  $[5,15]$  i policz liczbę wystąpień tych liczb. Która z tych liczb najczęściej występuje w tak wygenerowanej tablicy?\\n\",\n    \"Wskazówka: zobacz funkcje: bincount, argmax.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie 4\\n\",\n    \"\\n\",\n    \"Korzystając z poniższego kodu zaimportuj dane **breast cancer**, który składa się z 2 elementów: macierzy  $X$  o wymiarach 569 x 30 oraz wektora  $y$ o długości 569. Macierz  $X$  opisuje badania 683 pacjentów, a wektor  $y$  ich diagnozy.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 35,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"(569, 30)\\n\",\n      \"(569,)\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"from sklearn.datasets import load_breast_cancer\\n\",\n    \"X, y  = load_breast_cancer(return_X_y=True)\\n\",\n    \"print(X.shape)\\n\",\n    \"print(y.shape)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Za pomocą biblioteki **numpy** przenumeruj wektor  $y$ , tzn zamień wartości $0$ i $1$ na $-1$ i $+1$. Przeskaluj macierz  $X$ , tak żeby wartości w każdej kolumnie mieściły się w zakresie  $[0,1]$ , innymi słowy przeskaluj niezależnie każdą kolumnę  $X_i$  według poniższej procedury: \\n\",\n    \"\\n\",\n    \"$$\\n\",\n    \"X_i=\\\\frac{X_i-min(X_i)}{max(X_i)-min(X_i)}.\\n\",\n    \"$$\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Biblioteka Pandas\\n\",\n    \"\\n\",\n    \"**Pandas** jest darmową biblioteką języka Python, która służy do analizy danych. Zawiera łatwe w użyciu struktury i narzędzia do analizy danych spotykane w języku R.\\n\",\n    \"\\n\",\n    \"Biblioteka ta pozwala między innymi na:\\n\",\n    \"  \\n\",\n    \"  * tworzenie własnych danych w odpowiednich strukturach,\\n\",\n    \"  * importowanie i eksportowanie danych do różnych plików,\\n\",\n    \"  * przygotowanie danych do analizy (pozbycie się anomalii w danych, np. brakujących wartości),\\n\",\n    \"  * analizę danych,\\n\",\n    \"  * prezentację danych.\\n\",\n    \"\\n\",\n    \"Do instalacji tej biblioteki można użyć procedury **pip** albo **conda** [http://pandas.pydata.org/pandas-docs/stable/install.html]\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Aby skorzystać z biblioteki pandas należy ją wcześniej zaimportować, np.:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 36,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"0.24.2\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# import pandas\\n\",\n    \"import pandas as pd\\n\",\n    \"\\n\",\n    \"print(pd.__version__) # wersja biblioteki\\n\",\n    \"%matplotlib inline\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Struktury danych\\n\",\n    \"\\n\",\n    \"Biblioteka pandas wprowadza dwie nowe struktury danych do Pythona: **Series** i **DataFrame**.\\n\",\n    \"\\n\",\n    \"1. **Serie**\\n\",\n    \"\\n\",\n    \"Seria to jednowymiarowy obiekt podobny do tablicy, listy, który może zawierać różnego rodzaju dane (liczby całkowite, zmiennoprzecinkowe, ciągi, obiekty Pythona, itd.). Każdy element serii ma przypisany indeks/etykietę (domyślnie od 0 do N, gdzie N jest długość serii minus 1).\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 37,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"0                7\\n\",\n      \"1       Heisenberg\\n\",\n      \"2             3.14\\n\",\n      \"3      -1789710578\\n\",\n      \"4    Happy Eating!\\n\",\n      \"dtype: object\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"from pandas import Series, DataFrame\\n\",\n    \"import pandas as pd\\n\",\n    \"s = pd.Series([7, 'Heisenberg', 3.14, -1789710578, 'Happy Eating!'])\\n\",\n    \"print(s)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Alternatywnie, można zdefiniować indeksy elementów serii w trakcje jej definicji:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 38,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"a   -0.549234\\n\",\n      \"b    0.679250\\n\",\n      \"c    2.144546\\n\",\n      \"i   -0.261919\\n\",\n      \"e   -0.151553\\n\",\n      \"dtype: float64\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"import numpy as np\\n\",\n    \"\\n\",\n    \"# Series(dane, index=indeks)\\n\",\n    \"s = Series(np.random.randn(5), index=['a', 'b', 'c', 'i', 'e'])\\n\",\n    \"print(s)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Konstruktor **Series** może przetwarzać słowniki Pythona:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 39,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"a    0.0\\n\",\n      \"b    1.0\\n\",\n      \"c    2.0\\n\",\n      \"dtype: float64\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"d = {'a' : 0., 'b' : 1., 'c' : 2.}\\n\",\n    \"print(Series(d))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 40,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"b    1.0\\n\",\n      \"c    2.0\\n\",\n      \"d    NaN\\n\",\n      \"a    0.0\\n\",\n      \"dtype: float64\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(Series(d, index=['b', 'c', 'd', 'a']))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 41,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"a    1\\n\",\n      \"b    1\\n\",\n      \"c    1\\n\",\n      \"d    1\\n\",\n      \"e    1\\n\",\n      \"dtype: int64 \\n\",\n      \"\\n\",\n      \"a    1.0\\n\",\n      \"b    1.0\\n\",\n      \"c    1.0\\n\",\n      \"d    1.0\\n\",\n      \"e    1.0\\n\",\n      \"dtype: float64\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(Series(1, index=['a', 'b', 'c', 'd', 'e']), '\\\\n')\\n\",\n    \"print(Series(1., index=['a', 'b', 'c', 'd', 'e']))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 1.1 Odwoływanie się do elementów serii\\n\",\n    \"\\n\",\n    \"Struktura Series działa jak tablica. Można odwołać się do poszczególnego elementu serii za pomocą indeksu, używać logicznego indeksowania, itd.:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 42,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"a    0.658887\\n\",\n      \"b    0.786614\\n\",\n      \"c   -0.452638\\n\",\n      \"i   -1.455700\\n\",\n      \"e   -1.199088\\n\",\n      \"dtype: float64 \\n\",\n      \"\\n\",\n      \"0.6588874879366847 -1.455700308849256\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"s = Series(np.random.randn(5), index=['a', 'b', 'c', 'i', 'e'])\\n\",\n    \"print(s, '\\\\n')\\n\",\n    \"\\n\",\n    \"print(s[0], s[3])\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 43,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"a    0.658887\\n\",\n      \"b    0.786614\\n\",\n      \"dtype: float64 \\n\",\n      \"\\n\",\n      \"a    0.658887\\n\",\n      \"b    0.786614\\n\",\n      \"dtype: float64\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(s[s > 0.5], '\\\\n')\\n\",\n    \"print(s[s > s.mean()])\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 1.2 Zmiana wartości wybranych elementów\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 44,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"a    0.350033\\n\",\n      \"b   -0.471139\\n\",\n      \"c   -0.461294\\n\",\n      \"i    1.322515\\n\",\n      \"e   -0.983739\\n\",\n      \"dtype: float64 \\n\",\n      \"\\n\",\n      \"stara wartosc: 0.35003295927739314\\n\",\n      \"nowa wartosc: 10.0 \\n\",\n      \"\\n\",\n      \"stara wartosc: -0.47113931749810284\\n\",\n      \"nowa wartosc: 15.0\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"s = Series(np.random.randn(5), index=['a', 'b', 'c', 'i', 'e'])\\n\",\n    \"print(s, '\\\\n')\\n\",\n    \"print(\\\"stara wartosc:\\\",  s[0])\\n\",\n    \"s[0] = 10. \\n\",\n    \"print(\\\"nowa wartosc:\\\",  s[0], '\\\\n')\\n\",\n    \"\\n\",\n    \"print(\\\"stara wartosc:\\\",  s['b'])\\n\",\n    \"s['b'] = 15. \\n\",\n    \"print(\\\"nowa wartosc:\\\",  s['b'])\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 45,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"stare:\\n\",\n      \" a    0.704046\\n\",\n      \"b   -0.885024\\n\",\n      \"c    0.156746\\n\",\n      \"i    1.339003\\n\",\n      \"e   -0.157302\\n\",\n      \"dtype: float64 \\n\",\n      \"\\n\",\n      \"nowe:\\n\",\n      \" a    0.704046\\n\",\n      \"b    1.000000\\n\",\n      \"c    1.000000\\n\",\n      \"i    1.339003\\n\",\n      \"e    1.000000\\n\",\n      \"dtype: float64\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"s = Series(np.random.randn(5), index=['a', 'b', 'c', 'i', 'e'])\\n\",\n    \"print(\\\"stare:\\\\n\\\",  s, '\\\\n')\\n\",\n    \"s[s < s.mean()] = 1\\n\",\n    \"print(\\\"nowe:\\\\n\\\",  s)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 1.5 Niezdefiniowane wartości, obiekty\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 46,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Chicago          1000.0\\n\",\n      \"New York         1300.0\\n\",\n      \"Portland          900.0\\n\",\n      \"San Francisco    1100.0\\n\",\n      \"Austin            450.0\\n\",\n      \"Boston              NaN\\n\",\n      \"dtype: float64 \\n\",\n      \"\\n\",\n      \"False\\n\",\n      \"True\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"cities = Series({'Chicago': 1000, 'New York': 1300, 'Portland': 900,\\n\",\n    \"                 'San Francisco': 1100, 'Austin': 450, 'Boston': None})\\n\",\n    \"print(cities, '\\\\n')\\n\",\n    \"\\n\",\n    \"print('Seattle' in cities)\\n\",\n    \"print('San Francisco' in cities)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 47,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Chicago          1000.0\\n\",\n      \"New York         1300.0\\n\",\n      \"Portland          900.0\\n\",\n      \"San Francisco    1100.0\\n\",\n      \"Austin            450.0\\n\",\n      \"Boston              NaN\\n\",\n      \"dtype: float64 \\n\",\n      \"\\n\",\n      \"Chicago           True\\n\",\n      \"New York          True\\n\",\n      \"Portland          True\\n\",\n      \"San Francisco     True\\n\",\n      \"Austin            True\\n\",\n      \"Boston           False\\n\",\n      \"dtype: bool\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(cities, '\\\\n')\\n\",\n    \"print(cities.notnull()) # które są zdefiniowane\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 48,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Chicago          False\\n\",\n      \"New York         False\\n\",\n      \"Portland         False\\n\",\n      \"San Francisco    False\\n\",\n      \"Austin           False\\n\",\n      \"Boston            True\\n\",\n      \"dtype: bool\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(cities.isnull()) # które nie są zdefiniowane\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 49,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Boston   NaN\\n\",\n      \"dtype: float64\\n\",\n      \"\\n\",\n      \"Chicago          False\\n\",\n      \"New York         False\\n\",\n      \"Portland         False\\n\",\n      \"San Francisco    False\\n\",\n      \"Austin           False\\n\",\n      \"Boston           False\\n\",\n      \"dtype: bool\\n\",\n      \"\\n\",\n      \"Chicago          1000.0\\n\",\n      \"New York         1300.0\\n\",\n      \"Portland          900.0\\n\",\n      \"San Francisco    1100.0\\n\",\n      \"Austin            450.0\\n\",\n      \"Boston              1.0\\n\",\n      \"dtype: float64\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(cities[cities.isnull()]) # tylko te które nie są zdefiniowane \\n\",\n    \"cities[cities.isnull()] = 1\\n\",\n    \"print() \\n\",\n    \"print(cities.isnull())\\n\",\n    \"print()\\n\",\n    \"print(cities)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# 2. DataFrame\\n\",\n    \"\\n\",\n    \"<i>DataFrame</i> to struktura danych składa się z wierszy i kolumn, podobna do arkusza kalkulacyjnego, baz danych, tabeli 2-wymiarowej lub data.frame obiektu z języka R.\\n\",\n    \"\\n\",\n    \"Poniżej przedstawiam kilka sposobów definiowania struktury DataFrame:\\n\",\n    \"\\n\",\n    \"  * ze słownika list/tablic\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 50,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"   one  two\\n\",\n      \"0  1.0  4.0\\n\",\n      \"1  2.0  3.0\\n\",\n      \"2  3.0  2.0\\n\",\n      \"3  4.0  1.0\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>one</th>\\n\",\n       \"      <th>two</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>4.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>2.0</td>\\n\",\n       \"      <td>3.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>3.0</td>\\n\",\n       \"      <td>2.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>4.0</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   one  two\\n\",\n       \"0  1.0  4.0\\n\",\n       \"1  2.0  3.0\\n\",\n       \"2  3.0  2.0\\n\",\n       \"3  4.0  1.0\"\n      ]\n     },\n     \"execution_count\": 50,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"d = {'one' : [1., 2., 3., 4.],\\n\",\n    \"     'two' : [4., 3., 2., 1.]}\\n\",\n    \"print(DataFrame(d))\\n\",\n    \"DataFrame(d)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 51,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>year</th>\\n\",\n       \"      <th>team</th>\\n\",\n       \"      <th>wins</th>\\n\",\n       \"      <th>losses</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>2010</td>\\n\",\n       \"      <td>Bears</td>\\n\",\n       \"      <td>11</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>2011</td>\\n\",\n       \"      <td>Bears</td>\\n\",\n       \"      <td>8</td>\\n\",\n       \"      <td>8</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>2012</td>\\n\",\n       \"      <td>Bears</td>\\n\",\n       \"      <td>10</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>2011</td>\\n\",\n       \"      <td>Packers</td>\\n\",\n       \"      <td>15</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>2012</td>\\n\",\n       \"      <td>Packers</td>\\n\",\n       \"      <td>11</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>5</th>\\n\",\n       \"      <td>2010</td>\\n\",\n       \"      <td>Lions</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"      <td>10</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>6</th>\\n\",\n       \"      <td>2011</td>\\n\",\n       \"      <td>Lions</td>\\n\",\n       \"      <td>10</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>7</th>\\n\",\n       \"      <td>2012</td>\\n\",\n       \"      <td>Lions</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>12</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   year     team  wins  losses\\n\",\n       \"0  2010    Bears    11       5\\n\",\n       \"1  2011    Bears     8       8\\n\",\n       \"2  2012    Bears    10       6\\n\",\n       \"3  2011  Packers    15       1\\n\",\n       \"4  2012  Packers    11       5\\n\",\n       \"5  2010    Lions     6      10\\n\",\n       \"6  2011    Lions    10       6\\n\",\n       \"7  2012    Lions     4      12\"\n      ]\n     },\n     \"execution_count\": 51,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"data = {'year': [2010, 2011, 2012, 2011, 2012, 2010, 2011, 2012],\\n\",\n    \"        'team': ['Bears', 'Bears', 'Bears', 'Packers', 'Packers', 'Lions', 'Lions', 'Lions'],\\n\",\n    \"        'wins': [11, 8, 10, 15, 11, 6, 10, 4],\\n\",\n    \"        'losses': [5, 8, 6, 1, 5, 10, 6, 12]}\\n\",\n    \"football = pd.DataFrame(data, columns=['year', 'team', 'wins', 'losses'])\\n\",\n    \"football\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 2.1 Podstawowe informacje\\n\",\n    \"Biblioteka pandas ma wiele funkcji, które dostarczają nam podstawowej informacji na DataFrame. Jedną z takich funkcji jest metoda **info**.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 52,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"<class 'pandas.core.frame.DataFrame'>\\n\",\n      \"RangeIndex: 2 entries, 0 to 1\\n\",\n      \"Data columns (total 3 columns):\\n\",\n      \"a    2 non-null int64\\n\",\n      \"b    2 non-null int64\\n\",\n      \"c    1 non-null float64\\n\",\n      \"dtypes: float64(1), int64(2)\\n\",\n      \"memory usage: 128.0 bytes\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"data = [{'a': 1, 'b': 2}, \\n\",\n    \"         {'a': 5, 'b': 10, 'c': 20}]\\n\",\n    \"df = DataFrame(data)\\n\",\n    \"\\n\",\n    \"df.info()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 2.2 Wybieranie rekordów, kolumn, elementów\\n\",\n    \"\\n\",\n    \"Jak już wspomniałem strukturę DataFrame możemy traktować jako grupę/tablicę serii, które dzielą indeks (w tym przypadku nagłówki kolumn). Dzięki temu możemy w łatwy sposób wybrać konkretne rekordy.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 53,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"   year     team  wins  losses\\n\",\n      \"0  2010    Bears    11       5\\n\",\n      \"1  2011    Bears     8       8\\n\",\n      \"2  2012    Bears    10       6\\n\",\n      \"3  2011  Packers    15       1\\n\",\n      \"4  2012  Packers    11       5\\n\",\n      \"5  2010    Lions     6      10\\n\",\n      \"6  2011    Lions    10       6\\n\",\n      \"7  2012    Lions     4      12\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>year</th>\\n\",\n       \"      <th>team</th>\\n\",\n       \"      <th>wins</th>\\n\",\n       \"      <th>losses</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>2010</td>\\n\",\n       \"      <td>Bears</td>\\n\",\n       \"      <td>11</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>2011</td>\\n\",\n       \"      <td>Bears</td>\\n\",\n       \"      <td>8</td>\\n\",\n       \"      <td>8</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>2012</td>\\n\",\n       \"      <td>Bears</td>\\n\",\n       \"      <td>10</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   year   team  wins  losses\\n\",\n       \"0  2010  Bears    11       5\\n\",\n       \"1  2011  Bears     8       8\\n\",\n       \"2  2012  Bears    10       6\"\n      ]\n     },\n     \"execution_count\": 53,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"data = {'year': [2010, 2011, 2012, 2011, 2012, 2010, 2011, 2012],\\n\",\n    \"        'team': ['Bears', 'Bears', 'Bears', 'Packers', 'Packers', 'Lions', 'Lions', 'Lions'],\\n\",\n    \"        'wins': [11, 8, 10, 15, 11, 6, 10, 4],\\n\",\n    \"        'losses': [5, 8, 6, 1, 5, 10, 6, 12]}\\n\",\n    \"football = pd.DataFrame(data, columns=['year', 'team', 'wins', 'losses'])\\n\",\n    \"print (football)\\n\",\n    \"\\n\",\n    \"football.head(3)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 54,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0    2010\\n\",\n       \"1    2011\\n\",\n       \"2    2012\\n\",\n       \"3    2011\\n\",\n       \"Name: year, dtype: int64\"\n      ]\n     },\n     \"execution_count\": 54,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"football['year'].head(4)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 55,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>year</th>\\n\",\n       \"      <th>team</th>\\n\",\n       \"      <th>wins</th>\\n\",\n       \"      <th>losses</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>5</th>\\n\",\n       \"      <td>2010</td>\\n\",\n       \"      <td>Lions</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"      <td>10</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>6</th>\\n\",\n       \"      <td>2011</td>\\n\",\n       \"      <td>Lions</td>\\n\",\n       \"      <td>10</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>7</th>\\n\",\n       \"      <td>2012</td>\\n\",\n       \"      <td>Lions</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>12</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   year   team  wins  losses\\n\",\n       \"5  2010  Lions     6      10\\n\",\n       \"6  2011  Lions    10       6\\n\",\n       \"7  2012  Lions     4      12\"\n      ]\n     },\n     \"execution_count\": 55,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"football.tail(3)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Możemy też modyfikować DataFrame na podstawie wybranej kolumny.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 56,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>year</th>\\n\",\n       \"      <th>wins</th>\\n\",\n       \"      <th>losses</th>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>team</th>\\n\",\n       \"      <th></th>\\n\",\n       \"      <th></th>\\n\",\n       \"      <th></th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>Bears</th>\\n\",\n       \"      <td>2010</td>\\n\",\n       \"      <td>11</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>Bears</th>\\n\",\n       \"      <td>2011</td>\\n\",\n       \"      <td>8</td>\\n\",\n       \"      <td>8</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>Bears</th>\\n\",\n       \"      <td>2012</td>\\n\",\n       \"      <td>10</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>Packers</th>\\n\",\n       \"      <td>2011</td>\\n\",\n       \"      <td>15</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>Packers</th>\\n\",\n       \"      <td>2012</td>\\n\",\n       \"      <td>11</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>Lions</th>\\n\",\n       \"      <td>2010</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"      <td>10</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>Lions</th>\\n\",\n       \"      <td>2011</td>\\n\",\n       \"      <td>10</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>Lions</th>\\n\",\n       \"      <td>2012</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>12</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"         year  wins  losses\\n\",\n       \"team                       \\n\",\n       \"Bears    2010    11       5\\n\",\n       \"Bears    2011     8       8\\n\",\n       \"Bears    2012    10       6\\n\",\n       \"Packers  2011    15       1\\n\",\n       \"Packers  2012    11       5\\n\",\n       \"Lions    2010     6      10\\n\",\n       \"Lions    2011    10       6\\n\",\n       \"Lions    2012     4      12\"\n      ]\n     },\n     \"execution_count\": 56,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"football.set_index('team')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Aby wybrać którąś z kolumn należy użyć jej nazwy:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 57,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0    2010\\n\",\n       \"1    2011\\n\",\n       \"2    2012\\n\",\n       \"3    2011\\n\",\n       \"4    2012\\n\",\n       \"5    2010\\n\",\n       \"6    2011\\n\",\n       \"7    2012\\n\",\n       \"Name: year, dtype: int64\"\n      ]\n     },\n     \"execution_count\": 57,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"data = {'year': [2010, 2011, 2012, 2011, 2012, 2010, 2011, 2012],\\n\",\n    \"        'team': ['Bears', 'Bears', 'Bears', 'Packers', 'Packers', 'Lions', 'Lions', 'Lions'],\\n\",\n    \"        'wins': [11, 8, 10, 15, 11, 6, 10, 4],\\n\",\n    \"        'losses': [5, 8, 6, 1, 5, 10, 6, 12]}\\n\",\n    \"football = pd.DataFrame(data, columns=['year', 'team', 'wins', 'losses'])\\n\",\n    \"\\n\",\n    \"football['year'] # wybieramy kolumnę 'year'\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 58,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0    2010\\n\",\n       \"1    2011\\n\",\n       \"2    2012\\n\",\n       \"3    2011\\n\",\n       \"4    2012\\n\",\n       \"5    2010\\n\",\n       \"6    2011\\n\",\n       \"7    2012\\n\",\n       \"Name: year, dtype: int64\"\n      ]\n     },\n     \"execution_count\": 58,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"football.year\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 59,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>year</th>\\n\",\n       \"      <th>wins</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>2010</td>\\n\",\n       \"      <td>11</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>2011</td>\\n\",\n       \"      <td>8</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>2012</td>\\n\",\n       \"      <td>10</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>2011</td>\\n\",\n       \"      <td>15</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>2012</td>\\n\",\n       \"      <td>11</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>5</th>\\n\",\n       \"      <td>2010</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>6</th>\\n\",\n       \"      <td>2011</td>\\n\",\n       \"      <td>10</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>7</th>\\n\",\n       \"      <td>2012</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   year  wins\\n\",\n       \"0  2010    11\\n\",\n       \"1  2011     8\\n\",\n       \"2  2012    10\\n\",\n       \"3  2011    15\\n\",\n       \"4  2012    11\\n\",\n       \"5  2010     6\\n\",\n       \"6  2011    10\\n\",\n       \"7  2012     4\"\n      ]\n     },\n     \"execution_count\": 59,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"football[['year', 'wins']]\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Do wybierania wierszy/obserwacji służy funkcja **loc** (indeksowanie oparte na etykietach) lub **iloc** (indeksowanie oparte na pozycji).\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 60,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"year       2010\\n\",\n       \"team      Bears\\n\",\n       \"wins         11\\n\",\n       \"losses        5\\n\",\n       \"Name: 0, dtype: object\"\n      ]\n     },\n     \"execution_count\": 60,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"football.loc[0]\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 61,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>year</th>\\n\",\n       \"      <th>team</th>\\n\",\n       \"      <th>wins</th>\\n\",\n       \"      <th>losses</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>2010</td>\\n\",\n       \"      <td>Bears</td>\\n\",\n       \"      <td>11</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>2011</td>\\n\",\n       \"      <td>Packers</td>\\n\",\n       \"      <td>15</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   year     team  wins  losses\\n\",\n       \"0  2010    Bears    11       5\\n\",\n       \"3  2011  Packers    15       1\"\n      ]\n     },\n     \"execution_count\": 61,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"football.loc[[0,3]]\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# 2.3 Podstawowe operacje na DataFrame\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 62,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>year</th>\\n\",\n       \"      <th>team</th>\\n\",\n       \"      <th>wins</th>\\n\",\n       \"      <th>losses</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>2010</td>\\n\",\n       \"      <td>Bears</td>\\n\",\n       \"      <td>11</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>2011</td>\\n\",\n       \"      <td>Packers</td>\\n\",\n       \"      <td>15</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>2012</td>\\n\",\n       \"      <td>Packers</td>\\n\",\n       \"      <td>11</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   year     team  wins  losses\\n\",\n       \"0  2010    Bears    11       5\\n\",\n       \"3  2011  Packers    15       1\\n\",\n       \"4  2012  Packers    11       5\"\n      ]\n     },\n     \"execution_count\": 62,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"football[football.wins > 10]\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 63,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"15\"\n      ]\n     },\n     \"execution_count\": 63,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"football['wins'].max()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 64,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"wins      9.375\\n\",\n       \"losses    6.625\\n\",\n       \"dtype: float64\"\n      ]\n     },\n     \"execution_count\": 64,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"football[['wins', 'losses']].mean()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 65,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>year</th>\\n\",\n       \"      <th>team</th>\\n\",\n       \"      <th>wins</th>\\n\",\n       \"      <th>losses</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>2010</td>\\n\",\n       \"      <td>Bears</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>2011</td>\\n\",\n       \"      <td>Bears</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>8</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>2012</td>\\n\",\n       \"      <td>Bears</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>2011</td>\\n\",\n       \"      <td>Packers</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>2012</td>\\n\",\n       \"      <td>Packers</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>5</th>\\n\",\n       \"      <td>2010</td>\\n\",\n       \"      <td>Lions</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>6</th>\\n\",\n       \"      <td>2011</td>\\n\",\n       \"      <td>Lions</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>7</th>\\n\",\n       \"      <td>2012</td>\\n\",\n       \"      <td>Lions</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>12</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   year     team  wins  losses\\n\",\n       \"0  2010    Bears     0       5\\n\",\n       \"1  2011    Bears     0       8\\n\",\n       \"2  2012    Bears     0       6\\n\",\n       \"3  2011  Packers     0       1\\n\",\n       \"4  2012  Packers     0       5\\n\",\n       \"5  2010    Lions     0       0\\n\",\n       \"6  2011    Lions     0       6\\n\",\n       \"7  2012    Lions     0      12\"\n      ]\n     },\n     \"execution_count\": 65,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"football['wins'] = 0\\n\",\n    \"football.at[5, 'losses'] = 0\\n\",\n    \"football\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 2.6 Importowanie i eksportowanie danych\\n\",\n    \"\\n\",\n    \"  * eksport to CSV:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 66,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"data = {'year': [2010, 2011, 2012, 2011, 2012, 2010, 2011, 2012],\\n\",\n    \"        'team': ['Bears', 'Bears', 'Bears', 'Packers', 'Packers', 'Lions', 'Lions', 'Lions'],\\n\",\n    \"        'wins': [11, 8, 10, 15, 11, 6, 10, 4],\\n\",\n    \"        'losses': [5, 8, 6, 1, 5, 10, 6, 12]}\\n\",\n    \"football = pd.DataFrame(data, columns=['year', 'team', 'wins', 'losses'])\\n\",\n    \"\\n\",\n    \"football.to_csv('dane.csv', index=False)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"  * import z CSV:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 67,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>year</th>\\n\",\n       \"      <th>team</th>\\n\",\n       \"      <th>wins</th>\\n\",\n       \"      <th>losses</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>2010</td>\\n\",\n       \"      <td>Bears</td>\\n\",\n       \"      <td>11</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>2011</td>\\n\",\n       \"      <td>Bears</td>\\n\",\n       \"      <td>8</td>\\n\",\n       \"      <td>8</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>2012</td>\\n\",\n       \"      <td>Bears</td>\\n\",\n       \"      <td>10</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>2011</td>\\n\",\n       \"      <td>Packers</td>\\n\",\n       \"      <td>15</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>2012</td>\\n\",\n       \"      <td>Packers</td>\\n\",\n       \"      <td>11</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>5</th>\\n\",\n       \"      <td>2010</td>\\n\",\n       \"      <td>Lions</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"      <td>10</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>6</th>\\n\",\n       \"      <td>2011</td>\\n\",\n       \"      <td>Lions</td>\\n\",\n       \"      <td>10</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>7</th>\\n\",\n       \"      <td>2012</td>\\n\",\n       \"      <td>Lions</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>12</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   year     team  wins  losses\\n\",\n       \"0  2010    Bears    11       5\\n\",\n       \"1  2011    Bears     8       8\\n\",\n       \"2  2012    Bears    10       6\\n\",\n       \"3  2011  Packers    15       1\\n\",\n       \"4  2012  Packers    11       5\\n\",\n       \"5  2010    Lions     6      10\\n\",\n       \"6  2011    Lions    10       6\\n\",\n       \"7  2012    Lions     4      12\"\n      ]\n     },\n     \"execution_count\": 67,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"pd.read_csv('dane.csv')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Więcej informacji na temat biblioteki pandas można znaleźć tutaj: [http://pandas.pydata.org]\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie 5\\n\",\n    \"\\n\",\n    \"Zaimportuj dane z pliku ,,airports.csv'' i wykonaj na nich poniższe polecenia:\\n\",\n    \"\\n\",\n    \"  * wybierz nazwy państw ostatnich 12 lotnisk w tabeli,\\n\",\n    \"  * wybierz wiersz o indeksie 1 korzystając z indeksera .loc oraz .iloc (porównaj otrzymane wyniki),\\n\",\n    \"  * wybierz wszystkie lotniska w Polsce,\\n\",\n    \"  * wybierz wszystkie lotniska, których nazwa różni się od nazwy miasta, w którym się znajdują.\\n\",\n    \"  * przelicz wartości wysokości na metry i zapisz zmodyfikowaną kolumnę w miejsce starej (w naszej tabeli wysokość jest podana w   * stopach nad poziomem morza; jedna stopa angielska równa się 30,48 cm),\\n\",\n    \"  * znajdź wszystkie państwa, w których znajduje się wyłącznie 1 lotnisko (zobacz procedurę .unique()).\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 68,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <th>5</th>\\n\",\n       \"      <th>6</th>\\n\",\n       \"      <th>7</th>\\n\",\n       \"      <th>8</th>\\n\",\n       \"      <th>9</th>\\n\",\n       \"      <th>10</th>\\n\",\n       \"      <th>11</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>Goroka</td>\\n\",\n       \"      <td>Goroka</td>\\n\",\n       \"      <td>Papua New Guinea</td>\\n\",\n       \"      <td>GKA</td>\\n\",\n       \"      <td>AYGA</td>\\n\",\n       \"      <td>-6.081689</td>\\n\",\n       \"      <td>145.391881</td>\\n\",\n       \"      <td>5282</td>\\n\",\n       \"      <td>10.0</td>\\n\",\n       \"      <td>U</td>\\n\",\n       \"      <td>Pacific/Port_Moresby</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>Madang</td>\\n\",\n       \"      <td>Madang</td>\\n\",\n       \"      <td>Papua New Guinea</td>\\n\",\n       \"      <td>MAG</td>\\n\",\n       \"      <td>AYMD</td>\\n\",\n       \"      <td>-5.207083</td>\\n\",\n       \"      <td>145.788700</td>\\n\",\n       \"      <td>20</td>\\n\",\n       \"      <td>10.0</td>\\n\",\n       \"      <td>U</td>\\n\",\n       \"      <td>Pacific/Port_Moresby</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Mount Hagen</td>\\n\",\n       \"      <td>Mount Hagen</td>\\n\",\n       \"      <td>Papua New Guinea</td>\\n\",\n       \"      <td>HGU</td>\\n\",\n       \"      <td>AYMH</td>\\n\",\n       \"      <td>-5.826789</td>\\n\",\n       \"      <td>144.295861</td>\\n\",\n       \"      <td>5388</td>\\n\",\n       \"      <td>10.0</td>\\n\",\n       \"      <td>U</td>\\n\",\n       \"      <td>Pacific/Port_Moresby</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>Nadzab</td>\\n\",\n       \"      <td>Nadzab</td>\\n\",\n       \"      <td>Papua New Guinea</td>\\n\",\n       \"      <td>LAE</td>\\n\",\n       \"      <td>AYNZ</td>\\n\",\n       \"      <td>-6.569828</td>\\n\",\n       \"      <td>146.726242</td>\\n\",\n       \"      <td>239</td>\\n\",\n       \"      <td>10.0</td>\\n\",\n       \"      <td>U</td>\\n\",\n       \"      <td>Pacific/Port_Moresby</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>5</td>\\n\",\n       \"      <td>Port Moresby Jacksons Intl</td>\\n\",\n       \"      <td>Port Moresby</td>\\n\",\n       \"      <td>Papua New Guinea</td>\\n\",\n       \"      <td>POM</td>\\n\",\n       \"      <td>AYPY</td>\\n\",\n       \"      <td>-9.443383</td>\\n\",\n       \"      <td>147.220050</td>\\n\",\n       \"      <td>146</td>\\n\",\n       \"      <td>10.0</td>\\n\",\n       \"      <td>U</td>\\n\",\n       \"      <td>Pacific/Port_Moresby</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>5</th>\\n\",\n       \"      <td>6</td>\\n\",\n       \"      <td>Wewak Intl</td>\\n\",\n       \"      <td>Wewak</td>\\n\",\n       \"      <td>Papua New Guinea</td>\\n\",\n       \"      <td>WWK</td>\\n\",\n       \"      <td>AYWK</td>\\n\",\n       \"      <td>-3.583828</td>\\n\",\n       \"      <td>143.669186</td>\\n\",\n       \"      <td>19</td>\\n\",\n       \"      <td>10.0</td>\\n\",\n       \"      <td>U</td>\\n\",\n       \"      <td>Pacific/Port_Moresby</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>6</th>\\n\",\n       \"      <td>7</td>\\n\",\n       \"      <td>Narsarsuaq</td>\\n\",\n       \"      <td>Narssarssuaq</td>\\n\",\n       \"      <td>Greenland</td>\\n\",\n       \"      <td>UAK</td>\\n\",\n       \"      <td>BGBW</td>\\n\",\n       \"      <td>61.160517</td>\\n\",\n       \"      <td>-45.425978</td>\\n\",\n       \"      <td>112</td>\\n\",\n       \"      <td>-3.0</td>\\n\",\n       \"      <td>E</td>\\n\",\n       \"      <td>America/Godthab</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>7</th>\\n\",\n       \"      <td>8</td>\\n\",\n       \"      <td>Nuuk</td>\\n\",\n       \"      <td>Godthaab</td>\\n\",\n       \"      <td>Greenland</td>\\n\",\n       \"      <td>GOH</td>\\n\",\n       \"      <td>BGGH</td>\\n\",\n       \"      <td>64.190922</td>\\n\",\n       \"      <td>-51.678064</td>\\n\",\n       \"      <td>283</td>\\n\",\n       \"      <td>-3.0</td>\\n\",\n       \"      <td>E</td>\\n\",\n       \"      <td>America/Godthab</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8</th>\\n\",\n       \"      <td>9</td>\\n\",\n       \"      <td>Sondre Stromfjord</td>\\n\",\n       \"      <td>Sondrestrom</td>\\n\",\n       \"      <td>Greenland</td>\\n\",\n       \"      <td>SFJ</td>\\n\",\n       \"      <td>BGSF</td>\\n\",\n       \"      <td>67.016969</td>\\n\",\n       \"      <td>-50.689325</td>\\n\",\n       \"      <td>165</td>\\n\",\n       \"      <td>-3.0</td>\\n\",\n       \"      <td>E</td>\\n\",\n       \"      <td>America/Godthab</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>9</th>\\n\",\n       \"      <td>10</td>\\n\",\n       \"      <td>Thule Air Base</td>\\n\",\n       \"      <td>Thule</td>\\n\",\n       \"      <td>Greenland</td>\\n\",\n       \"      <td>THU</td>\\n\",\n       \"      <td>BGTL</td>\\n\",\n       \"      <td>76.531203</td>\\n\",\n       \"      <td>-68.703161</td>\\n\",\n       \"      <td>251</td>\\n\",\n       \"      <td>-4.0</td>\\n\",\n       \"      <td>E</td>\\n\",\n       \"      <td>America/Thule</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>10</th>\\n\",\n       \"      <td>11</td>\\n\",\n       \"      <td>Akureyri</td>\\n\",\n       \"      <td>Akureyri</td>\\n\",\n       \"      <td>Iceland</td>\\n\",\n       \"      <td>AEY</td>\\n\",\n       \"      <td>BIAR</td>\\n\",\n       \"      <td>65.659994</td>\\n\",\n       \"      <td>-18.072703</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>Atlantic/Reykjavik</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>11</th>\\n\",\n       \"      <td>12</td>\\n\",\n       \"      <td>Egilsstadir</td>\\n\",\n       \"      <td>Egilsstadir</td>\\n\",\n       \"      <td>Iceland</td>\\n\",\n       \"      <td>EGS</td>\\n\",\n       \"      <td>BIEG</td>\\n\",\n       \"      <td>65.283333</td>\\n\",\n       \"      <td>-14.401389</td>\\n\",\n       \"      <td>76</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>Atlantic/Reykjavik</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>12</th>\\n\",\n       \"      <td>13</td>\\n\",\n       \"      <td>Hornafjordur</td>\\n\",\n       \"      <td>Hofn</td>\\n\",\n       \"      <td>Iceland</td>\\n\",\n       \"      <td>HFN</td>\\n\",\n       \"      <td>BIHN</td>\\n\",\n       \"      <td>64.295556</td>\\n\",\n       \"      <td>-15.227222</td>\\n\",\n       \"      <td>24</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>Atlantic/Reykjavik</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>13</th>\\n\",\n       \"      <td>14</td>\\n\",\n       \"      <td>Husavik</td>\\n\",\n       \"      <td>Husavik</td>\\n\",\n       \"      <td>Iceland</td>\\n\",\n       \"      <td>HZK</td>\\n\",\n       \"      <td>BIHU</td>\\n\",\n       \"      <td>65.952328</td>\\n\",\n       \"      <td>-17.425978</td>\\n\",\n       \"      <td>48</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>Atlantic/Reykjavik</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>14</th>\\n\",\n       \"      <td>15</td>\\n\",\n       \"      <td>Isafjordur</td>\\n\",\n       \"      <td>Isafjordur</td>\\n\",\n       \"      <td>Iceland</td>\\n\",\n       \"      <td>IFJ</td>\\n\",\n       \"      <td>BIIS</td>\\n\",\n       \"      <td>66.058056</td>\\n\",\n       \"      <td>-23.135278</td>\\n\",\n       \"      <td>8</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>Atlantic/Reykjavik</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>15</th>\\n\",\n       \"      <td>16</td>\\n\",\n       \"      <td>Keflavik International Airport</td>\\n\",\n       \"      <td>Keflavik</td>\\n\",\n       \"      <td>Iceland</td>\\n\",\n       \"      <td>KEF</td>\\n\",\n       \"      <td>BIKF</td>\\n\",\n       \"      <td>63.985000</td>\\n\",\n       \"      <td>-22.605556</td>\\n\",\n       \"      <td>171</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>Atlantic/Reykjavik</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>16</th>\\n\",\n       \"      <td>17</td>\\n\",\n       \"      <td>Patreksfjordur</td>\\n\",\n       \"      <td>Patreksfjordur</td>\\n\",\n       \"      <td>Iceland</td>\\n\",\n       \"      <td>PFJ</td>\\n\",\n       \"      <td>BIPA</td>\\n\",\n       \"      <td>65.555833</td>\\n\",\n       \"      <td>-23.965000</td>\\n\",\n       \"      <td>11</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>Atlantic/Reykjavik</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>17</th>\\n\",\n       \"      <td>18</td>\\n\",\n       \"      <td>Reykjavik</td>\\n\",\n       \"      <td>Reykjavik</td>\\n\",\n       \"      <td>Iceland</td>\\n\",\n       \"      <td>RKV</td>\\n\",\n       \"      <td>BIRK</td>\\n\",\n       \"      <td>64.130000</td>\\n\",\n       \"      <td>-21.940556</td>\\n\",\n       \"      <td>48</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>Atlantic/Reykjavik</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>18</th>\\n\",\n       \"      <td>19</td>\\n\",\n       \"      <td>Siglufjordur</td>\\n\",\n       \"      <td>Siglufjordur</td>\\n\",\n       \"      <td>Iceland</td>\\n\",\n       \"      <td>SIJ</td>\\n\",\n       \"      <td>BISI</td>\\n\",\n       \"      <td>66.133333</td>\\n\",\n       \"      <td>-18.916667</td>\\n\",\n       \"      <td>10</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>Atlantic/Reykjavik</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>19</th>\\n\",\n       \"      <td>20</td>\\n\",\n       \"      <td>Vestmannaeyjar</td>\\n\",\n       \"      <td>Vestmannaeyjar</td>\\n\",\n       \"      <td>Iceland</td>\\n\",\n       \"      <td>VEY</td>\\n\",\n       \"      <td>BIVM</td>\\n\",\n       \"      <td>63.424303</td>\\n\",\n       \"      <td>-20.278875</td>\\n\",\n       \"      <td>326</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>Atlantic/Reykjavik</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>20</th>\\n\",\n       \"      <td>21</td>\\n\",\n       \"      <td>Sault Ste Marie</td>\\n\",\n       \"      <td>Sault Sainte Marie</td>\\n\",\n       \"      <td>Canada</td>\\n\",\n       \"      <td>YAM</td>\\n\",\n       \"      <td>CYAM</td>\\n\",\n       \"      <td>46.485001</td>\\n\",\n       \"      <td>-84.509445</td>\\n\",\n       \"      <td>630</td>\\n\",\n       \"      <td>-5.0</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/Toronto</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>21</th>\\n\",\n       \"      <td>22</td>\\n\",\n       \"      <td>Winnipeg St Andrews</td>\\n\",\n       \"      <td>Winnipeg</td>\\n\",\n       \"      <td>Canada</td>\\n\",\n       \"      <td>YAV</td>\\n\",\n       \"      <td>CYAV</td>\\n\",\n       \"      <td>50.056389</td>\\n\",\n       \"      <td>-97.032500</td>\\n\",\n       \"      <td>760</td>\\n\",\n       \"      <td>-6.0</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/Winnipeg</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>22</th>\\n\",\n       \"      <td>23</td>\\n\",\n       \"      <td>Shearwater</td>\\n\",\n       \"      <td>Halifax</td>\\n\",\n       \"      <td>Canada</td>\\n\",\n       \"      <td>YAW</td>\\n\",\n       \"      <td>CYAW</td>\\n\",\n       \"      <td>44.639721</td>\\n\",\n       \"      <td>-63.499444</td>\\n\",\n       \"      <td>167</td>\\n\",\n       \"      <td>-4.0</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/Halifax</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>23</th>\\n\",\n       \"      <td>24</td>\\n\",\n       \"      <td>St Anthony</td>\\n\",\n       \"      <td>St. Anthony</td>\\n\",\n       \"      <td>Canada</td>\\n\",\n       \"      <td>YAY</td>\\n\",\n       \"      <td>CYAY</td>\\n\",\n       \"      <td>51.391944</td>\\n\",\n       \"      <td>-56.083056</td>\\n\",\n       \"      <td>108</td>\\n\",\n       \"      <td>-3.5</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/St_Johns</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>24</th>\\n\",\n       \"      <td>25</td>\\n\",\n       \"      <td>Tofino</td>\\n\",\n       \"      <td>Tofino</td>\\n\",\n       \"      <td>Canada</td>\\n\",\n       \"      <td>YAZ</td>\\n\",\n       \"      <td>CYAZ</td>\\n\",\n       \"      <td>49.082222</td>\\n\",\n       \"      <td>-125.772500</td>\\n\",\n       \"      <td>80</td>\\n\",\n       \"      <td>-8.0</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/Vancouver</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>25</th>\\n\",\n       \"      <td>26</td>\\n\",\n       \"      <td>Kugaaruk</td>\\n\",\n       \"      <td>Pelly Bay</td>\\n\",\n       \"      <td>Canada</td>\\n\",\n       \"      <td>YBB</td>\\n\",\n       \"      <td>CYBB</td>\\n\",\n       \"      <td>68.534444</td>\\n\",\n       \"      <td>-89.808056</td>\\n\",\n       \"      <td>56</td>\\n\",\n       \"      <td>-7.0</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/Edmonton</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>26</th>\\n\",\n       \"      <td>27</td>\\n\",\n       \"      <td>Baie Comeau</td>\\n\",\n       \"      <td>Baie Comeau</td>\\n\",\n       \"      <td>Canada</td>\\n\",\n       \"      <td>YBC</td>\\n\",\n       \"      <td>CYBC</td>\\n\",\n       \"      <td>49.132500</td>\\n\",\n       \"      <td>-68.204444</td>\\n\",\n       \"      <td>71</td>\\n\",\n       \"      <td>-5.0</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/Toronto</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>27</th>\\n\",\n       \"      <td>28</td>\\n\",\n       \"      <td>Bagotville</td>\\n\",\n       \"      <td>Bagotville</td>\\n\",\n       \"      <td>Canada</td>\\n\",\n       \"      <td>YBG</td>\\n\",\n       \"      <td>CYBG</td>\\n\",\n       \"      <td>48.330555</td>\\n\",\n       \"      <td>-70.996391</td>\\n\",\n       \"      <td>522</td>\\n\",\n       \"      <td>-5.0</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/Toronto</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>28</th>\\n\",\n       \"      <td>29</td>\\n\",\n       \"      <td>Baker Lake</td>\\n\",\n       \"      <td>Baker Lake</td>\\n\",\n       \"      <td>Canada</td>\\n\",\n       \"      <td>YBK</td>\\n\",\n       \"      <td>CYBK</td>\\n\",\n       \"      <td>64.298889</td>\\n\",\n       \"      <td>-96.077778</td>\\n\",\n       \"      <td>59</td>\\n\",\n       \"      <td>-6.0</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/Winnipeg</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>29</th>\\n\",\n       \"      <td>30</td>\\n\",\n       \"      <td>Campbell River</td>\\n\",\n       \"      <td>Campbell River</td>\\n\",\n       \"      <td>Canada</td>\\n\",\n       \"      <td>YBL</td>\\n\",\n       \"      <td>CYBL</td>\\n\",\n       \"      <td>49.950832</td>\\n\",\n       \"      <td>-125.270833</td>\\n\",\n       \"      <td>346</td>\\n\",\n       \"      <td>-8.0</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/Vancouver</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8077</th>\\n\",\n       \"      <td>9512</td>\\n\",\n       \"      <td>Port of Seattle</td>\\n\",\n       \"      <td>Seattle</td>\\n\",\n       \"      <td>United States</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>PSEA</td>\\n\",\n       \"      <td>47.609178</td>\\n\",\n       \"      <td>-122.350605</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>-8.0</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/Los_Angeles</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8078</th>\\n\",\n       \"      <td>9513</td>\\n\",\n       \"      <td>Ferry Terminal</td>\\n\",\n       \"      <td>Whittier</td>\\n\",\n       \"      <td>United States</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>WHIT</td>\\n\",\n       \"      <td>60.776566</td>\\n\",\n       \"      <td>-148.683367</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>-9.0</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/Anchorage</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8079</th>\\n\",\n       \"      <td>9514</td>\\n\",\n       \"      <td>Ferry Terminal</td>\\n\",\n       \"      <td>Valdez</td>\\n\",\n       \"      <td>United States</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>VLDZ</td>\\n\",\n       \"      <td>61.123976</td>\\n\",\n       \"      <td>-146.365309</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>-9.0</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/Anchorage</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8080</th>\\n\",\n       \"      <td>9515</td>\\n\",\n       \"      <td>Gare Routiere</td>\\n\",\n       \"      <td>Saint-Louis</td>\\n\",\n       \"      <td>Reunion</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>STLS</td>\\n\",\n       \"      <td>-21.289604</td>\\n\",\n       \"      <td>55.407269</td>\\n\",\n       \"      <td>103</td>\\n\",\n       \"      <td>4.0</td>\\n\",\n       \"      <td>E</td>\\n\",\n       \"      <td>Indian/Reunion</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8081</th>\\n\",\n       \"      <td>9516</td>\\n\",\n       \"      <td>Bus Stop</td>\\n\",\n       \"      <td>La Riviere</td>\\n\",\n       \"      <td>Reunion</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>LRIV</td>\\n\",\n       \"      <td>-21.272574</td>\\n\",\n       \"      <td>55.437706</td>\\n\",\n       \"      <td>190</td>\\n\",\n       \"      <td>4.0</td>\\n\",\n       \"      <td>E</td>\\n\",\n       \"      <td>Indian/Reunion</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8082</th>\\n\",\n       \"      <td>9517</td>\\n\",\n       \"      <td>Bus Stop</td>\\n\",\n       \"      <td>Cilaos</td>\\n\",\n       \"      <td>Reunion</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>CILS</td>\\n\",\n       \"      <td>-21.135518</td>\\n\",\n       \"      <td>55.472087</td>\\n\",\n       \"      <td>4000</td>\\n\",\n       \"      <td>4.0</td>\\n\",\n       \"      <td>E</td>\\n\",\n       \"      <td>Indian/Reunion</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8083</th>\\n\",\n       \"      <td>9518</td>\\n\",\n       \"      <td>Bus Stop</td>\\n\",\n       \"      <td>Hell-Bourg</td>\\n\",\n       \"      <td>Reunion</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>HLBG</td>\\n\",\n       \"      <td>-21.064020</td>\\n\",\n       \"      <td>55.518453</td>\\n\",\n       \"      <td>3000</td>\\n\",\n       \"      <td>4.0</td>\\n\",\n       \"      <td>E</td>\\n\",\n       \"      <td>Indian/Reunion</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8084</th>\\n\",\n       \"      <td>9519</td>\\n\",\n       \"      <td>Bus Stop</td>\\n\",\n       \"      <td>Salazie</td>\\n\",\n       \"      <td>Reunion</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>SLZI</td>\\n\",\n       \"      <td>-21.027485</td>\\n\",\n       \"      <td>55.538955</td>\\n\",\n       \"      <td>3000</td>\\n\",\n       \"      <td>4.0</td>\\n\",\n       \"      <td>E</td>\\n\",\n       \"      <td>Indian/Reunion</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8085</th>\\n\",\n       \"      <td>9520</td>\\n\",\n       \"      <td>Gare</td>\\n\",\n       \"      <td>St Andre</td>\\n\",\n       \"      <td>Reunion</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>ANDR</td>\\n\",\n       \"      <td>-20.963272</td>\\n\",\n       \"      <td>55.652508</td>\\n\",\n       \"      <td>100</td>\\n\",\n       \"      <td>4.0</td>\\n\",\n       \"      <td>E</td>\\n\",\n       \"      <td>Indian/Reunion</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8086</th>\\n\",\n       \"      <td>9521</td>\\n\",\n       \"      <td>L'Ocean Bus Terminal</td>\\n\",\n       \"      <td>Saint Denis</td>\\n\",\n       \"      <td>Reunion</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>SDNS</td>\\n\",\n       \"      <td>-20.877683</td>\\n\",\n       \"      <td>55.457393</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>4.0</td>\\n\",\n       \"      <td>E</td>\\n\",\n       \"      <td>Indian/Reunion</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8087</th>\\n\",\n       \"      <td>9522</td>\\n\",\n       \"      <td>Gare Routiere</td>\\n\",\n       \"      <td>Saint Pierre</td>\\n\",\n       \"      <td>Reunion</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>STPR</td>\\n\",\n       \"      <td>-21.334240</td>\\n\",\n       \"      <td>55.471331</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>4.0</td>\\n\",\n       \"      <td>E</td>\\n\",\n       \"      <td>Indian/Reunion</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8088</th>\\n\",\n       \"      <td>9523</td>\\n\",\n       \"      <td>Baie Ste Anne</td>\\n\",\n       \"      <td>Praslin</td>\\n\",\n       \"      <td>Seychelles</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>PLIN</td>\\n\",\n       \"      <td>-4.347119</td>\\n\",\n       \"      <td>55.765688</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>4.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>Indian/Mahe</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8089</th>\\n\",\n       \"      <td>9524</td>\\n\",\n       \"      <td>La Passe</td>\\n\",\n       \"      <td>La Digue</td>\\n\",\n       \"      <td>Seychelles</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>LADG</td>\\n\",\n       \"      <td>-4.347969</td>\\n\",\n       \"      <td>55.829069</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>4.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>Indian/Mahe</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8090</th>\\n\",\n       \"      <td>9525</td>\\n\",\n       \"      <td>Ferry Dock</td>\\n\",\n       \"      <td>Bainbridge Island</td>\\n\",\n       \"      <td>United States</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>BAIN</td>\\n\",\n       \"      <td>47.622237</td>\\n\",\n       \"      <td>-122.509362</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>-8.0</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/Los_Angeles</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8091</th>\\n\",\n       \"      <td>9526</td>\\n\",\n       \"      <td>Bus</td>\\n\",\n       \"      <td>Phnom Penh</td>\\n\",\n       \"      <td>Cambodia</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>PNMP</td>\\n\",\n       \"      <td>11.561716</td>\\n\",\n       \"      <td>104.914276</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>7.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>Asia/Phnom_Penh</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8092</th>\\n\",\n       \"      <td>9527</td>\\n\",\n       \"      <td>Bus</td>\\n\",\n       \"      <td>Siem Reap</td>\\n\",\n       \"      <td>Cambodia</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>SMRP</td>\\n\",\n       \"      <td>13.361002</td>\\n\",\n       \"      <td>103.859543</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>7.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>Asia/Phnom_Penh</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8093</th>\\n\",\n       \"      <td>9528</td>\\n\",\n       \"      <td>Bus</td>\\n\",\n       \"      <td>Sihanoukville</td>\\n\",\n       \"      <td>Cambodia</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>SNKV</td>\\n\",\n       \"      <td>10.607220</td>\\n\",\n       \"      <td>103.524886</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>7.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>Asia/Phnom_Penh</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8094</th>\\n\",\n       \"      <td>9529</td>\\n\",\n       \"      <td>Bus</td>\\n\",\n       \"      <td>Kampot</td>\\n\",\n       \"      <td>Cambodia</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>KMPT</td>\\n\",\n       \"      <td>10.614922</td>\\n\",\n       \"      <td>104.177724</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>7.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>Asia/Phnom_Penh</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8095</th>\\n\",\n       \"      <td>9530</td>\\n\",\n       \"      <td>Bus</td>\\n\",\n       \"      <td>Kep</td>\\n\",\n       \"      <td>Cambodia</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>KEPC</td>\\n\",\n       \"      <td>10.480174</td>\\n\",\n       \"      <td>104.294228</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>7.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>Asia/Phnom_Penh</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8096</th>\\n\",\n       \"      <td>9531</td>\\n\",\n       \"      <td>Main Station</td>\\n\",\n       \"      <td>Taipei</td>\\n\",\n       \"      <td>Taiwan</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>TPEI</td>\\n\",\n       \"      <td>25.046176</td>\\n\",\n       \"      <td>121.517532</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>8.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>Asia/Taipei</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8097</th>\\n\",\n       \"      <td>9532</td>\\n\",\n       \"      <td>Prominent Hill</td>\\n\",\n       \"      <td>Prominent Hill</td>\\n\",\n       \"      <td>Australia</td>\\n\",\n       \"      <td>PXH</td>\\n\",\n       \"      <td>YPMH</td>\\n\",\n       \"      <td>-29.716667</td>\\n\",\n       \"      <td>135.521667</td>\\n\",\n       \"      <td>734</td>\\n\",\n       \"      <td>9.5</td>\\n\",\n       \"      <td>O</td>\\n\",\n       \"      <td>Australia/Adelaide</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8098</th>\\n\",\n       \"      <td>9533</td>\\n\",\n       \"      <td>Chatsworth Station</td>\\n\",\n       \"      <td>Chatsworth</td>\\n\",\n       \"      <td>United States</td>\\n\",\n       \"      <td>CWT</td>\\n\",\n       \"      <td>\\\\N</td>\\n\",\n       \"      <td>34.256944</td>\\n\",\n       \"      <td>-118.598889</td>\\n\",\n       \"      <td>978</td>\\n\",\n       \"      <td>-8.0</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/Los_Angeles</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8099</th>\\n\",\n       \"      <td>9534</td>\\n\",\n       \"      <td>Algerciras Port</td>\\n\",\n       \"      <td>Algerciras</td>\\n\",\n       \"      <td>Spain</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>\\\\N</td>\\n\",\n       \"      <td>36.136000</td>\\n\",\n       \"      <td>-5.435000</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>E</td>\\n\",\n       \"      <td>Europe/Madrid</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8100</th>\\n\",\n       \"      <td>9535</td>\\n\",\n       \"      <td>Ganges Water Aerodrome</td>\\n\",\n       \"      <td>Ganges</td>\\n\",\n       \"      <td>Canada</td>\\n\",\n       \"      <td>YGG</td>\\n\",\n       \"      <td>\\\\N</td>\\n\",\n       \"      <td>48.850000</td>\\n\",\n       \"      <td>-123.500000</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>-8.0</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/Vancouver</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8101</th>\\n\",\n       \"      <td>9536</td>\\n\",\n       \"      <td>Pender Harbour Water Aerodrome</td>\\n\",\n       \"      <td>Pender Harbour</td>\\n\",\n       \"      <td>Canada</td>\\n\",\n       \"      <td>YPT</td>\\n\",\n       \"      <td>\\\\N</td>\\n\",\n       \"      <td>49.616667</td>\\n\",\n       \"      <td>-124.016667</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>-8.0</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/Vancouver</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8102</th>\\n\",\n       \"      <td>9537</td>\\n\",\n       \"      <td>Mansons Landing Water Aerodrome</td>\\n\",\n       \"      <td>Mansons Landing</td>\\n\",\n       \"      <td>Canada</td>\\n\",\n       \"      <td>YMU</td>\\n\",\n       \"      <td>\\\\N</td>\\n\",\n       \"      <td>50.066667</td>\\n\",\n       \"      <td>-124.983333</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>-8.0</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/Vancouver</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8103</th>\\n\",\n       \"      <td>9538</td>\\n\",\n       \"      <td>Port McNeill Airport</td>\\n\",\n       \"      <td>Port McNeill</td>\\n\",\n       \"      <td>Canada</td>\\n\",\n       \"      <td>YMP</td>\\n\",\n       \"      <td>\\\\N</td>\\n\",\n       \"      <td>50.575556</td>\\n\",\n       \"      <td>-127.028611</td>\\n\",\n       \"      <td>225</td>\\n\",\n       \"      <td>-8.0</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/Vancouver</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8104</th>\\n\",\n       \"      <td>9539</td>\\n\",\n       \"      <td>Sullivan Bay Water Aerodrome</td>\\n\",\n       \"      <td>Sullivan Bay</td>\\n\",\n       \"      <td>Canada</td>\\n\",\n       \"      <td>YTG</td>\\n\",\n       \"      <td>\\\\N</td>\\n\",\n       \"      <td>50.883333</td>\\n\",\n       \"      <td>-126.833333</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>-8.0</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/Vancouver</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8105</th>\\n\",\n       \"      <td>9540</td>\\n\",\n       \"      <td>Deer Harbor Seaplane</td>\\n\",\n       \"      <td>Deer Harbor</td>\\n\",\n       \"      <td>United States</td>\\n\",\n       \"      <td>DHB</td>\\n\",\n       \"      <td>\\\\N</td>\\n\",\n       \"      <td>48.618397</td>\\n\",\n       \"      <td>-123.005960</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>-8.0</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/Los_Angeles</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8106</th>\\n\",\n       \"      <td>9541</td>\\n\",\n       \"      <td>San Diego Old Town Transit Center</td>\\n\",\n       \"      <td>San Diego</td>\\n\",\n       \"      <td>United States</td>\\n\",\n       \"      <td>OLT</td>\\n\",\n       \"      <td>\\\\N</td>\\n\",\n       \"      <td>32.755200</td>\\n\",\n       \"      <td>-117.199500</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>-8.0</td>\\n\",\n       \"      <td>A</td>\\n\",\n       \"      <td>America/Los_Angeles</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"<p>8107 rows × 12 columns</p>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"        0                                  1                   2   \\\\\\n\",\n       \"0        1                             Goroka              Goroka   \\n\",\n       \"1        2                             Madang              Madang   \\n\",\n       \"2        3                        Mount Hagen         Mount Hagen   \\n\",\n       \"3        4                             Nadzab              Nadzab   \\n\",\n       \"4        5         Port Moresby Jacksons Intl        Port Moresby   \\n\",\n       \"5        6                         Wewak Intl               Wewak   \\n\",\n       \"6        7                         Narsarsuaq        Narssarssuaq   \\n\",\n       \"7        8                               Nuuk            Godthaab   \\n\",\n       \"8        9                  Sondre Stromfjord         Sondrestrom   \\n\",\n       \"9       10                     Thule Air Base               Thule   \\n\",\n       \"10      11                           Akureyri            Akureyri   \\n\",\n       \"11      12                        Egilsstadir         Egilsstadir   \\n\",\n       \"12      13                       Hornafjordur                Hofn   \\n\",\n       \"13      14                            Husavik             Husavik   \\n\",\n       \"14      15                         Isafjordur          Isafjordur   \\n\",\n       \"15      16     Keflavik International Airport            Keflavik   \\n\",\n       \"16      17                     Patreksfjordur      Patreksfjordur   \\n\",\n       \"17      18                          Reykjavik           Reykjavik   \\n\",\n       \"18      19                       Siglufjordur        Siglufjordur   \\n\",\n       \"19      20                     Vestmannaeyjar      Vestmannaeyjar   \\n\",\n       \"20      21                    Sault Ste Marie  Sault Sainte Marie   \\n\",\n       \"21      22                Winnipeg St Andrews            Winnipeg   \\n\",\n       \"22      23                         Shearwater             Halifax   \\n\",\n       \"23      24                         St Anthony         St. Anthony   \\n\",\n       \"24      25                             Tofino              Tofino   \\n\",\n       \"25      26                           Kugaaruk           Pelly Bay   \\n\",\n       \"26      27                        Baie Comeau         Baie Comeau   \\n\",\n       \"27      28                         Bagotville          Bagotville   \\n\",\n       \"28      29                         Baker Lake          Baker Lake   \\n\",\n       \"29      30                     Campbell River      Campbell River   \\n\",\n       \"...    ...                                ...                 ...   \\n\",\n       \"8077  9512                    Port of Seattle             Seattle   \\n\",\n       \"8078  9513                     Ferry Terminal            Whittier   \\n\",\n       \"8079  9514                     Ferry Terminal              Valdez   \\n\",\n       \"8080  9515                      Gare Routiere         Saint-Louis   \\n\",\n       \"8081  9516                           Bus Stop          La Riviere   \\n\",\n       \"8082  9517                           Bus Stop              Cilaos   \\n\",\n       \"8083  9518                           Bus Stop          Hell-Bourg   \\n\",\n       \"8084  9519                           Bus Stop             Salazie   \\n\",\n       \"8085  9520                               Gare            St Andre   \\n\",\n       \"8086  9521               L'Ocean Bus Terminal         Saint Denis   \\n\",\n       \"8087  9522                      Gare Routiere        Saint Pierre   \\n\",\n       \"8088  9523                      Baie Ste Anne             Praslin   \\n\",\n       \"8089  9524                           La Passe            La Digue   \\n\",\n       \"8090  9525                         Ferry Dock   Bainbridge Island   \\n\",\n       \"8091  9526                                Bus          Phnom Penh   \\n\",\n       \"8092  9527                                Bus           Siem Reap   \\n\",\n       \"8093  9528                                Bus       Sihanoukville   \\n\",\n       \"8094  9529                                Bus              Kampot   \\n\",\n       \"8095  9530                                Bus                 Kep   \\n\",\n       \"8096  9531                       Main Station              Taipei   \\n\",\n       \"8097  9532                     Prominent Hill      Prominent Hill   \\n\",\n       \"8098  9533                 Chatsworth Station          Chatsworth   \\n\",\n       \"8099  9534                    Algerciras Port          Algerciras   \\n\",\n       \"8100  9535             Ganges Water Aerodrome              Ganges   \\n\",\n       \"8101  9536     Pender Harbour Water Aerodrome      Pender Harbour   \\n\",\n       \"8102  9537    Mansons Landing Water Aerodrome     Mansons Landing   \\n\",\n       \"8103  9538               Port McNeill Airport        Port McNeill   \\n\",\n       \"8104  9539       Sullivan Bay Water Aerodrome        Sullivan Bay   \\n\",\n       \"8105  9540               Deer Harbor Seaplane         Deer Harbor   \\n\",\n       \"8106  9541  San Diego Old Town Transit Center           San Diego   \\n\",\n       \"\\n\",\n       \"                    3    4     5          6           7     8     9  10  \\\\\\n\",\n       \"0     Papua New Guinea  GKA  AYGA  -6.081689  145.391881  5282  10.0  U   \\n\",\n       \"1     Papua New Guinea  MAG  AYMD  -5.207083  145.788700    20  10.0  U   \\n\",\n       \"2     Papua New Guinea  HGU  AYMH  -5.826789  144.295861  5388  10.0  U   \\n\",\n       \"3     Papua New Guinea  LAE  AYNZ  -6.569828  146.726242   239  10.0  U   \\n\",\n       \"4     Papua New Guinea  POM  AYPY  -9.443383  147.220050   146  10.0  U   \\n\",\n       \"5     Papua New Guinea  WWK  AYWK  -3.583828  143.669186    19  10.0  U   \\n\",\n       \"6            Greenland  UAK  BGBW  61.160517  -45.425978   112  -3.0  E   \\n\",\n       \"7            Greenland  GOH  BGGH  64.190922  -51.678064   283  -3.0  E   \\n\",\n       \"8            Greenland  SFJ  BGSF  67.016969  -50.689325   165  -3.0  E   \\n\",\n       \"9            Greenland  THU  BGTL  76.531203  -68.703161   251  -4.0  E   \\n\",\n       \"10             Iceland  AEY  BIAR  65.659994  -18.072703     6   0.0  N   \\n\",\n       \"11             Iceland  EGS  BIEG  65.283333  -14.401389    76   0.0  N   \\n\",\n       \"12             Iceland  HFN  BIHN  64.295556  -15.227222    24   0.0  N   \\n\",\n       \"13             Iceland  HZK  BIHU  65.952328  -17.425978    48   0.0  N   \\n\",\n       \"14             Iceland  IFJ  BIIS  66.058056  -23.135278     8   0.0  N   \\n\",\n       \"15             Iceland  KEF  BIKF  63.985000  -22.605556   171   0.0  N   \\n\",\n       \"16             Iceland  PFJ  BIPA  65.555833  -23.965000    11   0.0  N   \\n\",\n       \"17             Iceland  RKV  BIRK  64.130000  -21.940556    48   0.0  N   \\n\",\n       \"18             Iceland  SIJ  BISI  66.133333  -18.916667    10   0.0  N   \\n\",\n       \"19             Iceland  VEY  BIVM  63.424303  -20.278875   326   0.0  N   \\n\",\n       \"20              Canada  YAM  CYAM  46.485001  -84.509445   630  -5.0  A   \\n\",\n       \"21              Canada  YAV  CYAV  50.056389  -97.032500   760  -6.0  A   \\n\",\n       \"22              Canada  YAW  CYAW  44.639721  -63.499444   167  -4.0  A   \\n\",\n       \"23              Canada  YAY  CYAY  51.391944  -56.083056   108  -3.5  A   \\n\",\n       \"24              Canada  YAZ  CYAZ  49.082222 -125.772500    80  -8.0  A   \\n\",\n       \"25              Canada  YBB  CYBB  68.534444  -89.808056    56  -7.0  A   \\n\",\n       \"26              Canada  YBC  CYBC  49.132500  -68.204444    71  -5.0  A   \\n\",\n       \"27              Canada  YBG  CYBG  48.330555  -70.996391   522  -5.0  A   \\n\",\n       \"28              Canada  YBK  CYBK  64.298889  -96.077778    59  -6.0  A   \\n\",\n       \"29              Canada  YBL  CYBL  49.950832 -125.270833   346  -8.0  A   \\n\",\n       \"...                ...  ...   ...        ...         ...   ...   ... ..   \\n\",\n       \"8077     United States  NaN  PSEA  47.609178 -122.350605     0  -8.0  A   \\n\",\n       \"8078     United States  NaN  WHIT  60.776566 -148.683367     0  -9.0  A   \\n\",\n       \"8079     United States  NaN  VLDZ  61.123976 -146.365309     0  -9.0  A   \\n\",\n       \"8080           Reunion  NaN  STLS -21.289604   55.407269   103   4.0  E   \\n\",\n       \"8081           Reunion  NaN  LRIV -21.272574   55.437706   190   4.0  E   \\n\",\n       \"8082           Reunion  NaN  CILS -21.135518   55.472087  4000   4.0  E   \\n\",\n       \"8083           Reunion  NaN  HLBG -21.064020   55.518453  3000   4.0  E   \\n\",\n       \"8084           Reunion  NaN  SLZI -21.027485   55.538955  3000   4.0  E   \\n\",\n       \"8085           Reunion  NaN  ANDR -20.963272   55.652508   100   4.0  E   \\n\",\n       \"8086           Reunion  NaN  SDNS -20.877683   55.457393     0   4.0  E   \\n\",\n       \"8087           Reunion  NaN  STPR -21.334240   55.471331     0   4.0  E   \\n\",\n       \"8088        Seychelles  NaN  PLIN  -4.347119   55.765688     0   4.0  N   \\n\",\n       \"8089        Seychelles  NaN  LADG  -4.347969   55.829069     0   4.0  N   \\n\",\n       \"8090     United States  NaN  BAIN  47.622237 -122.509362     0  -8.0  A   \\n\",\n       \"8091          Cambodia  NaN  PNMP  11.561716  104.914276     0   7.0  N   \\n\",\n       \"8092          Cambodia  NaN  SMRP  13.361002  103.859543     0   7.0  N   \\n\",\n       \"8093          Cambodia  NaN  SNKV  10.607220  103.524886     0   7.0  N   \\n\",\n       \"8094          Cambodia  NaN  KMPT  10.614922  104.177724     0   7.0  N   \\n\",\n       \"8095          Cambodia  NaN  KEPC  10.480174  104.294228     0   7.0  N   \\n\",\n       \"8096            Taiwan  NaN  TPEI  25.046176  121.517532     0   8.0  N   \\n\",\n       \"8097         Australia  PXH  YPMH -29.716667  135.521667   734   9.5  O   \\n\",\n       \"8098     United States  CWT    \\\\N  34.256944 -118.598889   978  -8.0  A   \\n\",\n       \"8099             Spain  NaN    \\\\N  36.136000   -5.435000     0   1.0  E   \\n\",\n       \"8100            Canada  YGG    \\\\N  48.850000 -123.500000     0  -8.0  A   \\n\",\n       \"8101            Canada  YPT    \\\\N  49.616667 -124.016667     0  -8.0  A   \\n\",\n       \"8102            Canada  YMU    \\\\N  50.066667 -124.983333     0  -8.0  A   \\n\",\n       \"8103            Canada  YMP    \\\\N  50.575556 -127.028611   225  -8.0  A   \\n\",\n       \"8104            Canada  YTG    \\\\N  50.883333 -126.833333     0  -8.0  A   \\n\",\n       \"8105     United States  DHB    \\\\N  48.618397 -123.005960     0  -8.0  A   \\n\",\n       \"8106     United States  OLT    \\\\N  32.755200 -117.199500     0  -8.0  A   \\n\",\n       \"\\n\",\n       \"                        11  \\n\",\n       \"0     Pacific/Port_Moresby  \\n\",\n       \"1     Pacific/Port_Moresby  \\n\",\n       \"2     Pacific/Port_Moresby  \\n\",\n       \"3     Pacific/Port_Moresby  \\n\",\n       \"4     Pacific/Port_Moresby  \\n\",\n       \"5     Pacific/Port_Moresby  \\n\",\n       \"6          America/Godthab  \\n\",\n       \"7          America/Godthab  \\n\",\n       \"8          America/Godthab  \\n\",\n       \"9            America/Thule  \\n\",\n       \"10      Atlantic/Reykjavik  \\n\",\n       \"11      Atlantic/Reykjavik  \\n\",\n       \"12      Atlantic/Reykjavik  \\n\",\n       \"13      Atlantic/Reykjavik  \\n\",\n       \"14      Atlantic/Reykjavik  \\n\",\n       \"15      Atlantic/Reykjavik  \\n\",\n       \"16      Atlantic/Reykjavik  \\n\",\n       \"17      Atlantic/Reykjavik  \\n\",\n       \"18      Atlantic/Reykjavik  \\n\",\n       \"19      Atlantic/Reykjavik  \\n\",\n       \"20         America/Toronto  \\n\",\n       \"21        America/Winnipeg  \\n\",\n       \"22         America/Halifax  \\n\",\n       \"23        America/St_Johns  \\n\",\n       \"24       America/Vancouver  \\n\",\n       \"25        America/Edmonton  \\n\",\n       \"26         America/Toronto  \\n\",\n       \"27         America/Toronto  \\n\",\n       \"28        America/Winnipeg  \\n\",\n       \"29       America/Vancouver  \\n\",\n       \"...                    ...  \\n\",\n       \"8077   America/Los_Angeles  \\n\",\n       \"8078     America/Anchorage  \\n\",\n       \"8079     America/Anchorage  \\n\",\n       \"8080        Indian/Reunion  \\n\",\n       \"8081        Indian/Reunion  \\n\",\n       \"8082        Indian/Reunion  \\n\",\n       \"8083        Indian/Reunion  \\n\",\n       \"8084        Indian/Reunion  \\n\",\n       \"8085        Indian/Reunion  \\n\",\n       \"8086        Indian/Reunion  \\n\",\n       \"8087        Indian/Reunion  \\n\",\n       \"8088           Indian/Mahe  \\n\",\n       \"8089           Indian/Mahe  \\n\",\n       \"8090   America/Los_Angeles  \\n\",\n       \"8091       Asia/Phnom_Penh  \\n\",\n       \"8092       Asia/Phnom_Penh  \\n\",\n       \"8093       Asia/Phnom_Penh  \\n\",\n       \"8094       Asia/Phnom_Penh  \\n\",\n       \"8095       Asia/Phnom_Penh  \\n\",\n       \"8096           Asia/Taipei  \\n\",\n       \"8097    Australia/Adelaide  \\n\",\n       \"8098   America/Los_Angeles  \\n\",\n       \"8099         Europe/Madrid  \\n\",\n       \"8100     America/Vancouver  \\n\",\n       \"8101     America/Vancouver  \\n\",\n       \"8102     America/Vancouver  \\n\",\n       \"8103     America/Vancouver  \\n\",\n       \"8104     America/Vancouver  \\n\",\n       \"8105   America/Los_Angeles  \\n\",\n       \"8106   America/Los_Angeles  \\n\",\n       \"\\n\",\n       \"[8107 rows x 12 columns]\"\n      ]\n     },\n     \"execution_count\": 68,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"df=pd.read_csv('data/airports.csv', header=None)\\n\",\n    \"df\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Dane do kolejnych zadań\\n\",\n    \"Wczytanie dancyh:\\n\",\n    \"\\n\",\n    \"  * Powinieneś być w stanie zobaczyć wszystkie kolumny i 10 wierszy danych:\\n\",\n    \"  * survival – Survival (0 = No; 1 = Yes)\\n\",\n    \"  * pclass – Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd)\\n\",\n    \"  * sex – Sex\\n\",\n    \"  * age – Age\\n\",\n    \"  * sibsp – Number of Siblings/Spouses Aboard\\n\",\n    \"  * parch – Number of Parents/Children Aboard\\n\",\n    \"  * ticket – Ticket Number\\n\",\n    \"  * fare – Passenger Fare\\n\",\n    \"  * cabin – Cabin\\n\",\n    \"  * embarked – Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 69,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"(891, 12)\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>PassengerId</th>\\n\",\n       \"      <th>Survived</th>\\n\",\n       \"      <th>Pclass</th>\\n\",\n       \"      <th>Name</th>\\n\",\n       \"      <th>Sex</th>\\n\",\n       \"      <th>Age</th>\\n\",\n       \"      <th>SibSp</th>\\n\",\n       \"      <th>Parch</th>\\n\",\n       \"      <th>Ticket</th>\\n\",\n       \"      <th>Fare</th>\\n\",\n       \"      <th>Cabin</th>\\n\",\n       \"      <th>Embarked</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Braund, Mr. Owen Harris</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>22.0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>A/5 21171</td>\\n\",\n       \"      <td>7.2500</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>38.0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>PC 17599</td>\\n\",\n       \"      <td>71.2833</td>\\n\",\n       \"      <td>C85</td>\\n\",\n       \"      <td>C</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Heikkinen, Miss. Laina</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>26.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>STON/O2. 3101282</td>\\n\",\n       \"      <td>7.9250</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>35.0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>113803</td>\\n\",\n       \"      <td>53.1000</td>\\n\",\n       \"      <td>C123</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>5</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Allen, Mr. William Henry</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>35.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>373450</td>\\n\",\n       \"      <td>8.0500</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   PassengerId  Survived  Pclass  \\\\\\n\",\n       \"0            1         0       3   \\n\",\n       \"1            2         1       1   \\n\",\n       \"2            3         1       3   \\n\",\n       \"3            4         1       1   \\n\",\n       \"4            5         0       3   \\n\",\n       \"\\n\",\n       \"                                                Name     Sex   Age  SibSp  \\\\\\n\",\n       \"0                            Braund, Mr. Owen Harris    male  22.0      1   \\n\",\n       \"1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \\n\",\n       \"2                             Heikkinen, Miss. Laina  female  26.0      0   \\n\",\n       \"3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \\n\",\n       \"4                           Allen, Mr. William Henry    male  35.0      0   \\n\",\n       \"\\n\",\n       \"   Parch            Ticket     Fare Cabin Embarked  \\n\",\n       \"0      0         A/5 21171   7.2500   NaN        S  \\n\",\n       \"1      0          PC 17599  71.2833   C85        C  \\n\",\n       \"2      0  STON/O2. 3101282   7.9250   NaN        S  \\n\",\n       \"3      0            113803  53.1000  C123        S  \\n\",\n       \"4      0            373450   8.0500   NaN        S  \"\n      ]\n     },\n     \"execution_count\": 69,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"df = pd.read_csv('http://stamfordresearch.com/wp-content/uploads/2016/08/Titanic.csv') \\n\",\n    \"print(df.shape)\\n\",\n    \"df.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 70,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\\n\",\n       \"       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\\n\",\n       \"      dtype='object')\"\n      ]\n     },\n     \"execution_count\": 70,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"df.columns\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie 6\\n\",\n    \"\\n\",\n    \"Usuń kolumny: \\\"PassengerId\\\", \\\"Name\\\" i \\\"Ticket\\\".\\n\",\n    \"\\n\",\n    \"Powody:\\n\",\n    \"\\n\",\n    \"  * PassengerId - jest to unikalny numer\\n\",\n    \"  * Imię - nie ma wpływu na predykcje\\n\",\n    \"  * Bilet - wygląda niechlujnie i jest losowe\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Następnie musimy spojrzeć na kolumnę Cabin.\\n\",\n    \"\\n\",\n    \"Następnie musimy spojrzeć na kolumnę Cabin. Będziemy leniwi i zmienimy wartości na Tak lub Nie (w zależności czy posiadał kabinę). Lepszym sposobem na to może być podzielenie opisu tak aby uzyskać pierwszą literę, ponieważ zwykle oznacza ona, na którym pokładzie znajdowała się kabina. Może to być użyteczne przy predykcji (ale my na razie jej nie wykonujemy).\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 71,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>PassengerId</th>\\n\",\n       \"      <th>Survived</th>\\n\",\n       \"      <th>Pclass</th>\\n\",\n       \"      <th>Name</th>\\n\",\n       \"      <th>Sex</th>\\n\",\n       \"      <th>Age</th>\\n\",\n       \"      <th>SibSp</th>\\n\",\n       \"      <th>Parch</th>\\n\",\n       \"      <th>Ticket</th>\\n\",\n       \"      <th>Fare</th>\\n\",\n       \"      <th>Cabin</th>\\n\",\n       \"      <th>Embarked</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Braund, Mr. Owen Harris</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>22.0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>A/5 21171</td>\\n\",\n       \"      <td>7.2500</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Heikkinen, Miss. Laina</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>26.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>STON/O2. 3101282</td>\\n\",\n       \"      <td>7.9250</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>5</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Allen, Mr. William Henry</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>35.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>373450</td>\\n\",\n       \"      <td>8.0500</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>5</th>\\n\",\n       \"      <td>6</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Moran, Mr. James</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>330877</td>\\n\",\n       \"      <td>8.4583</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>Q</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>7</th>\\n\",\n       \"      <td>8</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Palsson, Master. Gosta Leonard</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>2.0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>349909</td>\\n\",\n       \"      <td>21.0750</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8</th>\\n\",\n       \"      <td>9</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>27.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>347742</td>\\n\",\n       \"      <td>11.1333</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>9</th>\\n\",\n       \"      <td>10</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>14.0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>237736</td>\\n\",\n       \"      <td>30.0708</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>C</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>12</th>\\n\",\n       \"      <td>13</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Saundercock, Mr. William Henry</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>20.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>A/5. 2151</td>\\n\",\n       \"      <td>8.0500</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>13</th>\\n\",\n       \"      <td>14</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Andersson, Mr. Anders Johan</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>39.0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"      <td>347082</td>\\n\",\n       \"      <td>31.2750</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>14</th>\\n\",\n       \"      <td>15</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Vestrom, Miss. Hulda Amanda Adolfina</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>14.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>350406</td>\\n\",\n       \"      <td>7.8542</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>15</th>\\n\",\n       \"      <td>16</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>Hewlett, Mrs. (Mary D Kingcome)</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>55.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>248706</td>\\n\",\n       \"      <td>16.0000</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>16</th>\\n\",\n       \"      <td>17</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Rice, Master. Eugene</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>2.0</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>382652</td>\\n\",\n       \"      <td>29.1250</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>Q</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>17</th>\\n\",\n       \"      <td>18</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>Williams, Mr. Charles Eugene</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>244373</td>\\n\",\n       \"      <td>13.0000</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>18</th>\\n\",\n       \"      <td>19</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Vander Planke, Mrs. Julius (Emelia Maria Vande...</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>31.0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>345763</td>\\n\",\n       \"      <td>18.0000</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>19</th>\\n\",\n       \"      <td>20</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Masselmani, Mrs. Fatima</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>2649</td>\\n\",\n       \"      <td>7.2250</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>C</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>20</th>\\n\",\n       \"      <td>21</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>Fynney, Mr. Joseph J</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>35.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>239865</td>\\n\",\n       \"      <td>26.0000</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>22</th>\\n\",\n       \"      <td>23</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>McGowan, Miss. Anna \\\"Annie\\\"</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>15.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>330923</td>\\n\",\n       \"      <td>8.0292</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>Q</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>24</th>\\n\",\n       \"      <td>25</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Palsson, Miss. Torborg Danira</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>8.0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>349909</td>\\n\",\n       \"      <td>21.0750</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>25</th>\\n\",\n       \"      <td>26</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Asplund, Mrs. Carl Oscar (Selma Augusta Emilia...</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>38.0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"      <td>347077</td>\\n\",\n       \"      <td>31.3875</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>26</th>\\n\",\n       \"      <td>27</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Emir, Mr. Farred Chehab</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>2631</td>\\n\",\n       \"      <td>7.2250</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>C</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>28</th>\\n\",\n       \"      <td>29</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>O'Dwyer, Miss. Ellen \\\"Nellie\\\"</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>330959</td>\\n\",\n       \"      <td>7.8792</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>Q</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>29</th>\\n\",\n       \"      <td>30</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Todoroff, Mr. Lalio</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>349216</td>\\n\",\n       \"      <td>7.8958</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>30</th>\\n\",\n       \"      <td>31</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>Uruchurtu, Don. Manuel E</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>40.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>PC 17601</td>\\n\",\n       \"      <td>27.7208</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>C</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>32</th>\\n\",\n       \"      <td>33</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Glynn, Miss. Mary Agatha</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>335677</td>\\n\",\n       \"      <td>7.7500</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>Q</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>33</th>\\n\",\n       \"      <td>34</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>Wheadon, Mr. Edward H</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>66.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>C.A. 24579</td>\\n\",\n       \"      <td>10.5000</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>34</th>\\n\",\n       \"      <td>35</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>Meyer, Mr. Edgar Joseph</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>28.0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>PC 17604</td>\\n\",\n       \"      <td>82.1708</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>C</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>35</th>\\n\",\n       \"      <td>36</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>Holverson, Mr. Alexander Oskar</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>42.0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>113789</td>\\n\",\n       \"      <td>52.0000</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>36</th>\\n\",\n       \"      <td>37</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Mamee, Mr. Hanna</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>2677</td>\\n\",\n       \"      <td>7.2292</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>C</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>37</th>\\n\",\n       \"      <td>38</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Cann, Mr. Ernest Charles</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>21.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>A./5. 2152</td>\\n\",\n       \"      <td>8.0500</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>38</th>\\n\",\n       \"      <td>39</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Vander Planke, Miss. Augusta Maria</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>18.0</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>345764</td>\\n\",\n       \"      <td>18.0000</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>852</th>\\n\",\n       \"      <td>853</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Boulos, Miss. Nourelain</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>9.0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>2678</td>\\n\",\n       \"      <td>15.2458</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>C</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>854</th>\\n\",\n       \"      <td>855</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>Carter, Mrs. Ernest Courtenay (Lilian Hughes)</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>44.0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>244252</td>\\n\",\n       \"      <td>26.0000</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>855</th>\\n\",\n       \"      <td>856</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Aks, Mrs. Sam (Leah Rosen)</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>18.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>392091</td>\\n\",\n       \"      <td>9.3500</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>856</th>\\n\",\n       \"      <td>857</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>Wick, Mrs. George Dennick (Mary Hitchcock)</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>45.0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>36928</td>\\n\",\n       \"      <td>164.8667</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>858</th>\\n\",\n       \"      <td>859</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Baclini, Mrs. Solomon (Latifa Qurban)</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>24.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>2666</td>\\n\",\n       \"      <td>19.2583</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>C</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>859</th>\\n\",\n       \"      <td>860</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Razi, Mr. Raihed</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>2629</td>\\n\",\n       \"      <td>7.2292</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>C</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>860</th>\\n\",\n       \"      <td>861</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Hansen, Mr. Claus Peter</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>41.0</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>350026</td>\\n\",\n       \"      <td>14.1083</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>861</th>\\n\",\n       \"      <td>862</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>Giles, Mr. Frederick Edward</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>21.0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>28134</td>\\n\",\n       \"      <td>11.5000</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>863</th>\\n\",\n       \"      <td>864</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Sage, Miss. Dorothy Edith \\\"Dolly\\\"</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>8</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>CA. 2343</td>\\n\",\n       \"      <td>69.5500</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>864</th>\\n\",\n       \"      <td>865</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>Gill, Mr. John William</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>24.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>233866</td>\\n\",\n       \"      <td>13.0000</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>865</th>\\n\",\n       \"      <td>866</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>Bystrom, Mrs. (Karolina)</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>42.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>236852</td>\\n\",\n       \"      <td>13.0000</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>866</th>\\n\",\n       \"      <td>867</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>Duran y More, Miss. Asuncion</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>27.0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>SC/PARIS 2149</td>\\n\",\n       \"      <td>13.8583</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>C</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>868</th>\\n\",\n       \"      <td>869</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>van Melkebeke, Mr. Philemon</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>345777</td>\\n\",\n       \"      <td>9.5000</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>869</th>\\n\",\n       \"      <td>870</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Johnson, Master. Harold Theodor</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>4.0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>347742</td>\\n\",\n       \"      <td>11.1333</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>870</th>\\n\",\n       \"      <td>871</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Balkic, Mr. Cerin</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>26.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>349248</td>\\n\",\n       \"      <td>7.8958</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>873</th>\\n\",\n       \"      <td>874</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Vander Cruyssen, Mr. Victor</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>47.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>345765</td>\\n\",\n       \"      <td>9.0000</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>874</th>\\n\",\n       \"      <td>875</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>Abelson, Mrs. Samuel (Hannah Wizosky)</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>28.0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>P/PP 3381</td>\\n\",\n       \"      <td>24.0000</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>C</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>875</th>\\n\",\n       \"      <td>876</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Najib, Miss. Adele Kiamie \\\"Jane\\\"</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>15.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>2667</td>\\n\",\n       \"      <td>7.2250</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>C</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>876</th>\\n\",\n       \"      <td>877</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Gustafsson, Mr. Alfred Ossian</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>20.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>7534</td>\\n\",\n       \"      <td>9.8458</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>877</th>\\n\",\n       \"      <td>878</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Petroff, Mr. Nedelio</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>19.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>349212</td>\\n\",\n       \"      <td>7.8958</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>878</th>\\n\",\n       \"      <td>879</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Laleff, Mr. Kristo</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>349217</td>\\n\",\n       \"      <td>7.8958</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>880</th>\\n\",\n       \"      <td>881</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>Shelley, Mrs. William (Imanita Parrish Hall)</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>25.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>230433</td>\\n\",\n       \"      <td>26.0000</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>881</th>\\n\",\n       \"      <td>882</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Markun, Mr. Johann</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>33.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>349257</td>\\n\",\n       \"      <td>7.8958</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>882</th>\\n\",\n       \"      <td>883</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Dahlberg, Miss. Gerda Ulrika</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>22.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>7552</td>\\n\",\n       \"      <td>10.5167</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>883</th>\\n\",\n       \"      <td>884</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>Banfield, Mr. Frederick James</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>28.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>C.A./SOTON 34068</td>\\n\",\n       \"      <td>10.5000</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>884</th>\\n\",\n       \"      <td>885</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Sutehall, Mr. Henry Jr</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>25.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>SOTON/OQ 392076</td>\\n\",\n       \"      <td>7.0500</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>885</th>\\n\",\n       \"      <td>886</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Rice, Mrs. William (Margaret Norton)</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>39.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"      <td>382652</td>\\n\",\n       \"      <td>29.1250</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>Q</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>886</th>\\n\",\n       \"      <td>887</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>Montvila, Rev. Juozas</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>27.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>211536</td>\\n\",\n       \"      <td>13.0000</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>888</th>\\n\",\n       \"      <td>889</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Johnston, Miss. Catherine Helen \\\"Carrie\\\"</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>W./C. 6607</td>\\n\",\n       \"      <td>23.4500</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>S</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>890</th>\\n\",\n       \"      <td>891</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Dooley, Mr. Patrick</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>32.0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>370376</td>\\n\",\n       \"      <td>7.7500</td>\\n\",\n       \"      <td>NaN</td>\\n\",\n       \"      <td>Q</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"<p>687 rows × 12 columns</p>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"     PassengerId  Survived  Pclass  \\\\\\n\",\n       \"0              1         0       3   \\n\",\n       \"2              3         1       3   \\n\",\n       \"4              5         0       3   \\n\",\n       \"5              6         0       3   \\n\",\n       \"7              8         0       3   \\n\",\n       \"8              9         1       3   \\n\",\n       \"9             10         1       2   \\n\",\n       \"12            13         0       3   \\n\",\n       \"13            14         0       3   \\n\",\n       \"14            15         0       3   \\n\",\n       \"15            16         1       2   \\n\",\n       \"16            17         0       3   \\n\",\n       \"17            18         1       2   \\n\",\n       \"18            19         0       3   \\n\",\n       \"19            20         1       3   \\n\",\n       \"20            21         0       2   \\n\",\n       \"22            23         1       3   \\n\",\n       \"24            25         0       3   \\n\",\n       \"25            26         1       3   \\n\",\n       \"26            27         0       3   \\n\",\n       \"28            29         1       3   \\n\",\n       \"29            30         0       3   \\n\",\n       \"30            31         0       1   \\n\",\n       \"32            33         1       3   \\n\",\n       \"33            34         0       2   \\n\",\n       \"34            35         0       1   \\n\",\n       \"35            36         0       1   \\n\",\n       \"36            37         1       3   \\n\",\n       \"37            38         0       3   \\n\",\n       \"38            39         0       3   \\n\",\n       \"..           ...       ...     ...   \\n\",\n       \"852          853         0       3   \\n\",\n       \"854          855         0       2   \\n\",\n       \"855          856         1       3   \\n\",\n       \"856          857         1       1   \\n\",\n       \"858          859         1       3   \\n\",\n       \"859          860         0       3   \\n\",\n       \"860          861         0       3   \\n\",\n       \"861          862         0       2   \\n\",\n       \"863          864         0       3   \\n\",\n       \"864          865         0       2   \\n\",\n       \"865          866         1       2   \\n\",\n       \"866          867         1       2   \\n\",\n       \"868          869         0       3   \\n\",\n       \"869          870         1       3   \\n\",\n       \"870          871         0       3   \\n\",\n       \"873          874         0       3   \\n\",\n       \"874          875         1       2   \\n\",\n       \"875          876         1       3   \\n\",\n       \"876          877         0       3   \\n\",\n       \"877          878         0       3   \\n\",\n       \"878          879         0       3   \\n\",\n       \"880          881         1       2   \\n\",\n       \"881          882         0       3   \\n\",\n       \"882          883         0       3   \\n\",\n       \"883          884         0       2   \\n\",\n       \"884          885         0       3   \\n\",\n       \"885          886         0       3   \\n\",\n       \"886          887         0       2   \\n\",\n       \"888          889         0       3   \\n\",\n       \"890          891         0       3   \\n\",\n       \"\\n\",\n       \"                                                  Name     Sex   Age  SibSp  \\\\\\n\",\n       \"0                              Braund, Mr. Owen Harris    male  22.0      1   \\n\",\n       \"2                               Heikkinen, Miss. Laina  female  26.0      0   \\n\",\n       \"4                             Allen, Mr. William Henry    male  35.0      0   \\n\",\n       \"5                                     Moran, Mr. James    male   NaN      0   \\n\",\n       \"7                       Palsson, Master. Gosta Leonard    male   2.0      3   \\n\",\n       \"8    Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)  female  27.0      0   \\n\",\n       \"9                  Nasser, Mrs. Nicholas (Adele Achem)  female  14.0      1   \\n\",\n       \"12                      Saundercock, Mr. William Henry    male  20.0      0   \\n\",\n       \"13                         Andersson, Mr. Anders Johan    male  39.0      1   \\n\",\n       \"14                Vestrom, Miss. Hulda Amanda Adolfina  female  14.0      0   \\n\",\n       \"15                    Hewlett, Mrs. (Mary D Kingcome)   female  55.0      0   \\n\",\n       \"16                                Rice, Master. Eugene    male   2.0      4   \\n\",\n       \"17                        Williams, Mr. Charles Eugene    male   NaN      0   \\n\",\n       \"18   Vander Planke, Mrs. Julius (Emelia Maria Vande...  female  31.0      1   \\n\",\n       \"19                             Masselmani, Mrs. Fatima  female   NaN      0   \\n\",\n       \"20                                Fynney, Mr. Joseph J    male  35.0      0   \\n\",\n       \"22                         McGowan, Miss. Anna \\\"Annie\\\"  female  15.0      0   \\n\",\n       \"24                       Palsson, Miss. Torborg Danira  female   8.0      3   \\n\",\n       \"25   Asplund, Mrs. Carl Oscar (Selma Augusta Emilia...  female  38.0      1   \\n\",\n       \"26                             Emir, Mr. Farred Chehab    male   NaN      0   \\n\",\n       \"28                       O'Dwyer, Miss. Ellen \\\"Nellie\\\"  female   NaN      0   \\n\",\n       \"29                                 Todoroff, Mr. Lalio    male   NaN      0   \\n\",\n       \"30                            Uruchurtu, Don. Manuel E    male  40.0      0   \\n\",\n       \"32                            Glynn, Miss. Mary Agatha  female   NaN      0   \\n\",\n       \"33                               Wheadon, Mr. Edward H    male  66.0      0   \\n\",\n       \"34                             Meyer, Mr. Edgar Joseph    male  28.0      1   \\n\",\n       \"35                      Holverson, Mr. Alexander Oskar    male  42.0      1   \\n\",\n       \"36                                    Mamee, Mr. Hanna    male   NaN      0   \\n\",\n       \"37                            Cann, Mr. Ernest Charles    male  21.0      0   \\n\",\n       \"38                  Vander Planke, Miss. Augusta Maria  female  18.0      2   \\n\",\n       \"..                                                 ...     ...   ...    ...   \\n\",\n       \"852                            Boulos, Miss. Nourelain  female   9.0      1   \\n\",\n       \"854      Carter, Mrs. Ernest Courtenay (Lilian Hughes)  female  44.0      1   \\n\",\n       \"855                         Aks, Mrs. Sam (Leah Rosen)  female  18.0      0   \\n\",\n       \"856         Wick, Mrs. George Dennick (Mary Hitchcock)  female  45.0      1   \\n\",\n       \"858              Baclini, Mrs. Solomon (Latifa Qurban)  female  24.0      0   \\n\",\n       \"859                                   Razi, Mr. Raihed    male   NaN      0   \\n\",\n       \"860                            Hansen, Mr. Claus Peter    male  41.0      2   \\n\",\n       \"861                        Giles, Mr. Frederick Edward    male  21.0      1   \\n\",\n       \"863                  Sage, Miss. Dorothy Edith \\\"Dolly\\\"  female   NaN      8   \\n\",\n       \"864                             Gill, Mr. John William    male  24.0      0   \\n\",\n       \"865                           Bystrom, Mrs. (Karolina)  female  42.0      0   \\n\",\n       \"866                       Duran y More, Miss. Asuncion  female  27.0      1   \\n\",\n       \"868                        van Melkebeke, Mr. Philemon    male   NaN      0   \\n\",\n       \"869                    Johnson, Master. Harold Theodor    male   4.0      1   \\n\",\n       \"870                                  Balkic, Mr. Cerin    male  26.0      0   \\n\",\n       \"873                        Vander Cruyssen, Mr. Victor    male  47.0      0   \\n\",\n       \"874              Abelson, Mrs. Samuel (Hannah Wizosky)  female  28.0      1   \\n\",\n       \"875                   Najib, Miss. Adele Kiamie \\\"Jane\\\"  female  15.0      0   \\n\",\n       \"876                      Gustafsson, Mr. Alfred Ossian    male  20.0      0   \\n\",\n       \"877                               Petroff, Mr. Nedelio    male  19.0      0   \\n\",\n       \"878                                 Laleff, Mr. Kristo    male   NaN      0   \\n\",\n       \"880       Shelley, Mrs. William (Imanita Parrish Hall)  female  25.0      0   \\n\",\n       \"881                                 Markun, Mr. Johann    male  33.0      0   \\n\",\n       \"882                       Dahlberg, Miss. Gerda Ulrika  female  22.0      0   \\n\",\n       \"883                      Banfield, Mr. Frederick James    male  28.0      0   \\n\",\n       \"884                             Sutehall, Mr. Henry Jr    male  25.0      0   \\n\",\n       \"885               Rice, Mrs. William (Margaret Norton)  female  39.0      0   \\n\",\n       \"886                              Montvila, Rev. Juozas    male  27.0      0   \\n\",\n       \"888           Johnston, Miss. Catherine Helen \\\"Carrie\\\"  female   NaN      1   \\n\",\n       \"890                                Dooley, Mr. Patrick    male  32.0      0   \\n\",\n       \"\\n\",\n       \"     Parch            Ticket      Fare Cabin Embarked  \\n\",\n       \"0        0         A/5 21171    7.2500   NaN        S  \\n\",\n       \"2        0  STON/O2. 3101282    7.9250   NaN        S  \\n\",\n       \"4        0            373450    8.0500   NaN        S  \\n\",\n       \"5        0            330877    8.4583   NaN        Q  \\n\",\n       \"7        1            349909   21.0750   NaN        S  \\n\",\n       \"8        2            347742   11.1333   NaN        S  \\n\",\n       \"9        0            237736   30.0708   NaN        C  \\n\",\n       \"12       0         A/5. 2151    8.0500   NaN        S  \\n\",\n       \"13       5            347082   31.2750   NaN        S  \\n\",\n       \"14       0            350406    7.8542   NaN        S  \\n\",\n       \"15       0            248706   16.0000   NaN        S  \\n\",\n       \"16       1            382652   29.1250   NaN        Q  \\n\",\n       \"17       0            244373   13.0000   NaN        S  \\n\",\n       \"18       0            345763   18.0000   NaN        S  \\n\",\n       \"19       0              2649    7.2250   NaN        C  \\n\",\n       \"20       0            239865   26.0000   NaN        S  \\n\",\n       \"22       0            330923    8.0292   NaN        Q  \\n\",\n       \"24       1            349909   21.0750   NaN        S  \\n\",\n       \"25       5            347077   31.3875   NaN        S  \\n\",\n       \"26       0              2631    7.2250   NaN        C  \\n\",\n       \"28       0            330959    7.8792   NaN        Q  \\n\",\n       \"29       0            349216    7.8958   NaN        S  \\n\",\n       \"30       0          PC 17601   27.7208   NaN        C  \\n\",\n       \"32       0            335677    7.7500   NaN        Q  \\n\",\n       \"33       0        C.A. 24579   10.5000   NaN        S  \\n\",\n       \"34       0          PC 17604   82.1708   NaN        C  \\n\",\n       \"35       0            113789   52.0000   NaN        S  \\n\",\n       \"36       0              2677    7.2292   NaN        C  \\n\",\n       \"37       0        A./5. 2152    8.0500   NaN        S  \\n\",\n       \"38       0            345764   18.0000   NaN        S  \\n\",\n       \"..     ...               ...       ...   ...      ...  \\n\",\n       \"852      1              2678   15.2458   NaN        C  \\n\",\n       \"854      0            244252   26.0000   NaN        S  \\n\",\n       \"855      1            392091    9.3500   NaN        S  \\n\",\n       \"856      1             36928  164.8667   NaN        S  \\n\",\n       \"858      3              2666   19.2583   NaN        C  \\n\",\n       \"859      0              2629    7.2292   NaN        C  \\n\",\n       \"860      0            350026   14.1083   NaN        S  \\n\",\n       \"861      0             28134   11.5000   NaN        S  \\n\",\n       \"863      2          CA. 2343   69.5500   NaN        S  \\n\",\n       \"864      0            233866   13.0000   NaN        S  \\n\",\n       \"865      0            236852   13.0000   NaN        S  \\n\",\n       \"866      0     SC/PARIS 2149   13.8583   NaN        C  \\n\",\n       \"868      0            345777    9.5000   NaN        S  \\n\",\n       \"869      1            347742   11.1333   NaN        S  \\n\",\n       \"870      0            349248    7.8958   NaN        S  \\n\",\n       \"873      0            345765    9.0000   NaN        S  \\n\",\n       \"874      0         P/PP 3381   24.0000   NaN        C  \\n\",\n       \"875      0              2667    7.2250   NaN        C  \\n\",\n       \"876      0              7534    9.8458   NaN        S  \\n\",\n       \"877      0            349212    7.8958   NaN        S  \\n\",\n       \"878      0            349217    7.8958   NaN        S  \\n\",\n       \"880      1            230433   26.0000   NaN        S  \\n\",\n       \"881      0            349257    7.8958   NaN        S  \\n\",\n       \"882      0              7552   10.5167   NaN        S  \\n\",\n       \"883      0  C.A./SOTON 34068   10.5000   NaN        S  \\n\",\n       \"884      0   SOTON/OQ 392076    7.0500   NaN        S  \\n\",\n       \"885      5            382652   29.1250   NaN        Q  \\n\",\n       \"886      0            211536   13.0000   NaN        S  \\n\",\n       \"888      2        W./C. 6607   23.4500   NaN        S  \\n\",\n       \"890      0            370376    7.7500   NaN        Q  \\n\",\n       \"\\n\",\n       \"[687 rows x 12 columns]\"\n      ]\n     },\n     \"execution_count\": 71,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"df.loc[df.Cabin.isnull()]\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie 7\\n\",\n    \"Utwórz nową kolumną o nazwie HasCabin, która zawiera 1 jeżeli ktoś miał swoją kabinę i 0 jeśli nie.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie 8\\n\",\n    \"Usuń brakujące wartości\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Matplotlib - rysowanie wykresów w Pythonie\\n\",\n    \"\\n\",\n    \"**Matplotlib** jest biblioteką do tworzenia wysokiej jakości wykresów dla języka Python i jego rozszerzenia numerycznego NumPy. Umożliwia prezentację danych w różnych formatach (np. PNG, PDF, XLS). Zapewnia kontrolę nad wyglądem, stylami i właściwościami wykresów, pracę w środowisku interaktywnym, jak i możliwość osadzania wyników w aplikacjach destkopowych czy webowych.\\n\",\n    \"\\n\",\n    \"Funkcje i narzędzia tej biblioteki są napisane w taki sposób aby jak najbardziej odzwierciedlały metody rysowania wykresów z języka MatLab, dzięki czemu użytkownicy Matlaba w łatwy sposób mogą przenieść się do języka Python.\\n\",\n    \"Niektóre zalety korzystania z Pythona, NumPy i matplotlib nad MatLabem:\\n\",\n    \"  \\n\",\n    \"  * nowoczesny język programowania w pełni funkcjonalny obiektowo, odpowiedni do tworzenia oprogramowania na dużą skalę,\\n\",\n    \"  * darmowy (open source),\\n\",\n    \"  * wsparcie SVG.\\n\",\n    \"\\n\",\n    \"Aby skorzystać z biblioteki matplotlib należy ją wcześniej zaimportować, np.:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 72,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import matplotlib.pyplot as plt\\n\",\n    \"# from matplotlib import pyplot as plt\\n\",\n    \"\\n\",\n    \"%matplotlib inline\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Pierwszy wykres\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 73,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x288 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.plot([1, 5, 2, 7, 4, 1]) # wartości funkcji\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 74,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x288 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.plot([1, 2, 4, 7], [-1, 3, -2, 10])\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Własności wykresów\\n\",\n    \"Za pomocą specjalnych poleceń można też zmieniać właściwości wykresów, takie jak np.: rodzaj linii, kolor, czy też symbole punktów.\\n\",\n    \"Rodzaje linii:\\n\",\n    \"  \\n\",\n    \"  * **\\\\-** - ciągła,\\n\",\n    \"  * **:** - punktowa,\\n\",\n    \"  * **-.** - kropka-kreska,\\n\",\n    \"  * **--** - kreskowana.\\n\",\n    \"\\n\",\n    \"Kolory:\\n\",\n    \"\\n\",\n    \"  * **y** - yellow,\\n\",\n    \"  * **m** - magenta,\\n\",\n    \"  * **c** - cyan,\\n\",\n    \"  * **r** - red,\\n\",\n    \"  * **g** - green,\\n\",\n    \"  * **b** - blue,\\n\",\n    \"  * **w** - white,\\n\",\n    \"  * **k** - black.\\n\",\n    \"\\n\",\n    \"Symbole:\\n\",\n    \"\\n\",\n    \"  * **.** - punkt,\\n\",\n    \"  * **o** - kółko,\\n\",\n    \"  * **x** - x,\\n\",\n    \"  * **\\\\+** - plus,\\n\",\n    \"  * ** \\\\* ** - gwiazdka,\\n\",\n    \"  * **s** - kwadraty,\\n\",\n    \"  * **d** - romb,\\n\",\n    \"  * **v** - trójkąt w dół,\\n\",\n    \"  * **^** - trójkąt w górę,\\n\",\n    \"  * **<** - trójkąt w lewo,\\n\",\n    \"  * **\\\\>** - trójkąt w prawo,\\n\",\n    \"  * **p** - pięciokąt,\\n\",\n    \"  * **h** - sześciokąt.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 75,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x288 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"import numpy as np\\n\",\n    \"\\n\",\n    \"x = np.arange(0., 5., 0.2)\\n\",\n    \"\\n\",\n    \"plt.plot(x, x, 'r--', x, x**2, 'bs', x, x**3, 'g^')\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 76,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x288 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"x = [1,2,3,4]\\n\",\n    \"y = [20, 21, 20.5, 20.8]\\n\",\n    \"\\n\",\n    \"plt.plot(x, y, linestyle=\\\"dashed\\\", marker=\\\"o\\\", color=\\\"green\\\")\\n\",\n    \"\\n\",\n    \"# ustawienie granic osi X, \\n\",\n    \"plt.xlim(0.5,4.5)\\n\",\n    \"plt.ylim(19.8,21.2)\\n\",\n    \"\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 77,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x288 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"x = np.linspace(0, 20, 1000)\\n\",\n    \"y1 = np.sin(x)\\n\",\n    \"y2 = np.cos(x)\\n\",\n    \"\\n\",\n    \"# rozmiar czcionki\\n\",\n    \"plt.rc(\\\"font\\\", size=10)\\n\",\n    \"\\n\",\n    \"# dodanie legendy\\n\",\n    \"plt.plot(x, y1, '-b', label=r'$\\\\sin(x)$')\\n\",\n    \"plt.plot(x, y2, '-r', label='cosine')\\n\",\n    \"plt.legend(loc='upper right') # pozycja legendy\\n\",\n    \"# plt.legend(loc='upper left', frameon=False)\\n\",\n    \"plt.ylim(-1.5, 2.0)\\n\",\n    \"\\n\",\n    \"plt.title(\\\"Dwa wykresy\\\", size=20)\\n\",\n    \"\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Więcej na temat wyszczególnienia obiektów na wykresie odsyłam do dokumntacji: [http://matplotlib.org/users/annotations_guide.html]\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#  Statystyka\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 78,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"inFile = 'http://ww2.amstat.org/publications/jse/datasets/babyboom.dat.txt'\\n\",\n    \"data = pd.read_csv(inFile, sep='[ ]+', header=None, engine='python',names= ['sex', 'Weight', 'Minutes'])\\n\",\n    \"df = data[['Minutes', 'sex', 'Weight']]\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"  * Narysujmy dane <tt>df.Weight.values</tt> jako szereg czasowy\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 79,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x288 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"x=df.Weight.values\\n\",\n    \"plt.scatter(np.arange(len(x)), x)\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \" Narysujmy histogram dla <tt>df.Weight.values</tt>\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 80,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x288 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.hist(x, bins=25)\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Narysujmy gęstość dla <tt> df.Weight.values</tt> (estymacja jądrowa):\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 81,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x288 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"import seaborn as sns\\n\",\n    \"sns.kdeplot(x)\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Narysujmy dystrybuantę empiryczną dla </tt> df.Weight.values<tt>\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 84,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x288 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"from scipy import stats\\n\",\n    \"plt.plot(stats.cumfreq(x,numbins=25)[0])\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Narysujmy wykres pudełkowy dla <tt>df.Weight.values</tt>\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 85,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x288 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.boxplot(x, sym='*')\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Narysujmy wykres skrzypcowy dla <tt>df.Weight.values</tt>\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 87,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x288 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"sns.violinplot(x)\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie\\n\",\n    \"Proszę podzielić próbkę na dwie grupy ze względu na płeć (kolumna ``sex'') i narysować dla nich:\\n\",\n    \"<ul>\\n\",\n    \"<li>wykres w kształcie szeregu czasowego</li>\\n\",\n    \"<li>histogramy</li>\\n\",\n    \"<li>estymacje gęstości</li>\\n\",\n    \"<li>dystrybuanty empiryczne</li>\\n\",\n    \"<li>wykresy pudełkowe</li>\\n\",\n    \"<li>wykresy skrzypcowe</li>\\n\",\n    \"</ul>\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 90,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x288 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 91,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x288 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 92,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x288 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 93,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"iVBORw0KGgoAAAANSUhEUgAAAXQAAAD4CAYAAAD8Zh1EAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+17YcXAAAgAElEQVR4nO3dd3hUVf7H8feBEGqooYkJoSNFWkBWLCgiWDGuDUWxrOiu2Ouqa1kX7G3Xig0FBUVBpRhERRBUMKEGQwm9JCQhlBRIMpnz+2PG/aELpM3MnfJ5PQ9PkskM93uZ8OFyvvecY6y1iIhI6KvhdAEiIuIbCnQRkTChQBcRCRMKdBGRMKFAFxEJE1GBPFhsbKxNSEgI5CFFREJeampqrrW2eXnPC2igJyQkkJKSEshDioiEPGPM1oo8T0MuIiJhQoEuIhImFOgiImFCgS4iEiYU6CIiYUKBLiISJhToIiJhQoEuIuJHeYUlPPblGg4cKvX7sQI6sUhEJFJYa5mWuoMn56STf8jFKR1jOatbS78eU4EuIuJjGdkFPDRjNUs255HYtgnjknrSpVWM34+rQBcR8ZFDpWW8Nj+D1xdspG6tmjx5cU8uT4yjRg0TkOMr0EVEfGBxRi4Pf57G5txCLup9HA+d143mMbUDWoMCXUSkGnILihk3O50Zy3eS0Kwek284iVM6xTpSS7mBboyJAz4AWgFuYIK19mVjzGPAjUCO96kPWmvn+KtQEZFg4nZbpqVuZ/yctRSVuLjtzI787YyO1KlV07GaKnKF7gLuttYuM8bEAKnGmHne771orX3Of+WJiASfDbvzeWhGGku35DGgXVPGJ/WgYwv/Nz3LU26gW2szgUzv5/nGmHSgjb8LExGpjE05BUz6eSuHSt1+Pc7BEhezV2dSv3YUz1xyIpf2Ox5jAtP0LE+lxtCNMQlAH2AJMAgYa4y5BkjBcxW/9wivGQOMAYiPj69muSIiv1fsKuP17zfy2vyNGAMN69by+zEv6t2GB87pSrMGgW16lsdYayv2RGMaAAuAcdba6caYlkAuYIEngNbW2uuP9XskJiZa7VgkIr7y48ZcHp6RxqbcQi7sdRwPn38CLWLqOF2WzxljUq21ieU9r0JX6MaYWsBnwIfW2ukA1trdh33/LWBWFWsVEamUvMISxs1O57NlO4hvWo8Prh/AaZ3L3XIz7FXkLhcDvAOkW2tfOOzx1t7xdYAkIM0/JYqIePw2nX78nHQKi12MPaMjY8909s6SYFKRK/RBwNXAamPMCu9jDwIjjTG98Qy5bAFu8kuFIiJARnY+D85IY+nmPPonNGF8Uk86tXT+zpJgUpG7XBYBR2rh6p5zEfG7Q6VlvDo/gzcWbKRedBRP/7knl/YL3HT6UKKZoiIStBZtyOXhz1ezZU8RF/dpw4PnnUBskN1ZEkwU6CISdMrclgenr+bjlO20i63Ph385iUEdnZlOH0oU6CISdF6ct56PU7Zz0+ntufOszmp6VpACXUSCSnJaJq/Mz+CK/nE8MLxr0MzCDAXagk5Egsa6rHzu+mQlfeIb8/iI7grzSlKgi0hQ2F9UyphJKdSvHcUbo/pRO0rDLJWlQBcRx5W5LbdNXc6ufQd5Y1RfWjYMv+n7gaAxdBFx3PNfr2PB+hzGJ/WkX9umTpcTsnSFLiKOmr0qk9e+38jIAfFceZJWZK0OBbqIOGZt1gHumbaSvvGNeezCbk6XE/IU6CLiiH1FJYz5IJWYOmqC+orG0EUk4MrcllunLCdr/yGm3jSQFmqC+oQCXUQC7pm5a/lhQy5PXdyTvvFNnC4nbGjIRUQCaubKXby5YBOjBsZzxQA1QX1JgS4iAfPrrgPc++lK+ic04ZHzuztdTthRoItIQOwtLGHMpBQa143m1av6Eh2l+PE1jaGLiN+5ytzcOmU52QeK+fimgWG5kXMw0D+RIuJXewqKuX3qChZl5PKvpB70URPUb3SFLiJ+Ya1lWsoOxn/l2dD53mFduCwxzumywpoCXUR87o8bOo9L6klnbejsdwp0EfEZbejsLAW6iPjE4Rs6J/Vpw0Pa0DngFOgiUi05+cX8a/avfLFiFwnN6jH5hpM4pZM2dHaCAl1EqsTttnycsp0n56RzsLSM24Z04m+DO2hDZwcp0EWk0tZl5fPQjNWkbN3LgHZNGZ/Uk44tGjhdVsRToItIpSzZtIer3l5CTJ0onr3kRC7pd7w2cw4SCnQRqTBrLePmpNOyYR2+HDuIZmp6BhXNFBWRCpuzOotVO/Zz59DOCvMgpEAXkQopLXPz3Nfr6NIyhqQ+bZwuR45AgS4iFfJJynY25xZy77Au1NREoaCkQBeRch0sKePlbzaQ2LYJQ05o4XQ5chTlBroxJs4YM98Yk26MWWOMud37eFNjzDxjzAbvRy2hJhKm3l28mez8Yu4/p6vuaAliFblCdwF3W2tPAAYCtxhjugEPAN9aazsB33q/FpEws6+ohDcWbGRI1xb0T2jqdDlyDOUGurU201q7zPt5PpAOtAFGAO97n/Y+cJG/ihQR57z+/UYKil3cO7yL06VIOSo1hm6MSQD6AEuAltbaTPCEPnDEgTVjzBhjTIoxJiUnJ6d61YpIQGXuP8jEH7eQ1KcNXVs1dLocKUeFA90Y0wD4DLjDWnugoq+z1k6w1iZaaxObN29elRpFxCEvzduAtXDX0M5OlyIVUKFAN8bUwhPmH1prp3sf3m2Mae39fmsg2z8liogTMrLzmZa6nVED23J8k3pOlyMVUJG7XAzwDpBurX3hsG99CYz2fj4a+ML35YmIU56du4560VGMPbOj06VIBVXkCn0QcDVwpjFmhffXucBTwFBjzAZgqPdrEQkDy7btZe6a3Yw5rT1N60c7XY5UULmLc1lrFwFHu/F0iG/LERGnWWt5+qu1xDaI5oZT2jldjlSCZoqKyO98vz6HJZvzuPXMTtSvrQVZQ4kCXUT+y+22PJO8jvim9Rg5IN7pcqSSFOgi8l8zV+0iPfMAd5/dmegoxUOo0TsmIgCUuNw8//V6urVuyAUnHud0OVIFCnQRAWDK0m1syyvivuFdqKHlcUOSAl1EKCx28Z/vNjCwfVNO76wZ3aFKgS4ivP3DZnILSrhvuJbHDWUKdJEIt6egmAkLNzKse0v6xmtbg1CmQBeJcK/Mz+BgaRn3DtPyuH5hLaTPArfb74dSoItEqH1FJTzw2SreW7yFyxLj6NgixumSwtOSN+Djq2DN9PKfW02aBiYSYay1fL5iJ/+alc6+g6WMOa09d56l5XH9YvNCmPsQdD0ful/s98Mp0EUiyObcQh7+fDWLM/bQO64xk5J60u04bVzhF/u2wbRroVlHSHoDavh/QESBLhIBil1lvLlgE6/Mz6B2zRo8MaI7V57Ulpq639w/Sopg6lVQ5oIrPoLagRnOUqCLhLklm/bw4IzVbMwp5LwTW/PI+d1o2bCO02WFL2th5m2QtRqu/BhiA7eevAJdJEztLSxh/Jx0pqXu4PgmdXnvuv6c0eWIW/+KL/30KqyeBmc+DJ2HBfTQCnSRMGOt5bNlOxk/J50DB0u5+fQO3D6kE3WjazpdWvjbOB/m/QNOuABOvSfgh1egi4SRrXsKuf+zVfy8KY++8Y0Zf3FPurZS0zMg9m6BT6+D2M5w0evgwIxbBbpImMgtKGbkhJ/JL3YxLqkHI/vHa5GtQCkpgqmjwLoD2gT9IwW6SBgoLXNzy4fL2FNYwqc3n0zP4xs5XVLksBa+HAu70+CqT6FZB8dK0UxRkTAwbnY6Szbn8dSfeyrMA+3Hf0PaZzDkH9DpLEdLUaCLhLhPU3cw8cctXD+oHUl9jne6nMiy8Tv45jHoNgJOucvpahToIqFs5fZ9PDhjNSd3aMaD53Z1upzIkrcZpl0HzU+AEa850gT9IwW6SIjKyS/m5smpNG9Qm1eu7EtUTf11DpiSQs9MUIArJkPtBs7W46WmqEgI+q0JurfI0wRtWj/a6ZIih7XwxS2Qkw5XTYOm7Z2u6L/0T7pICHpi1q8s3ZLH038+kR5t1AQNGGth4bOwZgYMeRQ6OtsE/SNdoYuEmE9StvPBT1u58dR2jOjdxulyIseejTDrTti8AHpcAoNud7qi/6FAFwkhy7ft5eEZaQzq2Iz7h6sJGhCuYlj8Mix8DqJqw7nPQeL1QdEE/SMFukiIyM4/xM2TU2nRsDavjFQTNCC2LPJcleeuh+5JMPwpiGnldFVHpUAXCQElLjd/m7yM/QdLmf7XQTRRE9S/ivLg63/AisnQON4zA7TTUKerKpcCXSQE/HPWGlK27uXfI/tohyF/shZWToGvH4ZD+2HQHXD6/RBdz+nKKqTc/7MZY941xmQbY9IOe+wxY8xOY8wK769z/VumSOSaunQbk3/exk2ntefCXsc5XU74yt0A718An/8VmnaAmxbC0MdDJsyhYlfoE4FXgA/+8PiL1trnfF6RiPzXsm17eeSLNZzaKZb71AT1j9JDsOhFWPQC1KoL578Ifa8NyB6gvlZuoFtrFxpjEvxfiogcLie/mJsnpdKqUR3+M7JP5O3/uWIK5Kz180EsrJ0NezI8tyIOGw8xLf18TP+pzhj6WGPMNUAKcLe1du+RnmSMGQOMAYiPj6/G4UQiy9Sl28jOL2bObafSuF6ENUH3bvEMfdSoCcbPOy01aQujpkPHIf49TgBUNdBfB54ArPfj88D1R3qitXYCMAEgMTHRVvF4IhEneU0W/do2icwm6LIPPPd5374SGmkFyYqq0iCRtXa3tbbMWusG3gIG+LYskci2Pa+INbsOMLx78N7z7DdlpbB8MnQ6W2FeSVUKdGNM68O+TALSjvZcEam85LQsAIZFYqCv+woKdkO/65yuJOSUO+RijJkCDAZijTE7gEeBwcaY3niGXLYAN/mxRpGIk7wmi26tGxLfLHRumfOZ1PegYZuQmMgTbCpyl8vIIzz8jh9qEREg+8AhUrfu5a6hnZ0uJfD2bvHsAjT4756GqFRK6N1oKRLm5v66G4DhPSJwuCX1fTA1oM/VTlcSkhToIkFmbloW7WPr06lFcOyCEzC/NUM7D4dGWha4KhToIkFkX1EJP23aw/AerTBBuDyrX62bA4XZ0O9apysJWQp0kSDyTXo2ZW4bmcMtKe9Bo7ig2wUolCjQRYJIcloWxzWqQ89I21YubxNsmg99r1EztBoU6CJBoqDYxcINOQyLxOGWZR94pvj3GeV0JSFNgS4SJL5fl02Jyx15s0NdJf/fDG2o5YGrQ4EuEiSS07JoVj+axISmTpcSWOtmQ2GOmqE+oEAXCQKHSsuYvzabs7u3jLxlclMnepuhob/aodMU6CJBYHFGLoUlZZG3dsuejbDpe+g7Ws1QH1CgiwSB5LQsYmpHcXKHWKdLCaxl76sZ6kMKdBGHucrczEvfzZATWhAdFUF/JV0lsPxD6HIONGxd/vOlXBH00yMSnJZuzmNfUSnDe0RYqK2dBUW5WibXhxToIg5LXpNFnVo1OL1zc6dLCazU96BRPHQ4w+lKwoYCXcRBbrclOS2LwZ1bUDc6gpqCezbC5oXQTzNDfUmBLuKg5dv3kZ1fHHlrt6RO9DZDtUyuLynQRRw0d00WtWoazujawulSAsdVDCu8zdCYCPuHzM8U6CIOsdYz3HJyh1ga1a3ldDmBs3YWFO2BRDVDfU2BLuKQ9Mx8tuUVRd5wS8p70Dge2p/pdCVhR4Eu4pDkNVkYA0O7tXS6lMDJzYAtP3hnhip+fE1/oiIOmZuWRf+EpsQ2qO10KYGzbCLUiFIz1E8U6CIO2JRTwLrd+ZG1VK6rGFZ85G2GRtD/SgJIgS7igLlrdgNE1vh5+kxPM1QzQ/1GgS7igOS0THod34jjGtd1upTASZ0IjdtCe80M9RcFukiA7dx3kJU79jMskq7Oczd4mqH91Az1J/3JigTY12uyACJr/PzHf3uaob21TK4/KdBFAiw5LYvOLRvQvnkDp0sJjBVTPJtAn3SzmqF+pkAXCaDcgmJ+2ZIXOVfnO5fBzNsh4VQ463Gnqwl7CnSRAPrm1924LZExfl6QAx+PggYt4NKJUDPK6YrCnv6ERQIoeU0WcU3r0q11Q6dL8a+yUpg2Gory4Ia5UD/CttZziK7QRQLkwKFSFmfkMrx7K4wxTpfjX3Mfgq2L4cL/QOteTlcTMcoNdGPMu8aYbGNM2mGPNTXGzDPGbPB+bOLfMkVC33fp2ZSW2fCfTLT8Q1j6JvxpLJx4qdPVRJSKXKFPBIb/4bEHgG+ttZ2Ab71fi8gxJKdl0SKmNn3iwvj6Z2cqzLoT2p2uJqgDyg10a+1CIO8PD48A3vd+/j5wkY/rEgkr+4pK+H59Nmd3b0mNGmE63FKQDVNHeW5NVBPUEVUdQ29prc0E8H486nYrxpgxxpgUY0xKTk5OFQ8nEtpe/34jxS43owa2dboU/3CVwCfXwMG9cMVHUK+p0xVFJL83Ra21E6y1idbaxObNI2xXcxEgc/9BJv64haTebejaKkzvbpn7d9j2E4x4BVr1dLqaiFXVQN9tjGkN4P2Y7buSRMLLS/M2YC3cObSz06X4x7JJ8MvbcPJt0PMSp6uJaFUN9C+B0d7PRwNf+KYckfCSkZ3PtNTtXDUwnrim9Zwux/d2pMDsuzwrKJ71mNPVRLyK3LY4BfgJ6GKM2WGMuQF4ChhqjNkADPV+LSJ/8OzcddSLjmLsGR2dLsX38nd7ZoLGtIZL3oUaNZ2uKOKV24a21o48yreG+LgWkbCyfNte5q7ZzZ1ndaZZuG0z91sT9NB+uGGemqBBQvcVifiBtZank9cS2yCav5zazulyfC/5ftj+M1zyHrTq4XQ14qWp/yJ+sGB9Dj9vyuPWMztRv3YYXTcV5MD0MZDyLgy6A3pc7HRFcpgw+kkTCQ5ut+Xp5HXEN63HyAHxTpfjG243LJ8E8x6BkkI4/X7PLwkqCnQRH5u5ahfpmQd4+YreREeFwX+Cs9Nh5h2eIZa2p8D5L0LzML0FM8Qp0EV8qMTl5vmv13NC64ZccOJxTpdTPaUHYeGzsPhlqN0QRrwGva+EcF8pMoQp0EV8aMrSbWzLK+K96/qH9potGd/A7Lth7xbofRUMfQLqN3O6KimHAl3ERwqLXfznuw2c1K4pgzuH6DIX+bs90/jTPoNmnWD0LGh3qtNVSQUp0EV85J1Fm8ktKGHCNV1DbwMLtxtS34NvHgfXQRj8IJxyB0SF2f3zYU6BLuIDewqKmbBwE8O6t6RvfIitd757jWcj5x2/eDZzPv9FiO3kdFVSBQp0ER94df5Gikpc3Dusi9OlVE7mSnhnGETXg6Q34cTL1fQMYQp0kWrasbeIyT9v5dJ+cXRsEeN0ORVXuMezIUW9pnDjdxAT5lvjRQAFukg1vTBvPcbAHUNDaJiizAWfXgsFu+H6ZIV5mAiDWQ8izlmbdYAZy3dy7ckJtG5U1+lyKm7eI7B5IVzwErTp63Q14iMKdJFqeG7uOhrUjuKvgzs4XUrFrZwKP78KJ93smSgkYUOBLlJFv2zJ45v0bG4+vQON60U7XU7F7FruuaOl7Slw9r+crkZ8TIEuUgXWWp7+ai0tYmpz/aAQWR63IMfbBI2FSydCzVpOVyQ+pqaoRDxXmZuUrXspcbkr/JoN2QWkbN3LuKQe1I0OgZ16ykph2rVQlOtpgjYI0ZmsckwKdIlo1lru/XQVM5bvrPRrO7ZowGWJcX6oyg++fhi2LvLca35cH6erET9RoEtEe3fxFmYs38lNp7Xn7O4tK/XaLq0aUqtmCIxaLv8QlrwBA/8Gva5wuhrxIwW6RKwfM3IZPyeds7u15P7hXUN7dcSj2ZkKs+70TOkf+oTT1YifhcDlhYjvbc8r4paPltEutj4vXN47PMO8IBs+vhoatPQ2QXX9Fu70DkvEOVhSxk2TUnG5LROu7keDcNrz8zeuEvhkNBTlwQ1zoX6s0xVJAIThT7LI0VlreWD6KtKzDvDO6ETaN2/gdEn+MfdB2PYjXPw2tO7ldDUSIBpykYjyzqLNfLFiF3cP7cyZXSvXBA0ZyybBL2/Bn8bCiZc6XY0EkAJdIsaiDZ4m6PDurbjljI5Ol+Mf25bA7Lug3elw1uNOVyMBpiEXiQjb84oYO2UZHVs04LnLeoXejkLlKSnybOj847+hYRs1QSOU3nEJe0UlLsZMSsXttky4OjH8mqAbvvFcle/bCr2uhLOf8KxxLhEnzH6yRX7PWst9n65ibdYB3ru2Pwmx9Z0uyXd+t6FzRxg9E9qd5nRV4iAFuoS1CQs3MWtVJvcN78LgLi2cLsc3tKGzHIUCXcLWDxtyeDp5Lef1bM1fTw+h9cqPRRs6yzFUK9CNMVuAfKAMcFlrE31RlEh1bdtTxNiPltO5ZQzPXHJi6DdBSwphwdPw4ytQt7E2dJYj8sUV+hnW2lwf/D4iPuFpgqYA8ObV/agf6k3Q9V/DnLth3zboM8qzJouannIEIf6TLiElbzOsnQXuMr8dwuW2zF25i8G5+VyWGEfb9F/9dqyA2JkC6TMhtjNcOwcSBjldkQSx6ga6Bb42xljgTWvthD8+wRgzBhgDEB8fX83DSUhylXjuj174LLgO+fVQUUDSb5+s8OuhAiOqDpzxMAy6TU1PKVd1A32QtXaXMaYFMM8Ys9Zau/DwJ3hDfgJAYmKirebxJNRs/Qlm3QE5a+GECz37WNb37W45eUUlPJO8js9X7OT4JnV59ILunNoxTBajqllLW8VJhVUr0K21u7wfs40xM4ABwMJjv0oiQlEefPMoLPsAGsXByI+hy3CfHsJay7TUHTw5J538Qy7GDO7GrWd2Co0t4UT8oMqBboypD9Sw1uZ7Pz8b+KfPKpPQZC2s+sSz2t/BvXDyrTD47xDt2wk9GdkFPDRjNUs255HYtgnjknrSpVWMT48hEmqqc4XeEpjhvR0sCvjIWpvsk6okNO3Z6NkdZ/MCaJMI13wOrXr69BCHSst4bX4Gry/YSN1aNXny4p5cnhgXnhtUiFRSlQPdWrsJ0ELLAq5iWPwyLHzO07g79zlIvB5q+HboY3FGLg9/nsbm3EIu6n0cD53XjeYxahSK/Ea3LUr1bFnkuSrPXQ/dk2D4UxDTyqeHyC0oZtzsdGYs30lCs3pMumEAp3bybWNVJBwo0MVzX/iKjyA7vXKvO7ADfv0CGsfDVZ9Cp6HHfPr2vCImL9mKq6ziNzu5ytx8vmIXRSUubj2zI7ec0ZE6tdT0FDkSBXqky1zlWRtk1zKoVR9MJfY8qRkFg26H0x+A6HrHfOqBQ6WMfncp2/KKKh3IveIa8fiF3enYQk1PkWNRoEeq4gL4/kn4+XXPNPKL34ael/hlbRC323Ln1BVsyyvioxsHMqCdpq2L+IMCPRKt+wpm3+MZMul3LZz1GNRt4rfDvfTNer5dm80/R3RXmIv4kQI9kuzfCV/d51lPpfkJcP1ciB/o10Mmp2Xy7+8yuCzxeK4e2NavxxKJdAr0SOAug6VvwXdPgNsFQx717AgfFe3Xw27Ync/dn6ykV1xj/jmiR+gvYSsS5BTo4W7Xcph5B2SugA5D4LznoWk7vx92/8FSbvwghbrRUbw5qp/uTBEJAAV6uCrOh+/GwdI3PYthXfIudL84IBsilLktt09dzo69B5kyZiCtGtXx+zFFRIEe/A7t9wRz0Z7KvW7bT3Bgl2fG5pBHPLvcBMgL89bx/boc/nVRD/onqAkqEigK9GDmdsP0MbBhHjRJqNxrmyTApRMhboAfCju6OaszeXX+Rq7oH8dVJ2n9e5FAUqAHs++fhPXJnrVRBtzodDXlWpeVzz3TVtInvjGPj+iuJqhIgFViWqAEVPpMWPiMZw/J/n9xuppy7S8qZcykFOrXjuKNUf2oHaUmqEigKdCDUfZamHEztOkH5z4f9Du7l7ktt05dzq59B3ljVF9aNlQTVMQJGnIJNgf3wdQroVY9uHwy1Ar+cHx27joWrs9hfFJP+rVVE1TEKQr0YOIug8/+Avu2wuhZ0PA4pysq16xVu3hjwUZGDojnSjVBRRylQA8m88dBxjw47wVo+yenqylXeuYB7p22in5tm/DYhd2cLkck4inQg8WvX8APz0Pfazz3jleR222Z8ss25qzOxO32YX1HsCE7n4Z1o3j9qr5qgooEAQV6MNj9K8z4Kxzf33OLYhWboGuzDvD36atZvm0fnVs2oHFd/67VckLrhtw7rAst1AQVCQoKdKcd3OtpgtZuAJdN8uzJWUlFJS5e/nYDb/+wmUZ1a/HCZb1I6tNG94GLRBgFupPcZfDpDbB/B1w7Gxq2rvRvMX9tNv/4Io0dew9yeWIcD5zTlSb1/XtlLiLBSYHupO+egI3fwvkvQfxJlXrp7gOH+OfMX5m9OpOOLRrwyU1/0uYRIhFOge6UNTNg0YueHYMSr6vwy8rclg+XbOXZ5HUUl7m55+zOjDmtA9FRmiMmEukU6E7ISoPP/wZxJ8E5z1T4ZWt27efBGWms3L6PUzvF8sSIHiTE1vdjoSISShTogVaU52mC1mkEl31QoSZoYbGLl75Zz7uLt9CkXi1evqI3F/Y6Tk1PEfmdkAj0n967n9bbZztdhk/E2AJibD731BtP+lvrgHXlvmZPYQl5hSWMHBDH/cO70riemp4i8r9CItBrNmxFXj3/b5sWCHnAkpihuBok0qmCr+lWswZXD2xLojaLEJFjCIlAH/DnO4E7nS7DZ/o6XYCIhCXdGiEiEiYU6CIiYUKBLiISJqoV6MaY4caYdcaYDGPMA74qSkREKq/KgW6MqQm8CpwDdANGGmO0KLaIiEOqc4U+AMiw1m6y1pYAU4ERvilLREQqqzqB3gbYftjXO7yP/Y4xZowxJsUYk5KTk1ONw4mIyLFUJ9CPNO/c/s8D1k6w1iZaaxObN29ejcOJiMixVGdi0Q4g7rCvjwd2HesFqampucaYrVU8XiyQW8XXhoNIPn+de+SK5PM//NzbVuQFxtr/uaiuEGNMFLAeGALsBH4BrrTWrqnSb1j+8VKstYn++L1DQSSfv849Ms8dIvv8q3LuVb5Ct9a6jDFjgblATeBdf4W5iIiUr1pruVhr5wBzfFSLiIhUQ7Y3TP4AAALGSURBVCjNFJ3gdAEOi+Tz17lHrkg+/0qfe5XH0EVEJLiE0hW6iIgcgwJdRCRMhESgR/IiYMaYLcaY1caYFcaYFKfr8TdjzLvGmGxjTNphjzU1xswzxmzwfmziZI3+cpRzf8wYs9P7/q8wxpzrZI3+YoyJM8bMN8akG2PWGGNu9z4eKe/90c6/Uu9/0I+hexcBWw8MxTOZ6RdgpLX2V0cLCxBjzBYg0VobEZMrjDGnAQXAB9baHt7HngHyrLVPef9Bb2Ktvd/JOv3hKOf+GFBgrX3Oydr8zRjTGmhtrV1mjIkBUoGLgGuJjPf+aOd/GZV4/0PhCl2LgEUQa+1CPFuvHm4E8L738/fx/KCHnaOce0Sw1mZaa5d5P88H0vGsDRUp7/3Rzr9SQiHQK7QIWBizwNfGmFRjzBini3FIS2ttJnh+8IEWDtcTaGONMau8QzJhOeRwOGNMAtAHWEIEvvd/OH+oxPsfCoFeoUXAwtgga21fPOvO3+L9b7lEjteBDkBvIBN43tly/MsY0wD4DLjDWnvA6XoC7QjnX6n3PxQCvdKLgIUTa+0u78dsYAaeIahIs9s7xvjbWGO2w/UEjLV2t7W2zFrrBt4ijN9/Y0wtPGH2obV2uvfhiHnvj3T+lX3/QyHQfwE6GWPaGWOigSuALx2uKSCMMfW9DRKMMfWBs4G0Y78qLH0JjPZ+Phr4wsFaAuq3MPNKIkzff2OMAd4B0q21Lxz2rYh47492/pV9/4P+LhcA7606L/H/i4CNc7ikgDDGtMdzVQ6edXc+CvdzN8ZMAQbjWTp0N/Ao8DnwCRAPbAMutdaGXfPwKOc+GM9/ty2wBbjptzHlcGKMOQX4AVgNuL0PP4hnHDkS3vujnf9IKvH+h0Sgi4hI+UJhyEVERCpAgS4iEiYU6CIiYUKBLiISJhToIiJhQoEuIhImFOgiImHi/wCM1wypkw+Q9gAAAABJRU5ErkJggg==\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x288 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 94,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"iVBORw0KGgoAAAANSUhEUgAAAYsAAAEGCAYAAACUzrmNAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+17YcXAAAVRUlEQVR4nO3dfbRddX3n8feHGx4iyFPIsPBCGuyNRXSmoBFEXF0WESLtEqx1yYyrRMsq0xZDHLWj2DXSqmidOmrIsjhRGIN1lVK0FRmEFQSc4gOQyEOIweGOiCRQTBMeC0YTvvPH2dGbcO/dN3DPPffh/VrrrLv3b//2Pt+D23zOPr/9kKpCkqTR7NHrAiRJk59hIUlqZVhIkloZFpKkVoaFJKnVrF4X0A2HHHJIzZ8/v9dlSNKUsmbNmn+tqrnDLZuWYTF//nxWr17d6zIkaUpJcv9Iy/wZSpLUyrCQJLUyLCRJrQwLSVIrw0KS1MqwkCS1MiwkSa2m5XUWkrpr+fLlDA4O9roMNm7cCEB/f39P6xgYGGDJkiU9raHbDAtJU9bTTz/d6xJmDMNC0m6bLN+ily5dCsCyZct6XMn055iFJKmVYSFJamVYSJJaGRaSpFaGhSSplWEhSWplWEiSWhkWkqRWXQ+LJH1Jbk9ydTN/ZJJbktyb5O+T7NW0793MDzbL5w/ZxvlN+w+TnNrtmiVJO5uII4ulwPoh858APl1VC4BHgLOb9rOBR6pqAPh0048kRwNnAi8DFgF/k6RvAuqWJDW6GhZJDgd+B/hCMx/gJODKpstK4Ixm+vRmnmb565v+pwOXV9XWqroPGASO62bdkqSddfvI4jPAfwWeaebnAI9W1bZmfgOw43aR/cADAM3yx5r+v2wfZp1fSnJOktVJVm/atGm8P4ckzWhdC4skvwv8tKrWDG0epmu1LBttnV81VK2oqoVVtXDu3Lm7Xa8kaWTdvOvsicCbkpwG7APsT+dI48Aks5qjh8OBB5v+G4AjgA1JZgEHAFuGtO8wdB1J0gTo2pFFVZ1fVYdX1Xw6A9Q3VNXbgRuB32+6LQa+1kxf1czTLL+hqqppP7M5W+pIYAFwa7fqliQ9Wy+eZ/F+4PIkHwVuBy5p2i8BvpRkkM4RxZkAVbUuyRXAD4BtwLlVtX3iy5akmWtCwqKqbgJuaqZ/xDBnM1XVz4C3jrD+hcCF3atQkjQar+CWJLUyLCRJrQwLSVIrw0KS1KoXZ0NpjJYvX87g4GBPa9i4cSMA/f3Pumh+wg0MDLBkyZJelyHNSIaFRvX000/3ugRJk4BhMYlNhm/RS5cuBWDZsmU9rkRSLzlmIUlqZVhIkloZFpKkVoaFJKmVYSFJamVYSJJaGRaSpFaGhSSplWEhSWplWEiSWhkWkqRWhoUkqZVhIUlqZVhIkloZFpKkVoaFJKmVYSFJauWT8qQpZjI8m32y2PHfYccTHWe6bj6n3rCQppjBwUHuXXc78/bb3utSem6vX3R+HNl6/+oeV9J7P3myr6vbNyykKWjeftv54Cse73UZmkQ+9v39u7p9xywkSa0MC0lSK8NCktTKsJAktTIsJEmtuhYWSfZJcmuSO5OsS/KXTfsXk9yX5I7mdUzTniQXJRlMcleSVwzZ1uIk9zavxd2qWZI0vG6eOrsVOKmqnkyyJ3Bzkm80y/6sqq7cpf8bgQXN63jgYuD4JAcDFwALgQLWJLmqqh7pVuFe9PQrXvS0s25e9CRNZl0Li6oq4Mlmds/mVaOscjpwWbPe95IcmOQw4HXAqqraApBkFbAI+Ltu1T44OMgdd69n+wsO7tZbTBl7/LzzP9maHz3c40p6r++pLb0uQeqZrl6Ul6QPWAMMAJ+tqluS/AlwYZIPAd8EPlBVW4F+4IEhq29o2kZq3/W9zgHOAZg3b97zrn37Cw7m6aNOe97b0fQx+55rel2C1DNdHeCuqu1VdQxwOHBckpcD5wNHAa8CDgbe33TPcJsYpX3X91pRVQurauHcuXPHpX5JUseEnA1VVY8CNwGLquqh6tgK/C/guKbbBuCIIasdDjw4SrskaYJ082youUkObKZnAycD9zTjECQJcAZwd7PKVcBZzVlRrwYeq6qHgOuAU5IclOQg4JSmTZI0Qbo5ZnEYsLIZt9gDuKKqrk5yQ5K5dH5eugP446b/NcBpwCDwFPBOgKrakuQjwG1Nvw/vGOyWJE2Mbp4NdRdw7DDtJ43Qv4BzR1h2KXDpuBYoSRozr+CWJLXyeRbSFLNx40b+7Ym+rj+/QFPL/U/0se/GjV3bvkcWkqRWHlkMY+PGjfQ99ZgXYWknfU9tZuPGbb0ug/7+frZue8gn5WknH/v+/uzd/6zrlceNRxaSpFYeWQyjv7+ff9k6y9t9aCez77mG/v5De12G1BMeWUiSWhkWkqRWhoUkqZVhIUlqZVhIkloZFpKkVoaFJKmVYSFJamVYSJJaGRaSpFaGhSSplWEhSWrljQSlKegnT/rwI4CHn+p83z30Bc/0uJLe+8mTfSzo4vYNC2mKGRgY6HUJk8bPBwcB2PvX/G+ygO7uG4aFNMUsWbKk1yVMGkuXLgVg2bJlPa5k+nPMQpLUyrCQJLUyLCRJrcYUFklOHEubJGl6GuuRxfIxtkmSpqFRz4ZKcgLwGmBukvcMWbQ/0NfNwiRJk0fbqbN7Afs1/V44pP1x4Pe7VZQkaXIZNSyq6lvAt5J8sarun6CaJEmTzFgvyts7yQpg/tB1quqkbhQlSZpcxhoW/wB8DvgCsL175UiSJqOxhsW2qrq4q5VIkiatUU+dTXJwkoOBryf50ySH7Whr2kdbd58ktya5M8m6JH/ZtB+Z5JYk9yb5+yR7Ne17N/ODzfL5Q7Z1ftP+wySnPu9PLUnaLW1HFmuAAtLM/9mQZQW8eJR1twInVdWTSfYEbk7yDeA9wKer6vIknwPOBi5u/j5SVQNJzgQ+AbwtydHAmcDLgBcB1yd5SVX5c5gkTZBRjyyq6siqenHzd9fXaEFBdTzZzO7ZvAo4CbiyaV8JnNFMn97M0yx/fZI07ZdX1daqug8YBI7bzc8pSXoexjRmkeT3hml+DFhbVT8dZb0+OkcnA8Bngf8HPFpV25ouG4D+ZrofeACgqrYleQyY07R/b8hmh64z9L3OAc4BmDdv3lg+liRpjMY6wH02cAJwYzP/Ojr/gL8kyYer6kvDrdT8VHRMkgOBfwReOly35m9GWDZS+67vtQJYAbBw4cJnLZckPXdjvTfUM8BLq+otVfUW4Gg6YxLHA+9vW7mqHgVuAl4NHJhkR0gdDjzYTG8AjgBolh8AbBnaPsw6kqQJMNawmF9VDw+Z/ynwkqraAvxiuBWSzG2OKEgyGzgZWE/n6GTHrUIWA19rpq9q5mmW31BV1bSf2ZwtdSSdpwfeOsa6JUnjYKw/Q/1zkqvpXJwH8Bbg/yTZF3h0hHUOA1Y24xZ7AFdU1dVJfgBcnuSjwO3AJU3/S4AvJRmkc0RxJkBVrUtyBfADYBtwrmdCSdLEGmtYnEsnIE6kM4ZwGfCV5pv/bw+3QlXdBRw7TPuPGOZspqr6GfDWEbZ1IXDhGGuVJI2zMYVFEwpX8qtTXiVJM0jb8yxurqrXJnmCnc9ACp0M2b+r1UmSJoW2W5S/tvn7wtH6SZKmt7GeDUWS1yZ5ZzN9SHNmkiRpBhhTWCS5gM71FOc3TXsBf9utoiRJk8tYjyzeDLwJ+DeAqnqQnR+zKkmaxsYaFj9vzogqgOb6CknSDDHWsLgiyf+kc6uOPwKuBz7fvbIkSZNJ26mz7wa+DXyGzsV3jwO/AXyoqlZ1vzxJ0mTQdlHe4cAy4CjgLuA7dMJjTZfrkiRNIm3XWbwPoHn06ULgNcAfAp9P8mhVHd39EiVJvTbWe0PNBvanc9vwA+jcInxtt4qSJE0ubWMWK+g8+/oJ4BY6P0N9qqoemYDaJEmTRNvZUPOAvYF/ATbSeRDRSLcklyRNU21jFouShM7RxWuA9wIvT7IF+G5VXTABNUqSeqx1zKK5GO/uJI8CjzWv36XzTArDQpJmgLYxi/PoHFGcSOfxqd8GvgtcigPckjRjtB1ZzKfzwKP/UlUPdb+cyaPvqS3MvueaXpfRc3v87HEAntnHR5f0PbUFOLTXZUg90TZm8Z6JKmQyGRgY6HUJk8bg4BMADLzYfyThUPcNzVhjvc5iRlmyZEmvS5g0li5dCsCyZct6XImkXhrzw48kSTOXYSFJamVYSJJaOWYhabctX76cwcHBXpfxyxp2jK31ysDAwLQf6zQsJE1Zs2fP7nUJM4ZhIWm3Tfdv0Xo2xywkSa0MC0lSK8NCktTKsJAktTIsJEmtDAtJUquuhUWSI5LcmGR9knVJljbtf5FkY5I7mtdpQ9Y5P8lgkh8mOXVI+6KmbTDJB7pVsyRpeN28zmIb8N6q+n6SFwJrkqxqln26qj45tHOSo4Ez6TzC9UXA9Ule0iz+LPAGOs8Avy3JVVX1gy7WLkkaomth0Tws6aFm+okk64H+UVY5Hbi8qrYC9yUZpPPoVoDBqvoRQJLLm76GhSRNkAkZs0gyHzgWuKVpeleSu5JcmuSgpq0feGDIahuatpHad32Pc5KsTrJ606ZN4/wJJGlm63pYJNkP+Arw7qp6HLgY+HXgGDpHHv9jR9dhVq9R2nduqFpRVQurauHcuXPHpXZJUkdX7w2VZE86QfHlqvoqQFU9PGT554Grm9kNwBFDVj8ceLCZHqldkjQBunk2VIBLgPVV9akh7YcN6fZm4O5m+irgzCR7JzkSWADcCtwGLEhyZJK96AyCX9WtuiVJz9bNI4sTgT8A1ia5o2n7IPAfkxxD56ekHwP/GaCq1iW5gs7A9Tbg3KraDpDkXcB1QB9waVWt62LdkqRddPNsqJsZfrzhmlHWuRC4cJj2a0ZbT5LUXV7BLUlqZVhIkloZFpKkVoaFJKmVYSFJamVYSJJaGRaSpFaGhSSplWEhSWplWEiSWhkWkqRWhoUkqZVhIUlqZVhIkloZFpKkVoaFJKmVYSFJamVYSJJaGRaSpFaGhSSplWEhSWplWEiasjZv3sx5553H5s2be13KtGdYSJqyVq5cydq1a7nssst6Xcq0Z1hImpI2b97MtddeS1Vx7bXXenTRZYaFpClp5cqVPPPMMwBs377do4suMywkTUnXX38927ZtA2Dbtm2sWrWqxxVNb4aFpCnp5JNPZtasWQDMmjWLN7zhDT2uaHozLCRNSYsXL2aPPTr/hPX19XHWWWf1uKLpzbCQNCXNmTOHRYsWkYRFixYxZ86cXpc0rc3qdQGS9FwtXryYH//4xx5VTADDQtKUNWfOHC666KJelzEj+DOUJKlV18IiyRFJbkyyPsm6JEub9oOTrEpyb/P3oKY9SS5KMpjkriSvGLKtxU3/e5Ms7lbNkqThdfPIYhvw3qp6KfBq4NwkRwMfAL5ZVQuAbzbzAG8EFjSvc4CLoRMuwAXA8cBxwAU7AkaSNDG6FhZV9VBVfb+ZfgJYD/QDpwMrm24rgTOa6dOBy6rje8CBSQ4DTgVWVdWWqnoEWAUs6lbdkqRnm5AxiyTzgWOBW4BDq+oh6AQK8O+abv3AA0NW29C0jdS+63uck2R1ktWbNm0a748gSTNa18MiyX7AV4B3V9Xjo3Udpq1Gad+5oWpFVS2sqoVz5859bsVKkobV1bBIsiedoPhyVX21aX64+XmJ5u9Pm/YNwBFDVj8ceHCUdknSBOnm2VABLgHWV9Wnhiy6CthxRtNi4GtD2s9qzop6NfBY8zPVdcApSQ5qBrZPadokSROkmxflnQj8AbA2yR1N2weBvwKuSHI28BPgrc2ya4DTgEHgKeCdAFW1JclHgNuafh+uqi1drFuStIuuhUVV3czw4w0Arx+mfwHnjrCtS4FLx686SdLu8ApuSVIrw0KS1MqwkCS1MiwkSa0MC0lSK8NCktTKsJAktTIsJEmtDAtJUivDQpLUyrCQJLUyLCRJrQwLSVIrw0KS1Kqbz7PQ87R8+XIGBwd7WsOO91+6dGlP6wAYGBhgyZIlvS5DmpEMC41q9uzZvS5B0iRgWExifouWNFk4ZiFJamVYSJJaGRaSpFaGhSSplWEhSWplWEiSWhkWkqRWhoUkqVWqqtc1jLskm4D7e13HNHII8K+9LkIagfvn+Pm1qpo73IJpGRYaX0lWV9XCXtchDcf9c2L4M5QkqZVhIUlqZVhoLFb0ugBpFO6fE8AxC0lSK48sJEmtDAtJUivDYgZIcl6S9Um+3KXt/0WS93Vj29LuSPK6JFf3uo7pyCflzQx/Cryxqu7rdSGSpiaPLKa5JJ8DXgxcleTPk1ya5LYktyc5venzjiT/lOTrSe5L8q4k72n6fC/JwU2/P2rWvTPJV5K8YJj3+/Uk1yZZk+Sfkxw1sZ9YU12S+UnuSfKFJHcn+XKSk5N8O8m9SY5rXt9p9tHvJPmNYbaz73D7u54bw2Kaq6o/Bh4EfhvYF7ihql7VzP91kn2bri8H/hNwHHAh8FRVHQt8Fzir6fPVqnpVVf0msB44e5i3XAEsqapXAu8D/qY7n0zT3ACwDPgPwFF09s3X0tmnPgjcA/xWs49+CPjYMNv4c0be37Wb/BlqZjkFeNOQ8YV9gHnN9I1V9QTwRJLHgK837Wvp/B8W4OVJPgocCOwHXDd040n2A14D/EOSHc17d+ODaNq7r6rWAiRZB3yzqirJWmA+cACwMskCoIA9h9nGSPv7+m4XPx0ZFjNLgLdU1Q93akyOB7YOaXpmyPwz/Go/+SJwRlXdmeQdwOt22f4ewKNVdcz4lq0ZqG1//AidLzhvTjIfuGmYbQy7v+u58WeomeU6YEmar/1Jjt3N9V8IPJRkT+Dtuy6sqseB+5K8tdl+kvzm86xZGs4BwMZm+h0j9Hm++7uGMCxmlo/QOVy/K8ndzfzu+G/ALcAqOr8ZD+ftwNlJ7gTWAQ4qqhv+O/DxJN8G+kbo83z3dw3h7T4kSa08spAktTIsJEmtDAtJUivDQpLUyrCQJLUyLCRJrQwLSVIrw0IaZ83dTv93c3feu5O8Lckrk3yruRvvdUkOSzKruSPq65r1Pp7kwh6XLw3Le0NJ428R8GBV/Q5AkgOAbwCnV9WmJG8DLqyqP2zusXVlkvOa9Y7vVdHSaAwLafytBT6Z5BPA1cAjdG4Bv6q5TVEf8BBAVa1L8iU6d/k9oap+3puSpdEZFtI4q6r/m+SVwGnAx+ncS2tdVZ0wwir/HngUOHSCSpR2m2MW0jhL8iI6D4/6W+CTdH5ampvkhGb5nkle1kz/HjAH+C3goiQH9qhsaVTeSFAaZ0lOBf6azrMXfgH8CbANuIjOrbVnAZ8B/hH4DvD6qnqgGbd4ZVUt7knh0igMC0lSK3+GkiS1MiwkSa0MC0lSK8NCktTKsJAktTIsJEmtDAtJUqv/Dxl3ttMk4499AAAAAElFTkSuQmCC\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x288 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 95,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x288 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie 9\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"## Reguła Trzech Sigm\\n\",\n    \"Reguła Trzech Sigm dla danego rozkładu normalnego $N(mean,\\\\sigma)$ oznacza, że w przedziale $[mean-3\\\\sigma,mean+3\\\\sigma]$ znajduje się 99.7\\\\% wszystkich obserwacji.\\n\",\n    \"\\n\",\n    \"Napisz program, który:\\n\",\n    \"\\n\",\n    \"  * rysuje gęstość rozkładu normalnego o zadanych parametrach $mean$ i $\\\\sigma$,\\n\",\n    \"  * wylicza pole pod krzywą\\n\",\n    \"  * zaznacza obszar po krzywą\\n\",\n    \"\\n\",\n    \"Policz prawdopodobieństwa:\\n\",\n    \"\\n\",\n    \"  * $P(X \\\\in [mean-\\\\sigma,mean+\\\\sigma])$\\n\",\n    \"  * $P(X \\\\in [mean-2\\\\sigma,mean+2\\\\sigma])$\\n\",\n    \"  * $P(X \\\\in [mean-3\\\\sigma,mean+3\\\\sigma])$\\n\",\n    \"\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"0.682689492137086\\n\",\n      \"0.9544997361036417\\n\",\n      \"0.9973002039367399\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"image/png\": \"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\\n\",\n      \"text/plain\": [\n       \"<matplotlib.figure.Figure at 0xcff0868c50>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Z02_numy_pandas.ipynb b/Z02_numy_pandas.ipynb
--- a/Z02_numy_pandas.ipynb	(revision 23b7d23cdb1c969d11dad11bcc79574ad6e5458b)
+++ b/Z02_numy_pandas.ipynb	(date 1648214802680)
@@ -6444,4 +6444,4 @@
  },
  "nbformat": 4,
  "nbformat_minor": 2
-}
+}
\ No newline at end of file
Index: .idea/codestream.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/codestream.xml b/.idea/codestream.xml
new file mode 100644
--- /dev/null	(date 1648214639596)
+++ b/.idea/codestream.xml	(date 1648214639596)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CodeStream">
+    <option name="webViewContext" value="{&quot;chatProviderAccess&quot;:&quot;strict&quot;,&quot;currentTeamId&quot;:&quot;&quot;,&quot;currentStreamId&quot;:&quot;&quot;,&quot;pullRequestCheckoutBranch&quot;:false,&quot;isRepositioning&quot;:false,&quot;onboardStep&quot;:0,&quot;panelStack&quot;:[&quot;landing-redirect&quot;],&quot;hasFocus&quot;:false,&quot;channelFilter&quot;:&quot;all&quot;,&quot;channelsMuteAll&quot;:false,&quot;codemarkFileFilter&quot;:&quot;all&quot;,&quot;codemarkTypeFilter&quot;:&quot;all&quot;,&quot;codemarkTagFilter&quot;:&quot;all&quot;,&quot;codemarkBranchFilter&quot;:&quot;all&quot;,&quot;codemarkAuthorFilter&quot;:&quot;all&quot;,&quot;codemarksFileViewStyle&quot;:&quot;inline&quot;,&quot;codemarksShowArchived&quot;:false,&quot;codemarksShowResolved&quot;:false,&quot;codemarksWrapComments&quot;:false,&quot;showFeedbackSmiley&quot;:true,&quot;route&quot;:{&quot;name&quot;:&quot;newUserEntry&quot;,&quot;params&quot;:{}},&quot;spatialViewShowPRComments&quot;:false,&quot;sessionStart&quot;:1647972546036}" />
+  </component>
+</project>
\ No newline at end of file
Index: Z03_A_correlation.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"import numpy as np\\n\",\n    \"from scipy import stats\\n\",\n    \"import pandas as pd\\n\",\n    \"import matplotlib.pyplot as plt\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Korelacja\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Współczynnik korelacji między dwiema zmiennymi odpowiada na pytanie: \\n\",\n    \"\\n\",\n    \"<i>Czy dwie zmienne są powiązane? </i> \\n\",\n    \"\\n\",\n    \"## Współczynnik korelacji Pearsona \\n\",\n    \"\\n\",\n    \"Współczynnik korelacji Pearsona - współczynnik określający poziom zależności liniowej między zmiennymi losowymi.\\n\",\n    \"\\n\",\n    \"## Korelacja rang Spearmana \\n\",\n    \"\\n\",\n    \"Korelacja rang Spearmana (lub: korelacja rangowa Spearmana, rho Spearmana) – jedna z nieparametrycznych miar monotonicznej zależności statystycznej między zmiennymi losowymi.\\n\",\n    \"\\n\",\n    \"Korelacja rangowa przyjmuje zawsze wartości z przedziału $[-1,+1]$. Ich interpretacja jest podobna do klasycznego współczynnika korelacji Pearsona, z jednym zastrzeżeniem: \\n\",\n    \"- w odróżnieniu od współczynnika Pearsona, który mierzy liniową zależność między zmiennymi, a wszelkie inne związki traktuje jak zaburzone zależności liniowe, korelacja rangowa pokazuje dowolną monotoniczną zależność (także nieliniową).\\n\",\n    \"\\n\",\n    \"## Korelacja Tau Kendalla \\n\",\n    \"\\n\",\n    \"Tau Kendalla – statystyka będąca jedną z miar monotonicznej zależności dwóch zmiennych losowych. Służy w praktyce do opisu korelacji między zmiennymi porządkowymi.\\n\",\n    \"\\n\",\n    \"Tau Kendalla przyjmuje wartości od -1 do 1 włącznie. +1 oznacza, że każda ze zmiennych rośnie przy wzroście drugiej. -1 oznacza że każda maleje przy wzroście drugiej. Tym samym tau Kendalla, podobnie jak korelacja rangowa jest miarą monotonicznej zależności zmiennych losowych.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie 1 \\n\",\n    \"Policz korelacje: \\n\",\n    \"<ul>\\n\",\n    \"<li>pearson</li>\\n\",\n    \"<li>spearman</li>\\n\",\n    \"<li>kendall</li>\\n\",\n    \"</ul>\\n\",\n    \"\\n\",\n    \"dla zbioru:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"f = lambda x: (x)\\n\",\n    \"x_tr = np.linspace(0., 5, 200)\\n\",\n    \"y_tr = f(x_tr)\\n\",\n    \"x = stats.uniform(1,3).rvs(100)\\n\",\n    \"y = f(x) + stats.norm(0,0.1).rvs(len(x))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\nHsNJ6cNOgwAAAABJRU5ErkJggg==\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x432 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.figure(figsize=(6,6));\\n\",\n    \"axes = plt.gca()\\n\",\n    \"axes.set_xlim([0,5])\\n\",\n    \"axes.set_ylim([0,5])\\n\",\n    \"plt.plot(x_tr, y_tr, '--k');\\n\",\n    \"plt.plot(x, y, 'ok', ms=3);\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"{'pearson': 0.9938268994821543, 'spearman': 0.993279327932793, 'kendall': 0.933737373737374}\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"corr = {}\\n\",\n    \"corr['pearson'], _ = stats.pearsonr(x,y)\\n\",\n    \"corr['spearman'], _ = stats.spearmanr(x,y)\\n\",\n    \"corr['kendall'], _ = stats.kendalltau(x,y)\\n\",\n    \"print(corr)    \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie 2 \\n\",\n    \"Policz korelacje: \\n\",\n    \"<ul>\\n\",\n    \"<li>pearson</li>\\n\",\n    \"<li>spearman</li>\\n\",\n    \"<li>kendall</li>\\n\",\n    \"</ul>\\n\",\n    \"\\n\",\n    \"dla zbioru:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"f = lambda x: (-x+5)\\n\",\n    \"x_tr = np.linspace(0., 5, 200)\\n\",\n    \"y_tr = f(x_tr)\\n\",\n    \"x = stats.uniform(1,3).rvs(100)\\n\",\n    \"y = f(x) + stats.norm(0,0.1).rvs(len(x))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"iVBORw0KGgoAAAANSUhEUgAAAW4AAAFpCAYAAAC8p8I3AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4yLCBo\\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvhp/UCwAAIABJREFUeJzt3Xl4lOW9//H3PZPMEBRFllIQXPmB\\naEWsHCGiJiSsioKgghtaVLBiBSytRY8rIseimHoQV7CAC1YWEVRAIAPlMIAgolhwwRW1CBEpIMkk\\nmfv3R5iYQJZJMpNnls/runI1kzwz83Wu+snX+7kXY61FRETih8vpAkREpGYU3CIicUbBLSISZxTc\\nIiJxRsEtIhJnFNwiInEmJZyLjDFfAvuAYqDIWts5mkWJiEjlwgruQ7pba3dHrRIREQmLhkpEROJM\\nuMFtgaXGmI3GmOHRLEhERKoW7lBJN2vtd8aYXwHvGGO2WWtXlb3gUKCHQv2cX//61xx//PGRrFVE\\nJGFt3Lhxt7W2eTjXmpruVWKMuR/Yb619tLJrfvWrX9ldu3YxevRoJk+ejDGmRu8hIpJsjDEbw534\\nUe1QiTHmKGNMo9D3QC9gS1XPOeGEExg1ahQ5OTncdtttBIPBcGoREZEwhDNU0gKYf6hrTgFettYu\\nru5Jjz/+OB6Ph0AgoI5bRCSCajxUEo7OnTvbDRs2EHptYwzffPMNrVq1wu12R/z9RETiXUSHSupY\\nCMYY9uzZQ5cuXbj22mspLCyM5luKiCS8epnHfdxxxzFq1Chmz57NVVddRSAQqI+3FRFJSPW2AOfO\\nO+9k8uTJzJ07l8svv5yCgoL6emsRkYRSrysnx4wZw5NPPsnChQt58MEH6/OtRUQSRk32KomIW2+9\\nlVatWpGdnV3fby0ikhAc2atkwIABNGrUiP3793PHHXewb98+J8oQEYlLjm4y5ff7eeKJJ+jTpw97\\n9+51shQRkbjhaHD37NmTV199lfXr19OrVy/27NnjZDkiInHB8W1dBw0axLx583j//ffJzs4mLy/P\\n6ZJERGKa48ENcMkll7BgwQJ++ukndd0iItWo91kllenTpw/btm3D4/FgrWXv3r00btzY6bJERGJO\\nTHTcIR6PB4C7776bc889lx07djhckYhI7Imp4A7p168f//73v8nIyOCrr75yuhwRkZgSk8F93nnn\\nsWzZMn788UcuvPBCPv/8c6dLEhGJGTEZ3ADnnnsuy5cvZ//+/fTo0UN7m4iIHBIzNycr8tvf/haf\\nz8cXX3yB1+t1uhwRkZgQsx13yJlnnsmll14KwJw5c/jwww8drkhExFkxH9wh+fn5/OlPf6J79+5s\\n2rTJ6XJERBwTN8HdoEEDli1bxlFHHUVWVhbr1693uiQREUfETXADnHrqqaxatYomTZrQo0cP1qxZ\\n43RJIiL1Lq6CG+DEE09k5cqVtGzZkqVLlzpdjohIvYvpWSWVad26NevXr+eYY44BoKCgQLNORCRp\\nxF3HHXLsscdijGHbtm20a9eOxYsXO12SiEi9iNvgDmnevDlNmzalf//+LFy40OlyRESiLu6Du2nT\\npixfvpyzzjqLgQMHMnfuXKdLEhGJqrgPboDjjjuOd955h3PPPZfBgwezbNkyp0sSEYmahAhuKBnz\\nXrx4MXfccQfnnXee0+WIiERNwgQ3QKNGjfjrX/9Kw4YN2bt3L/PmzXO6JBGRiEuo4C5r4sSJDBo0\\niKlTpzpdiohIRMXlPO5wPPDAA2zdupWRI0cSCAQYPXq00yWJiEREwnbcXq+X1157jUGDBjFmzBge\\neeQRp0sSEYmIhA1uKDnDcvbs2Vx11VU8+eST/PTTT06XJCJSZwk7VBKSkpLCrFmz2LlzJ40bN8Za\\nC4AxxuHKRERqJ6E77hC3202rVq2w1nLrrbdy5513lga4iEi8SYrgDrHW4nK5mDRpEmPGjFF4i0hc\\nSvihkrJcLhdTpkzB4/GQk5NDIBBgypQpuFxJ9fdLROJcUgU3lIxtT548Ga/XyyOPPIIxhieffNLp\\nskREwpZ0wQ0l4T1x4kQaNmxI586dnS5HRKRGkjK4oSS877333tLHPp+Pbt26kZqa6mBVIiLV0+Au\\nsG3bNrKzsxk8eDCBQMDpckREqqTgBk477TQmT57M/PnzGTRoEAUFBU6XJCJSKQX3IaNGjeKpp55i\\n0aJF9O/fn4MHDzpdkohIhRTcZdxyyy1MmzaNpUuXMmfOHKfLERGpUNLenKzMsGHD+O1vf0unTp2c\\nLkVEpELquCsQCu3NmzfTr18/9u7d63BFIiK/UHBX4csvv2Tp0qX07NmTPXv2OF2OiAig4K5S//79\\nmTdvHps3byYrK4vdu3c7XZKIiIK7Ov369eONN95g27ZtdO/enV27djldkogkOQV3GHr37s2bb75J\\n+/btOeaYY5wuR0SSnGaVhCkrK4usrCwAfvzxR37++Wdat27tcFUikozUcdeQtZYrrriCCy+8kC+/\\n/NLpckQkCSm4a8gYw//8z/+wZ88eMjIy2L59u9MliUiSUXDXwn/913+xYsUKDhw4wIUXXsjHH3/s\\ndEkikkQU3LV09tlnk5ubS1FREcOGDav0GDS/38/EiRPx+/31XKGIJCrdnKyDM888E5/PR8OGDSs8\\nNd7v95OdnU0gEMDj8bB8+XLS09MdqFREEok67jrq0KEDJ554IsFgkFGjRrFx48bS3/l8PgKBAMXF\\nxQQCAXw+n3OFikjCCDu4jTFuY8wmY8yiaBYUr3bt2sWCBQvIzs5m3bp1AGRmZuLxeHC73Xg8HjIz\\nM50tUkQSQk067lHA1mgVEu9atGjBqlWraNasGT179mT16tWkp6ezfPlyxo8fr2ESEYmYsMa4jTGt\\ngYuBCcAdUa0ojp1wwgmsXLmSrKws+vTpw6JFi8jMzFRgi0hEhdtx5wB/BoJRrCUhHH/88axcuZLT\\nTjuN4uJip8sRkQRUbcdtjOkH/GCt3WiMyaziuuHAcCjpPJPZr3/9a9avX4/LVfJ3cceOHVoeLyIR\\nE07H3Q241BjzJTAbyDLGvHj4RdbaZ621na21nZs3bx7hMuNPKLTnzZtH27ZtWbBggcMViUiiqDa4\\nrbXjrLWtrbUnAUOAFdbaa6NeWYLIysqiU6dOXH755bz22mtOlyMiCUDzuKOscePGLF26lC5dujBk\\nyBBefvllp0sSkThXo+C21vqstf2iVUyiOuaYY1i8eDEXXHAB1113HR999BGg5fAiUjta8l5Pjj76\\naN566y0WLFjAGWecoeXwIlJrGiqpRw0bNuSqq67C7/czZswY8vPztRxeRGpMHXc9C3XaBw8eBEr2\\n99ZyeBGpCXXc9Sy08VSItZaTTjrJuYJEJO4ouOtZaOOp0DxvgK1bt3LBBRewZs0aBysTkXih4K5n\\noY2nevToUW4P7+LiYnJzcx2sTETihYLbAenp6dx///2kpqaW/szr9ZKVlcV//vOfSk/TEREB3Zx0\\nTHp6Oj6fj5kzZwIwdOhQfvOb39CtWze6d+9OTk5OhafqiIgouB0Umrcdmgp49NFH07NnTyZPnkxB\\nQQFTp05l3bp1+Hw+bQ8rIqUU3A6qaBHOo48+itfrZeLEiXz44Ye8++67FBcX4/V6tUhHRACNcTuq\\nojMpjTFMmDCBG2+8kTVr1lBYWEgwGKSgoKDCRTpaNi+SfNRxOyg0NTDUcYcW4RhjOPXUU8td63a7\\nj1iko2XzIslJHbeDDj+TEijtnjMzM0lLS8PlcpGSksJll13GOeecU+75OkVeJDmp43ZYeno66enp\\nFXbPy5cvx+fzkZaWxpgxYzhw4ABz5syhQYMGQOUde1l+v183N0USjII7RlTUPY8bN640bBs2bMiI\\nESPo378/8+fPp2HDhqSnp5OTk8PcuXMZNGjQEcGsoRSRxKTgjhHVdc/Dhw8nNTWVG2+8kX79+rFw\\n4UI++OADRo8eTSAQ4J///CdnnnlmuWCu6I+Bglsk/im4Y0RovLuqYY3f/e53eDwebr31VrZt21Zt\\nMIczlCIi8cdEY3l1586d7YYNGyL+ulLixx9/pEmTJhUOhQDlwl9j3CLxwRiz0VrbOZxr1XHHoSZN\\nmgCwadMmTjzxRC6//HIuuugigArHtBXYIolF0wHj2IknnsgXX3zBwoULadu2raYHiiQJBXccu/ji\\ni3njjTf4+OOP6dKlC1u3biUlJQW3260xbZEEpuCOc7169eKvf/0rX3zxBbNmzcJay80336ypfyIJ\\nTMGdAPbv3196ok5xcTFQcoNS+5eIJCbdnEwAmZmZeL1eAoEAbrebadOmaUdBkQSm4E4AZeeAf/HF\\nFzz33HMABAIBZs6cqemAIglG87gTjN/vp3v37hQUFADg8XgoLi7WkneRGFeTedwa404w6enp5Obm\\nMmrUKBo0aFDt9EDt5y0SfzRUkoBCi266dOnC1VdfjTGmwumB2oRKJD4puBPYVVddRVpaGlu2bCE7\\nO5uuXbuW+702oRKJTxoqSXADBgzgv//7vzn55JNJT09n7dq1pb8LbUKlBTsi8UXBnSQKCwvZvXs3\\nPXv2ZPXq1cCRJ/Co2xaJD5pVkkS+++47srKy+Oabb1i0aBHdu3d3uiQROUSzSqRCrVq1YuXKlZx8\\n8slcdNFFrFy50umSRKQWFNxJpkWLFuTm5tK/f386dOjgdDkiUgsK7iT02WefcdZZZ7F9+3YKCwtZ\\ns2aN0yWJSA1oOmCSOXzu9pAhQ5g1axYvv/wyV1xxhdPliUgY1HEnmcPnbrdp04auXbsyZMgQXnrp\\nJafLE5EwKLiTzOFzt/v06cPbb79NRkYG1113HS+88ILTJYpINTQdMAmFDhBu2rQpeXl5ZGZmctZZ\\nZzFgwADWr1/P9u3badq0aaXP006DIpGnw4KlSqHQPXyfkjfeeINPPvmk0tDWviYisUFDJUmqon1K\\nGjRoQMeOHQF47LHHeOyxx6q8XkScoY47SYXGukMddNl9Sqy1rF+/nn/84x8UFBRw1113VXh9RUMu\\n6sJFok/BnaTKnppzeOAaY3jppZfweDzcfffdBAIB7rvvvnLXQ0n4FxYWYq3F5XLpqDSReqLgTmKh\\nfbsrkpKSwt///ndSU1N54IEHCAQCPPzww6XX//73vycQCJReHwwGtTWsSD1RcEul3G43zz//PA0a\\nNKBNmzZVXlvZYQ0iEnm6OSlVcrlcTJ06ld///vcAbNu2jWAwyNChQ/F6vRhjSE1NZcSIEUcMk+hY\\nNJHoUMed5GoyN/vzzz/nnHPO4ZprruHpp58mNze30udq+qBI9Ci4k1hNw/Xkk09mzJgxTJgwgUAg\\nwLRp0yq9XseiiUSPhkqSWE3nZhtjeOihh7jpppuYMWMGffv2paioqMJrdSyaSPQouJNYbcLV7/fz\\n0ksvYYzhnXfe4a677qrwutB0w5tvvpnrr7+eDz/8UOPdIhGioZIkVtVc7sqEuvTQ3O1jjz22yutn\\nzJhBQUEBwWBQc71FIkQdd5JLT09n3LhxYQdp2S7d6/WSlZXFt99+yy233EJ+fn65mSShkA8Gg0D5\\nud4iUnvquKVGKurSZ8+ezbPPPst7773Hli1bSm925uTk4PF4ynXcGu8WqTsFt9TY4SsuhwwZwkcf\\nfcRDDz1U+rNAIEBeXl5pyGs/E5HIUXBLnfn9fh577DGMMYT2dw911lUtqxeR2tEYt9RZ2RuWxhga\\nNWrEvHnzFNgiUaKOW+qsadOmGGNKZ4289dZbnH/++RQUFHDgwAE+/vhjnZwjEkHVBrcxpgGwCvAe\\nun6Otfa+aBcm8cHv9zN69GiCwSBut5ucnBzOP/98AK677jree+89vv32WwoLC3G73QwbNoyhQ4cq\\nwEXqIJyhkgIgy1p7FtAJ6GOM6RrdsiRelJ3yFwwGycvLK/3dzTffzFdffUV+fn7p6sxnnnmG7Oxs\\nLcQRqYNqg9uW2H/oYeqhr8ifMCxxqarVlz179iQnJ6fc9dZazeUWqaOwbk4aY9zGmPeBH4B3rLXr\\nKrhmuDFmgzFmw65duyJdp8So0Lzu8ePHV7gicuTIkTz11FOkpKRgjCkN+KZNm2oJvEgtmdD0rbAu\\nNqYxMB/4g7V2S2XXde7c2W7YsCEC5UmiWLduHR999BE7d+7kp59+4vHHH6e4uFhL4EUOMcZstNZ2\\nDufaGk0HtNb+BPiAPrWoS5JYly5d6NChA19//TWPPvoohYWFBINBCgoKqh020YEMIuWFM6ukOVBo\\nrf3JGJMG9AAeiXplklBCe3/n5+dT9r/y3G53lUvgdSCDyJHC6bhbArnGmA+AdykZ414U3bIk0ZRd\\npFNWdRtc1XTPcJFkEM6skg+stWdbaztaa39jrX2wPgqTxHL47JPBgwfTrFkznnzySTZt2hT287RB\\nlYhWTko9qWhXwe3bt5Odnc2WLVs4++yzw36eSLKr0ayScGlWiYTr559/pmHDhgAcOHCAo446yuGK\\nRJwRtVklIpEWCm2fz8dJJ53EqlWrHK5IJPYpuCUmtGvXjmbNmtG3b1+WL1/udDkiMU3BLY4pOz+7\\nVatW+Hw+TjnlFPr168eSJUucLk8kZunmpDii7PzssrsG5ubm0rNnTy699FLWrVtHp06dnC5VJOao\\n4xZHHD4/O7Rr4Keffsry5cu5//776dixo9NlisQkBbc4IjQ/2xgDlN81sEmTJowbNw6Xy8WXX37J\\n/PnzHa5WJLYouMURofnZI0aMwOv1VrrA5t577+Xyyy9n1qxZzhQqEoM0xi2OCR0kPHTo0EoX2Dz1\\n1FN8++23XH/99RQWFjJs2DCHqhWJHeq4xVF+v7/KVZFHHXUUixYtolevXtx44408/fTT5Z6rXQMl\\nGWnlpDimJjv/5efnc8UVV/DDDz+wevVqXnjhBUaOHEkwGNSe3pIQtHJS4kJNdv5r0KABc+fOZcmS\\nJWzYsIHbbruNoqKisPf0FkkkCm5xTE13/vN4PDRu3Jhly5ZRWFhY+nNjDJmZmRo6kaShm5PimNru\\n/JeZmYnL5SIYDALgcrl4/fXXmTx5soZOJCmo4xZHpaenV3uYwuEuuOACbrrpptLHRUVFPProoxo6\\nkaSh4Ja4dMMNN5CWloYxBmttafcNJR24DlyQRKahEolLoWGW3NxcVq9ezYoVKygsLMTtdjNlyhQN\\nk0hCU3BL3Aot4IGSqYW5ubm4XK5ywygiiUjBLQkhPT2dgwcPkp2dzbZt25g2bRput9vpskSiQmPc\\nkjCysrJ48MEHmTFjBtdddx1FRUVOlyQSFeq4JaHcc889eDwe/vKXvxAIBHjllVdITU11uiyRiFJw\\nS8K588478Xg8jB07lv/7v//TDBNJOBoqkYQ0ZswYtm7dWhraZffk0QpLiXfquCUhld11MC8vj6lT\\npzJnzhw2b95c7cZW1e1YKOI0BbcknMN3HRw7dixLliyhW7duNGnShIKCAoLBYOnGVmXDuSY7Foo4\\nRUMlknAO33UwLS2N++67j/fff58VK1YQDAZxuVwVbmxVkx0LRZyi4JaEU9Gug99///0R11TUTdd0\\nx0IRJ+ggBUlIZcepoSSQA4EAAG63m1WrVnHeeedV+1wNk0h9qclBChrjloRUdjn8xIkTKS4uBkr2\\n7r7kkktYuXIl3377LRkZGfzqV7+q9LkisUjBLQkvNPwRCARwu928/fbbLFy4kGAwyAknnIDf76dl\\ny5bAkd22um+JRQpuSXhlD2z4+uuvee655yguLsblcvHdd9+RkZHBihUr+Oabb8rNKMnJyWH06NGa\\nYSIxRzcnJSmEDmwYOnRo6c1Hr9fLlClT2LlzJxkZGcyfP7/cjJK5c+dqhonEJHXcklQqOi6tU6dO\\n9O7dm02bNuF2uwkGg7jdbgYNGsQ///nP0o5bM0wkVmhWiQjw4YcfsnPnTvr161ca1Lm5uQAa45Z6\\noVklIlWo6IbjmWeeyaJFiygqKsJaS1FRET6fL+zzMHUTU+qTgluSSlVL2jMzM0lNTaW4uJji4mI2\\nbdqE3++vNoi1TF7qm25OSlKpakl7eno6K1asYMiQIQC89tprdO/evdpdBLVMXuqbgluSSnVL2tPT\\n0+nYsSMuV8m/GgUFBbz44ot1ek2RSNNQiSSVimaVHC4zMxOv10sgEMBay/nnn1/n1xSJJM0qkYRW\\n25uGoedlZGRw3nnnYa1l+/bttG3bNorVSjLTrBIR6nbT8PD9SnJycrj77rtZuHAh2dnZ0SpZJCwa\\n45aEFambhn6/n927d9OyZUv69evH4sWLj/i9jkKT+qSOWxJW2c2lanvTsGzXnpqaygknnED//v2Z\\nM2cOl1xyiaYCiiPUcUvCCt00HD9+fK0DtWzXXlhYyODBg+nUqRODBw9m586dmgoojlDHLQmtrntr\\nH9619+3bl7Fjx7J27VpatGhR465eKywlEjSrRKQaVYXt3Llz2bx5M2lpadWGsYZVpCqaVSISQZV1\\n7dZapk2bxuLFi3nuueeqDeGKhlUU3FIbGuMWqSVjDHPnzqV3797cdNNNTJ06tfR3Fc000QpLiRR1\\n3CJ1kJaWxuuvv86VV17JyJEjCQQCdOnS5YghESjpuHNycsjLy9MYt9SJglukjrxeL6+99hpXX301\\nO3bs4ODBg+WGRGbOnMmMGTM0ti0Ro+AWiQCPx8Ps2bNxu92sXbuW1NTU0p8DGtuWiNIYt0iEpKSk\\nYIyhTZs2pKWlceGFF7Js2bJy51xqbFsiQcEtEmGtWrVi0KBB5Obm8vrrr9O1a9c6LwQSKUtDJSIR\\n5nK5eOaZZ/B4PEyaNIlAIMDjjz+uwJaIUXCLRIHL5WLKlCl4PB5ycnI49dRT+cMf/lDlc7SqUsJV\\nbXAbY9oAM4FfA0HgWWvt36JdmEi8M8YwefJkTjvtNK699tpywQzlT4/XqkqpiXA67iLgj9ba94wx\\njYCNxph3rLX/inJtIjEr3O7YGMOIESNKgzk/P5/U1FSMMRQVFZWGtFZVSk1UG9zW2u+B7w99v88Y\\nsxU4HlBwS1KqTXfs8/koKCjAWksgEMAYU/p96A9AXbegleRRo1klxpiTgLOBdRX8brgxZoMxZsOu\\nXbsiU51IDKrNVq6hcyyNMUBJJ152emAktqCV5BH27oDGmKOBlcAEa+28qq7V7oCSyGo7Hh0aXvnh\\nhx/IycnhtNNO46mnnlJ3LUAUdgc0xqQCc4GXqgttkURX21Pdy+4y2L59eyZMmMDJJ58czVIlQVXb\\ncZuS/7abAfxorR0dzouq4xap3v79+zn66KOx1pKfn09aWprTJYmDatJxhzPG3Q24Dsgyxrx/6Oui\\nOlUoIhx99NEA3HHHHfTu3Zt9+/Y5XJHEi2qD21q72lprrLUdrbWdDn29VR/FiSSDrl27smbNGnr3\\n7s3evXudLkfigPYqEXHY4MGD+cc//sGGDRvo0aMHe/bscbokiXEKbpEYMHDgQObOncsHH3xA3759\\nCQaDTpckMUx7lYg4rOwqzAULFhAIBHC51FNJ5RTcIg6qak7466+/TpcuXWjZsqXDVUqs0Z91kXpS\\n0QHCla3C3LNnDzfccAPnnnsuf/nLX8o9R0TBLVIPQp31PffcQ3Z2dmkQZ2Zm4na7S5fAh1ZRHnfc\\ncYwYMYIdO3bwyCOPkJWVpfCWUgpukXpQ1f4mZfcvCfH7/Tz++OOlj/Pz85k7d2691SuxTcEtUg9C\\nu/8dfu6kz+ejqKgIay1FRUWlge7z+SguLi73Gvn5+fVctcQq3ZwUqQeV7W9S2Xauod0ECwoKcLvd\\nTJgwgbFjxwJQXFyM2+126h9FYkDYuwPWhPYqEQlfZYcyVPTzLVu2cOWVVzJ79mw6duzoVMkSBTXZ\\nq0TBLRJHPv30U7p168b+/fuZOnUqN9xwg9MlSYREepMpEYkRu3fvZt++fRw8eJDf/e53PP/8806X\\nJA5QcIvEEZ/PR2FhYenjkSNHsnnzZgcrEifo5qRIHCl7MzM1NZXevXvTrl07p8uSeqbgFokjlc1O\\n+emnn9iyZQvnn3++wxVKfVBwi8SZskeghdxxxx28/PLLTJgwgUAgQNOmTcnLy6vR0WoSPzSrRCQB\\n5OXlcd555/HJJ59gjMFai8vlwuv16tT4OKFZJSJJpmnTpgwePBiAUDMWDAaPWF4viUHBLZIA/H4/\\nu3btwuPxlP7M5XLh8Xho2rTpEbsSVrRTocQPjXGLxLmye3qnpKQwbNgw2rZtC5R04qNHjy633zdQ\\n6R7gEh8U3CJxruzOgwBt27Zl3LhxBINBunbtSn5+PtbacsMmZXcqnDlzZoVL7iV2KbhF4lxlG1UV\\nFhaSkpJSOuadkpJS+rvQ9SkpKUyfPp3i4mJ133FEY9wicS40t3v8+PHlgtfr9TJx4sTSfb6LiopK\\nr8/JySE7O5u+fftSXFxc4T7hErvUcYskgIrmdgOsWbMGl8tVGs4PPvgg9957b+m4t9vtJiWlJAbK\\ndusS2xTcInGgsq1fq7u27DAKQK9evY4YE7/55ps54YQTNMYdRxTcIjGuqpPgw7n28CXyfr+/XJc9\\ndOhQBXac0Ri3SIyr6rzKcK5NT09n3Lhx5cK5oKCA9PR0li1bBqA53XFGHbdIjKts1khtr+3atSu3\\n3XYbU6ZM4fHHH+fNN9/UnO44o+AWiXGV7QhY22uNMTzxxBN4PB4mT55curdJ2Q5dYps2mRJJUtZa\\nrr/+embNmqUNqWJATTaZUsctkqSMMcyYMYMuXbrwn//8R7NK4ohuTookMWMMI0eOZNy4cXi9Xm6+\\n+eZyR6NpM6rYpI5bRICSxTrPP/88u3fv5tVXX2Xjxo3ajCpGKbhFBIDbbruNYDDIqFGjGDhwIF26\\ndKlwamFNFgNJdCi4RaTU7bffjtfr5ZZbbind37vs1MKaLAaS6NEYt4iU07FjRwYNGkRqaipvv/12\\nuc2rarIYSKJHHbeIlDq8o/Z4PAwfPrz0ZJ2aLAaS6FHHLSKlDu+oc3NzueCCC2jbti3Dhg0DqHAL\\nWc0+qV/quEWk1OEddbNmzfj0008pKirihRde4OWXXyY3N5dx48aVPkfj3vVPHbeIlCp7yEJOTg55\\neXml279CyeZUd911V7nOWuPe9U/BLSKl/H4/o0ePZvny5YwePZqmTZuSmppa7hqfz0d2dnZpeIe6\\ndLfbrXHveqKhEpEkV3Ze9uFqOW2wAAAMSklEQVTdc15eHj6fj5kzZ/Lee+/x7rvvlm5IVfaQ4Yr2\\n/NZc7yiy1kb865xzzrEiEvvWrFlj09LSrNvttmlpafaZZ54p93jNmjUVXuvxeKzb7a72usN/J5UD\\nNtgwM1ZDJSJJrKIOu6JZI1D+UOKBAwdWesiwxryjT0MlIkmsonnZlR08DL8cSuz3+5k/fz4FBQUE\\ng0GCwSATJ0484pxLjXlHh/bjFklytR2P9vv9vPLKK0yfPp0DBw6U29Mb0Bh3DWk/bhEJW1UddjjP\\nc7lc/O1vfyMYDJbetNSp8dGljltE6qTsAhy3240xhqKiIi3GqaGadNy6OSkidVL2pmW3bt0oKCjQ\\njcko01CJiNRZaNikffv2+Hw+rLWkpKToxmSUqOMWkYgZOHAg8+bNo0mTJrhcrnLL5SVyFNwiElED\\nBgzgww8/5MQTT6RPnz58++23TpeUcDRUIiIR16pVK3w+H2+++SbHH3+80+UkHAW3iERFixYtSvfw\\nXrt2LXl5eTRp0kTzuyNAwS0iUXfPPfeQm5uL2+2muLhYUwXrSGPcIhJ1c+bMoVWrVtrDJEKqDW5j\\nzHRjzA/GmC31UZCIJJ5jjz2W6dOn43KVRI7b7dZUwToIp+P+O9AnynWISILr0aMH77zzDqeccgrn\\nn38+Xbt2dbqkuFVtcFtrVwE/1kMtIpLgsrKyeP755+nevTtr166loKDA6ZLiksa4RaTe+P1+Lr74\\nYu6//36ysrLo0KED//u//+t0WXEnYsFtjBlujNlgjNmwa9euSL2siCSQsocsFBYWkpaWxu23385j\\njz3mdGlxJWLBba191lrb2VrbuXnz5pF6WRFJIIcfLPz0009z5ZVXMnbsWB5++GGny4sbmsctIvUm\\ntJNg2UU46enppKamcvfdd3PssccycuRIp8uMedUGtzHmFSATaGaM2QHcZ62dFu3CRCQxlT3+LHTc\\n2YwZMzj55JMZOHCg0+XFhWqD21p7VX0UIiLJo+zhC6FVlOPHjwegqKiIV155hWuvvRZjjMOVxibN\\nKhGRelfVSfCvvPIKQ4cO5fbbbycYDDpXZAzTGLeI1LuqToK/9tpr2bx5M4899hgFBQU8/fTTpSsu\\npYSCW0TqXUU3KUOMMUyaNAmv18vDDz9MIBBg2rRpuN1uByuOLTosWERikrWW8ePHM2nSJNavX0+H\\nDh2cLimqanJYsIJbRGLaN998Q5s2bQAIBoMJO2yiU95FJGGEQvuJJ55g4MCB2t8EBbeIxAm3282C\\nBQsYOHAg+fn5TpfjKAW3iMSFkSNH8swzz/D2229zySWX8PPPPztdkmMU3CISN4YPH8706dNZvnw5\\nF198McXFxU6X5AhNBxSRuHLDDTfg8XjIy8tL2imCCm4RiTtXX3116ffr16+nXbt2NG7c2MGK6peG\\nSkQkbu3bt4++ffuSnZ1NXl6e0+XUGwW3iMStRo0aMWvWLD766COysrJIlkNcFNwiEtcuuugiFi5c\\nyKeffkpmZib//ve/nS4p6hTcIhL3evbsyVtvvcVXX31FTk6O0+VEnW5OikhCyMzMZN26dbRv397p\\nUqJOHbeIJIwzzjiDlJQUvv/+e3r37s3nn3/udElRoeAWkYSzc+dONmzYQEZGBp9++qnT5UScgltE\\nEk6nTp1YsWIF+fn5ZGRksHXrVqdLiigFt4gkpLPOOgufz0cwGCQzM5N//etfTpcUMQpuEUlYZ5xx\\nBitXrqRTp040b97c6XIiRsEtIgmtffv2LFmyhObNmxMIBBJi2ETBLSJJY+zYsXTt2hW/3+90KXWi\\n4BaRpPGnP/2JFi1a0KtXL1atWuV0ObWm4BaRpNGmTRt8Ph+tW7emb9++rFixwumSakXBLSJJpVWr\\nVvh8Pk455RSuueYaDh486HRJNaYl7yKSdFq0aEFubi5fffUVaWlpTpdTY+q4RSQpNWvWjHPOOQeA\\nSZMmMW/ePIcrCp+CW0SSWiAQYP78+Vx55ZW8+uqrTpcTFgW3iCQ1j8fDkiVL6NatG1dffTWzZs1y\\nuqRqKbhFJOk1atSIt956i8zMTK6//nqmT5/udElVUnCLiABHHXUUixYtonfv3hQVFTldTpU0q0RE\\n5JC0tDTefPNNXK6SnnbHjh20bt3a4aqOpI5bRKSMUGhv3ryZdu3aMWnSJIcrOpKCW0SkAqeffjqX\\nXnopf/7zn3nooYecLqccDZWIiFQgNTWVF198EY/Hwz333EMgEOCBBx7AGON0aQpuEZHKpKSk8MIL\\nL5Camsr48eM566yzGDRokNNlKbhFRKridrt57rnnyMjIYMCAAU6XA2iMW0SkWi6Xi6FDh+J2u/nm\\nm2+4//77CQaDztXj2DuLiMShV199lQceeIARI0Y4Ft4aKhERqYE//vGP7N27l4ceeojCwkKmTZuG\\n2+2u1xoU3CIiNWCMYfz48Xg8Hu69914CgQAzZ84kJaX+4lTBLSJSC/fccw8ej4dXX32VAwcOcOyx\\nx9bbextrbcRftHPnznbDhg0Rf10RkVhTUFCA1+slPz8fYwxer7dWr2OM2Wit7RzOtbo5KSJSB16v\\nF2stV1xxBZdddlm9HIWm4BYRqSNjDAMGDGDx4sVceuml/Pzzz1F9PwW3iEgE3Hjjjfz9739nxYoV\\nXHTRRezfvz9q76XgFhGJkKFDh/LSSy+xevVqrrnmmqi9j2aViIhE0JAhQ/B6vZx00klRew913CIi\\nEXbZZZdx9tlnA/DMM8+Ql5cX0ddXcIuIRMnnn3/OqFGj6N69Oz/88EPEXlfBLSISJaeccgqLFi3i\\ns88+IzMzk++//z4ir6vgFhGJoh49evD222/z9ddfk5GRwY4dO+r8mgpuEZEoy8jIYMmSJezatYu1\\na9fW+fU0q0REpB5069aN7du306RJEwACgQAej6dWr6WOW0SknoRCe+nSpXTo0IFPPvmkVq8TVnAb\\nY/oYYz42xnxmjPlLrd5JREQAaNmyJfv27SMjI4N//etfNX5+tcFtjHEDTwJ9gdOBq4wxp9f4nURE\\nBIAzzzwTn88HQGZmJh988EGNnh9Ox30u8Jm19nNrbQCYDfSvYZ0iIlLG6aefzsqVK/F4PHTv3r1G\\nzw0nuI8HvinzeMehn4mISB20a9eOlStXcsstt9ToeeHMKjEV/OyI0xeMMcOB4YceFhhjttSoksTV\\nDNjtdBExQJ/DL/RZ/EKfxS/ah3thOMG9A2hT5nFr4LvDL7LWPgs8C2CM2RDuSQ6JTp9FCX0Ov9Bn\\n8Qt9Fr8wxoR9bFg4QyXvAv/PGHOyMcYDDAHeqG1xIiJSN9V23NbaImPMbcASwA1Mt9Z+FPXKRESk\\nQmGtnLTWvgW8VYPXfbZ25SQkfRYl9Dn8Qp/FL/RZ/CLszyIqp7yLiEj0aMm7iEiciWhwa2l8CWPM\\ndGPMD5oSCcaYNsaYXGPMVmPMR8aYUU7X5BRjTANjzHpjzOZDn8UDTtfkNGOM2xizyRizyOlanGSM\\n+dIY86Ex5v1wZpdEbKjk0NL4T4CelEwhfBe4ylpb84X4cc4YcyGwH5hprf2N0/U4yRjTEmhprX3P\\nGNMI2AgMSNL/XxjgKGvtfmNMKrAaGGWtrfs+n3HKGHMH0Bk4xlrbz+l6nGKM+RLobK0Na057JDtu\\nLY0/xFq7CvjR6TpigbX2e2vte4e+3wdsJUlX3toS+w89TD30lbQ3mYwxrYGLgeedriXeRDK4tTRe\\nqmSMOQk4G1jnbCXOOTQ08D7wA/COtTZpPwsgB/gzEHS6kBhggaXGmI2HVqFXKZLBHdbSeElOxpij\\ngbnAaGvtf5yuxynW2mJrbSdKViCfa4xJyqE0Y0w/4Adr7Uana4kR3ay1v6VkF9aRh4ZbKxXJ4A5r\\nabwkn0PjuXOBl6y185yuJxZYa38CfEAfh0txSjfg0kNju7OBLGPMi86W5Bxr7XeH/vcHYD4lQ8+V\\nimRwa2m8HOHQDblpwFZr7WSn63GSMaa5Mabxoe/TgB7ANmercoa1dpy1trW19iRKsmKFtfZah8ty\\nhDHmqEM37jHGHAX0AqqckRax4LbWFgGhpfFbgX8k69J4Y8wrgB9ob4zZYYy50emaHNQNuI6Sjur9\\nQ18XOV2UQ1oCucaYDyhpdN6x1ib1NDgBoAWw2hizGVgPvGmtXVzVE7RyUkQkzmjlpIhInFFwi4jE\\nGQW3iEicUXCLiMQZBbeISJxRcIuIxBkFt4hInFFwi4jEmf8PkJ+4zU26KWgAAAAASUVORK5CYII=\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x432 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.figure(figsize=(6,6));\\n\",\n    \"axes = plt.gca()\\n\",\n    \"axes.set_xlim([0,5])\\n\",\n    \"axes.set_ylim([0,5])\\n\",\n    \"plt.plot(x_tr, y_tr, '--k');\\n\",\n    \"plt.plot(x, y, 'ok', ms=3);\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie 3\\n\",\n    \"Policz korelacje: \\n\",\n    \"<ul>\\n\",\n    \"<li>pearson</li>\\n\",\n    \"<li>spearman</li>\\n\",\n    \"<li>kendall</li>\\n\",\n    \"</ul>\\n\",\n    \"\\n\",\n    \"dla zbioru:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\nAAAASUVORK5CYII=\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x432 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"f = lambda x: (x)\\n\",\n    \"x_tr = np.linspace(0., 5, 200)\\n\",\n    \"y_tr = f(x_tr)\\n\",\n    \"x = stats.uniform(1,3).rvs(100)\\n\",\n    \"y = f(x) + stats.norm(0,0.5).rvs(len(x))\\n\",\n    \"\\n\",\n    \"plt.figure(figsize=(6,6));\\n\",\n    \"axes = plt.gca()\\n\",\n    \"axes.set_xlim([0,5])\\n\",\n    \"axes.set_ylim([0,5])\\n\",\n    \"plt.plot(x_tr, y_tr, '--k');\\n\",\n    \"plt.plot(x, y, 'ok', ms=3);\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie 4\\n\",\n    \"Policz korelacje: \\n\",\n    \"<ul>\\n\",\n    \"<li>pearson</li>\\n\",\n    \"<li>spearman</li>\\n\",\n    \"<li>kendall</li>\\n\",\n    \"</ul>\\n\",\n    \"\\n\",\n    \"dla zbioru:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"f = lambda x: x**2\\n\",\n    \"x_tr = np.linspace(-10, 10, 200)\\n\",\n    \"y_tr = f(x_tr)\\n\",\n    \"x = stats.uniform(-3,6).rvs(100)\\n\",\n    \"y = f(x) + stats.norm(0,0.3).rvs(len(x))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\nW1QAAAAASUVORK5CYII=\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x432 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"plt.figure(figsize=(6,6));\\n\",\n    \"axes = plt.gca()\\n\",\n    \"axes.set_xlim([-3,3])\\n\",\n    \"axes.set_ylim([0,10])\\n\",\n    \"# axes.set_ylim([np.min(y),f(5)])\\n\",\n    \"plt.plot(x_tr, y_tr, '--k');\\n\",\n    \"plt.plot(x, y, 'ok', ms=3);\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie 5\\n\",\n    \"Wygeneruj zbiór tak by \\n\",\n    \"<ul>\\n\",\n    \"<li>korelacja pearsona wynosiła około 0.5</li>\\n\",\n    \"<li>korelacja spearmana wynosiła około 1</li>\\n\",\n    \"<li>korelacja kendalla wynosiła około 1</li>\\n\",\n    \"</ul>\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.8.5\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Z03_A_correlation.ipynb b/Z03_A_correlation.ipynb
--- a/Z03_A_correlation.ipynb	(revision 23b7d23cdb1c969d11dad11bcc79574ad6e5458b)
+++ b/Z03_A_correlation.ipynb	(date 1648214802564)
@@ -364,4 +364,4 @@
  },
  "nbformat": 4,
  "nbformat_minor": 2
-}
+}
\ No newline at end of file
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
--- /dev/null	(date 1648214639608)
+++ b/.idea/inspectionProfiles/Project_Default.xml	(date 1648214639608)
@@ -0,0 +1,18 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="PyPackageRequirementsInspection" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="ignoredPackages">
+        <value>
+          <list size="5">
+            <item index="0" class="java.lang.String" itemvalue="tensorflow" />
+            <item index="1" class="java.lang.String" itemvalue="transformers" />
+            <item index="2" class="java.lang.String" itemvalue="sklearn" />
+            <item index="3" class="java.lang.String" itemvalue="torch" />
+            <item index="4" class="java.lang.String" itemvalue="numpy" />
+          </list>
+        </value>
+      </option>
+    </inspection_tool>
+  </profile>
+</component>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1648214639628)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1648214639628)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1648214639640)
+++ b/.idea/misc.xml	(date 1648214639640)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8 (podstawy_sztucznej_inteligencji)" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1648214639656)
+++ b/.idea/modules.xml	(date 1648214639656)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/podstawy_sztucznej_inteligencji.iml" filepath="$PROJECT_DIR$/.idea/podstawy_sztucznej_inteligencji.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: Z04_A_gradient_descent.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie\\n\",\n    \"\\n\",\n    \"Napisz (od podstaw) algorytm znajdowania minimum metodą gradientową.\\n\",\n    \"Zaprezentuj jego działanie na przykładzie funkcji $f(x)=x^2$, startując z punktu $x=2$. Zilustruj całą sytuacje oznaczając na wykresie 5 pierwszych iteracji.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"import numpy as np\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"\\n\",\n    \"f = lambda x: x**2\\n\",\n    \"\\n\",\n    \"x = np.linspace(-5, 5, 200)\\n\",\n    \"y = f(x)\\n\",\n    \"plt.plot(x, y, '--k', ms=10);\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def step_gradient_1d(x_current, learningRate):\\n\",\n    \"    x_gradient = 2*x_current\\n\",\n    \"    new_x = ??\\n\",\n    \"    \\n\",\n    \"    plt.arrow(x_current, f(x_current), - (learningRate * x_gradient), -(f(x_current)-f(new_x)),\\n\",\n    \"              head_width=0.05, head_length=0.5,ec=\\\"red\\\")\\n\",\n    \"        \\n\",\n    \"    return new_x\\n\",\n    \"def gradient_descent_runner_1d(starting_x, learning_rate, num_iterations):\\n\",\n    \"    x = starting_x\\n\",\n    \"    print(x)\\n\",\n    \"    for i in range(num_iterations):\\n\",\n    \"        x = step_gradient_1d(x,learning_rate)\\n\",\n    \"        #print(x)\\n\",\n    \"    return x\\n\",\n    \"\\n\",\n    \"learning_rate = 0.2\\n\",\n    \"initial_x = 5 \\n\",\n    \"num_iterations = 30\\n\",\n    \"x = gradient_descent_runner_1d(initial_x, learning_rate, num_iterations)\\n\",\n    \"\\n\",\n    \"plt.show()\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie\\n\",\n    \"Wykonaj powyższe zadania dla \\n\",\n    \"  * learning_rate = 0.001\\n\",\n    \"  * learning_rate = 0.1\\n\",\n    \"  * learning_rate = 0.2\\n\",\n    \"  * learning_rate = 0.5\\n\",\n    \"  * learning_rate = 0.9\\n\",\n    \"  * learning_rate = 0.99\\n\",\n    \"  * learning_rate = 0.999\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie 2\\n\",\n    \"\\n\",\n    \"Napisz (od podstaw) algorytm znajdowania minimum metodą gradientową.\\n\",\n    \"Zaprezentuj jego działanie na przykładzie funkcji \\n\",\n    \"\\n\",\n    \"$$\\n\",\n    \"f(x,y)=4*x^2-2x+y^2,\\n\",\n    \"$$ \\n\",\n    \"\\n\",\n    \"startując z punktu $(x,y)=(2,2)$. Zilustruj całą sytuacje oznaczając na wykresie kilka pierwszych iteracji.\\n\",\n    \"Wykonaj obrazek 3D.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\n\",\n      \"text/plain\": [\n       \"<matplotlib.figure.Figure at 0x23503ce0668>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"###########\\n\",\n    \"\\n\",\n    \"import numpy as np\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"#from mpl_toolkits.mplot3d import Axes3D\\n\",\n    \"from matplotlib import cm\\n\",\n    \"from mpl_toolkits.mplot3d import axes3d\\n\",\n    \"#%matplotlib notebook\\n\",\n    \"\\n\",\n    \"plt.close('all')\\n\",\n    \"\\n\",\n    \"fun = lambda x,y: 4*x**2+y**2\\n\",\n    \"\\n\",\n    \"fig = plt.figure()\\n\",\n    \"ax = fig.gca(projection='3d')\\n\",\n    \"\\n\",\n    \"# Make data.\\n\",\n    \"X = np.arange(-7, 7, 0.25)\\n\",\n    \"Y = np.arange(-7, 7, 0.25)\\n\",\n    \"X, Y = np.meshgrid(X, Y)\\n\",\n    \"Z = fun(X, Y)\\n\",\n    \"\\n\",\n    \"# Plot the surface.\\n\",\n    \"surf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,\\n\",\n    \"                       linewidth=0.01, antialiased=True, alpha=0.3)\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"#####################################\\n\",\n    \"\\n\",\n    \"def step_gradient_2d(x_current, y_current, learningRate):\\n\",\n    \"    x_gradient = ??\\n\",\n    \"    y_gradient = 2*y_current\\n\",\n    \"    \\n\",\n    \"    new_x = ??\\n\",\n    \"    new_y = ??\\n\",\n    \"    \\n\",\n    \"    ax.quiver(x_current, y_current, (fun(x_current, y_current)) ,\\n\",\n    \"              - (learningRate * x_gradient), - (learningRate * y_gradient), \\n\",\n    \"              (-(fun(x_current,y_current)-fun(new_x,new_y)))) \\n\",\n    \"    \\n\",\n    \"    return [new_x, new_y]\\n\",\n    \"\\n\",\n    \"def gradient_descent_runner_2d(starting_x, starting_y, learning_rate, num_iterations):\\n\",\n    \"    x = starting_x\\n\",\n    \"    y = starting_y\\n\",\n    \"    for i in range(num_iterations):\\n\",\n    \"        x, y = step_gradient_2d(x, y, learning_rate)\\n\",\n    \"        #print(x, y)\\n\",\n    \"    return [x, y]\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"learning_rate = 0.9\\n\",\n    \"initial_x = 0 # initial y-intercept guess\\n\",\n    \"initial_y = 5 # initial slope guess\\n\",\n    \"num_iterations = 10\\n\",\n    \"[x, y] = gradient_descent_runner_2d(initial_x, initial_y, learning_rate, num_iterations)\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"#####################################\\n\",\n    \"\\n\",\n    \"plt.plot([initial_x],[initial_y],[fun(initial_x,initial_y)],\\\"ok\\\")\\n\",\n    \"plt.show()\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie\\n\",\n    \"Wykonaj analogiczne zadanie ale z:\\n\",\n    \"  * initial_x = 5 \\n\",\n    \"  * initial_y = 0 \\n\",\n    \"  * num_iterations = 10\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie\\n\",\n    \"Wykonaj analogiczne zadanie ale z obrazkiem 2d\\n\",\n    \"\\n\",\n    \"$$\\n\",\n    \"f(x,y)=x^2-2x+y^2,\\n\",\n    \"$$ \\n\",\n    \"\\n\",\n    \"oraz\\n\",\n    \"\\n\",\n    \"$$\\n\",\n    \"f(x,y)=4*x^2-2x+y^2,\\n\",\n    \"$$ \\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\n\",\n      \"text/plain\": [\n       \"<matplotlib.figure.Figure at 0x23503cb18d0>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"import numpy as np\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"\\n\",\n    \"chi2 = lambda x,y: x**2-2*x+y**2\\n\",\n    \"\\n\",\n    \"x = np.arange(-10,10,0.02)\\n\",\n    \"y = np.arange(-10,10,0.02)\\n\",\n    \"\\n\",\n    \"X,Y= np.meshgrid(x,y)\\n\",\n    \"\\n\",\n    \"Z = chi2(X,Y)\\n\",\n    \"\\n\",\n    \"plt.figure()\\n\",\n    \"CS = plt.contour(X,Y,Z)\\n\",\n    \"\\n\",\n    \"plt.plot([5],[5],\\\"o\\\")\\n\",\n    \"\\n\",\n    \"#####################################\\n\",\n    \"\\n\",\n    \"def step_gradient_2d(x_current, y_current, learningRate):\\n\",\n    \"    x_gradient = 2*x_current-2\\n\",\n    \"    y_gradient = 2*y_current\\n\",\n    \"    \\n\",\n    \"    new_x = x_current - (learningRate * x_gradient)\\n\",\n    \"    new_y = y_current - (learningRate * y_gradient)\\n\",\n    \"    \\n\",\n    \"    plt.arrow(x_current, y_current, - (learningRate * x_gradient), - (learningRate * y_gradient), head_width=0.05, head_length=0.5,ec=\\\"red\\\")\\n\",\n    \"    \\n\",\n    \"    return [new_x, new_y]\\n\",\n    \"def gradient_descent_runner_2d(starting_x, starting_y, learning_rate, num_iterations):\\n\",\n    \"    x = starting_x\\n\",\n    \"    y = starting_y\\n\",\n    \"    for i in range(num_iterations):\\n\",\n    \"        x, y = step_gradient_2d(x, y, learning_rate)\\n\",\n    \"        #print(x, y)\\n\",\n    \"    return [x, y]\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"learning_rate = 0.1\\n\",\n    \"initial_x = 5 # initial y-intercept guess\\n\",\n    \"initial_y = 5 # initial slope guess\\n\",\n    \"num_iterations = 1000\\n\",\n    \"[x, y] = gradient_descent_runner_2d(initial_x, initial_y, learning_rate, num_iterations)\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"#####################################\\n\",\n    \"plt.axis('equal')\\n\",\n    \"plt.show()\\n\",\n    \"\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie 3\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Napisz (od podstaw) algorytm znajdowania minimum metodą gradientową.\\n\",\n    \"Zaprezentuj jego działanie na przykładzie funkcji $f(x)=x^2-y^2$, startując z punktu $x=5$ oraz $x=1$. Zilustruj całą sytuacje oznaczając na wykresie 5 pierwszych iteracji.\\n\",\n    \"\\n\",\n    \"Wykonaj rysunek:\\n\",\n    \"  \\n\",\n    \"  * 2D conture plot\\n\",\n    \"  * 3D \\n\",\n    \"  \\n\",\n    \"Co się stanie gdy zaczniemy z punktu $x=5$ oraz $x=0$? \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.8.5\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Z04_A_gradient_descent.ipynb b/Z04_A_gradient_descent.ipynb
--- a/Z04_A_gradient_descent.ipynb	(revision 23b7d23cdb1c969d11dad11bcc79574ad6e5458b)
+++ b/Z04_A_gradient_descent.ipynb	(date 1648214639528)
@@ -351,4 +351,4 @@
  },
  "nbformat": 4,
  "nbformat_minor": 2
-}
+}
\ No newline at end of file
Index: .idea/podstawy_sztucznej_inteligencji.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/podstawy_sztucznej_inteligencji.iml b/.idea/podstawy_sztucznej_inteligencji.iml
new file mode 100644
--- /dev/null	(date 1648214639676)
+++ b/.idea/podstawy_sztucznej_inteligencji.iml	(date 1648214639676)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="jdk" jdkName="Python 3.8 (podstawy_sztucznej_inteligencji)" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1648214639688)
+++ b/.idea/vcs.xml	(date 1648214639688)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: Z05_A_linear_regression.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Regresja liniowa\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"import numpy as np\\n\",\n    \"import pandas as pd\\n\",\n    \"import scipy.stats as stats\\n\",\n    \"import sklearn.linear_model as lm\\n\",\n    \"import matplotlib.pyplot as plt\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Proszę narysować wykres dowolnej funkcji na odcinku $[0,3]$.\\n\",\n    \"\\n\",\n    \"Będzie to model, który będziemy chcieli znaleźć.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\nVwGYXQAAAABJRU5ErkJggg==\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x432 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"f = lambda x: ((x*2-1)*(x**2-2)*(x-2)+3)\\n\",\n    \"x_tr = np.linspace(0, 3, 200)\\n\",\n    \"y_tr = f(x_tr)\\n\",\n    \"plt.figure(figsize=(6,6));\\n\",\n    \"axes = plt.gca()\\n\",\n    \"axes.set_xlim([0,3])\\n\",\n    \"axes.set_ylim([0,8])\\n\",\n    \"plt.plot(x_tr[:200], y_tr[:200], '--k');\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Proszę wylosować kilka punktów z otoczenia funkcji $f(x)$.\\n\",\n    \"\\n\",\n    \"Na ich podstawie będziemy wykonywać naszej presykcji.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x432 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"x = stats.uniform(0,3).rvs(100)\\n\",\n    \"y = f(x) + stats.norm(0,0.2).rvs(len(x))\\n\",\n    \"plt.figure(figsize=(6,6));\\n\",\n    \"axes = plt.gca()\\n\",\n    \"axes.set_xlim([0,3])\\n\",\n    \"axes.set_ylim([0,8])\\n\",\n    \"plt.plot(x_tr, y_tr, '--k');\\n\",\n    \"plt.plot(x, y, 'ok', ms=10);\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Nauczmy prosty model regresji liniowej\\n\",\n    \"\\n\",\n    \"$$\\n\",\n    \"y=a\\\\cdot x + b\\n\",\n    \"$$\\n\",\n    \"\\n\",\n    \"na naszych danych.\\n\",\n    \"\\n\",\n    \"Oraz narysujmy prostą regresji.\\n\",\n    \"My narazie urzyjemy metody opartej na rozwiązaniu układu równań liniowych.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"M1 = np.vstack( (np.ones_like(x), x) ).T\\n\",\n    \"p1 = np.linalg.lstsq(M1, y, rcond=None)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Definiujemy naszą funkcję regresji\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"f_lr_1 = lambda x: p1[0][1] * x +p1[0][0]\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"iVBORw0KGgoAAAANSUhEUgAAAXIAAAFpCAYAAACBNaNRAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4yLCBo\\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvhp/UCwAAIABJREFUeJzt3Xt0VOW9N/Dvk2RymSQDClisiOgg\\nIpeAENCetrbFeomiRQ3VQiIoOpIEalPe9a6zzjnrrafvec96zzovB09nuIjxAol4IYJVy1jrpVVb\\nyxAQh5tihgKCIAEkTEhIJpPn/SOJhZDM7JnZM8/ee76ftWYZzJ6Z785kfnnm2c9FSClBRETmlaE6\\nABERJYaFnIjI5FjIiYhMjoWciMjkWMiJiEyOhZyIyOQ0FXIhRLUQYpcQYqcQ4gUhRG6ygxERkTZR\\nC7kQ4jIAPwdQLKWcACATwP3JDkZERNpo7VrJApAnhMgCYAfwZfIiERFRLKIWcinlYQD/D8BBAEcA\\nNEsp30p2MCIi0iYr2gFCiIsA/ATAlQBOAVgvhCiTUtb1Oc4FwAUA+fn5U8eOHZuEuETm9FXLVzh0\\n+hCuHXYt7Da76jgpdfDgQRw/fhyRlgMRQmDo0KEYOXJkCpMZy9atW49LKYfFc18Rba0VIcRsALdJ\\nKRf0/PsBADdIKSsHuk9xcbFsaGiIJw+R5YS7whjtHo3LHZfj/QffVx0n5RwOB4LBoKbjmpubU5DI\\nmIQQW6WUxfHcV0sf+UEANwgh7EIIAeAmAHvieTKidPS7z3+H/af2Y/H0xaqjKNHS0qLrcXQhLX3k\\nmwHUA9gGYEfPfVYnOReRZbh9blxWeBlmjZ2lOooSBQUFuh5HF9I0akVK+Ssp5Vgp5QQpZbmUsj3Z\\nwYisYE/THry9721UFFfAlmlTHUeJsrIy2GyRz91ms6G8vDxFiayHMzuJksjj8yA7MxuPTH1EdRRl\\nlixZoqmQV1dXpyiR9bCQEyVJ89lmrPlkDe6fcD8uyb9EdRxlnE4n6uvrYbfbLyjoNpsNdrsd9fX1\\ncDqdihKaHws5UZI8t/05nAmdSduLnOcqKSmB3++Hy+WCw+FARkYGHA4HXC4X/H4/SkpKVEc0tajD\\nD+PB4YeU7rpkF67xXIOh9qH4aMFHquOQCSR7+CERxej3jb9H48lGtsYpJVjIiZLA7XNjeMFwlI4r\\nVR2F0gALOZHOPj/xObyNXjw69VFkZ2arjkNpgIWcSGfLtyxHVkYWHp36qOoolCZYyIl01NLRgme3\\nP4vZ42bj0sJLVcehNMFCTqSjtZ+sxen207zISSnFQk6kEyklPD4Ppl46FTeMuEF1HEojUdcjJyJt\\n3vnbO9hzfA+e+8lz6F4olCg12CIn0onb58ZQ+1DcN+E+1VEozbCQE+ngb1//Da9/9jpcU1zIzcpV\\nHYfSDAs5kQ5WbFmBDJGBimkVqqNQGmIhJ0rQmY4zqPm4Bvdcew9GOEaojkNpiIWcKEHP73gep86e\\n4pBDUoaFnCgBUkq4fW5M+tYkfG/k91THoTTFQk6UgD8d+BN2HtuJxdMXc8ghKcNCTpQAt8+Ni/Mu\\nxpyJc1RHoTTGQk4Up4PNB/Hqp6/i4eseRp4tT3UcSmMs5ERxWrllJQCgclql4iSU7ljIieLQFmrD\\nU9uewl3X3IUrBl+hOg6lORZyoji8uPNFnGg7wSGHZAgs5EQx6h1yOH7YePxo1I9UxyFiISeK1V++\\n+As+PvoxFk1fxCGHZAgs5EQxcvvcGJQzCGVFZaqjEAFgISeKyZfBL/HKnlfw0HUPoSC7QHUcIgAs\\n5EQxWdWwCuGuMKqmVamOQvQNFnIijdo72/Hk1idx+9W3w3mxU3Ucom+wkBNptH73ehw7c4xDDslw\\nWMiJNHL73BgzZAxudt6sOoopBAIBVFZWwuFwICMjAw6HA5WVlQgEAqqjWU7UQi6EuEYIsf2c22kh\\nxC9SEY7IKHyHffAd9mHRtEXIEGz/ROP1elFUVISamhoEg0FIKREMBlFTU4OioiJ4vV7VES0l6m+k\\nlPIzKeVkKeVkAFMBtALYmPRkRAbi9rlRmF2IeZPnqY5ieIFAAKWlpWhtbUUoFDrve6FQCK2trSgt\\nLWXLXEexNi1uAhCQUh5IRhgiI/qq5Su8tPMlzJ88H44ch+o4hrd06dILCnhfoVAIy5YtS1Ei64u1\\nkN8P4IX+viGEcAkhGoQQDU1NTYknIzKI1VtXI9QVwqLpi1RHMYW6ujpNhby2tjZFiaxPcyEXQmQD\\nuAvA+v6+L6VcLaUsllIWDxs2TK98REp1hDuwsmElbnXeijFDxqiOYwotLS26HkfRxdIiLwGwTUr5\\nVbLCEBnNhj0bcKTlCIccxqCgQNuMV63HUXSxFPKfYYBuFSKrcvvccF7kRMnVJaqjmEZZWRlsNlvE\\nY2w2G8rLy1OUyPo0FXIhhB3AzQA2JDcOkXFsO7INf/niL6iaVsUhhzFYsmSJpkJeXV2dokTWp+m3\\nU0rZKqUcIqVsTnYgIqNw+9yw2+x48LoHVUcxFafTifr6etjt9gsKus1mg91uR319PZxOLnOgFzYz\\niPrRdKYJL+x4AQ8UPYDBuYNVxzGdkpIS+P1+uFyu82Z2ulwu+P1+lJSwq0pPWaoDEBlRzbYatIfb\\nOeQwAU6nEx6PBx6PR3UUy2OLnKiPzq5OrGxYiRlXzsD4S8arjkMUFQs5UR+//fS3+OL0FxxySKbB\\nQk7Uh9vnxhWDrsCdY+5UHYVIExZyonP4v/LjTwf+hMpplcjMyFQdh0gTFnKic3h8HuRm5WLBdQtU\\nRyHSjIWcqMfJtpOo89dh7sS5GGIfojoOkWYs5EQ9nvn4GbR1tvEiJ5kOCzkRgHBXGMu3LMf3R34f\\nk4ZPUh2HKCYs5EQAfvf577D/1H62xsmUWMiJ0D3kcIRjBGaNnaU6ClHMWMgp7e1p2oO3972NiuIK\\n2DIjr9pHZEQs5JT2PD4PcjJz8MiUR1RHIYoLCzmlteazzVjzyRrcP+F+DMvnFoVkTizklNae2/4c\\nzoTO8CInmRoLOaWtLtkFzxYPvjPiO5j67amq4xDFjYWc0tabjW+i8WQjW+M6CAQCqKysPG8TicrK\\nSgQCAdXR0gILOaUtt8+N4QXDce+4e1VHMTWv14uioiLU1NQgGAxCSolgMIiamhoUFRXB6/Wqjmh5\\nLOSUlvae2Is3G9/EwqkLkZ2ZrTqOKQUCAcydOxe33347WltbEQqFzvt+KBRCa2srSktL2TJPMhZy\\nSkvLfcthy7Dh0eJHVUcxJa/Xi4kTJ2LdunVRjw2FQli2bFkKUqUvFnJKO8H2IJ7d/ixmj5+N4QXD\\nVccxnUAggLvvvhttbW2ajg+FQqitrU1yqvTGQk5pZ+0naxHsCPIiZ5x+9atfob29Pab7tLS0JCkN\\nASzklGaklPBs8aD428W4/rLrVccxpZdffjnm+xQUFCQhCfXKUh2AKJXe3vc2Pj3+KdbMWgMhhOo4\\nptT3omY0NpsN5eXlSUpDAFvklGbcPjeG2YfhvvH3qY6SNmw2G6qrq1XHsDQWckob+77ehzf2vgHX\\nVBdysnJUxzGtrCztH+Ttdjvq6+vhdDqTmIhYyCltrNiyAhkiAwuLF6qOYmqjRo3SdNygQYPg9/tR\\nUlKS3EDEQk7p4UzHGTz98dO459p7MMIxQnUcUzty5Iim48LhMFviKcJCTmnh+R3P49TZUxxyqIPW\\n1lZdj6PEsZCT5Ukp4fa5MXn4ZHxv5PdUxzE9rUMJOeQwdVjIyfL+dOBP2HlsJxZPX8whhzooKyuD\\nzRZ5SzwOOUwtTYVcCDFYCFEvhPhUCLFHCPGdZAcj0ovb58aQvCH42YSfqY5iCUuWLNFUyDnkMHW0\\ntsj/G8CbUsqxACYB2JO8SET6Odh8EK9++ioenvIw8mx5quNYgtPpRH19Pex2+wUF3WazccihAlEL\\nuRDCAeBGAE8DgJSyQ0p5KtnBiPSwcstKAEBFcYXiJNZSUlICv98Pl8t13mYSLpeLQw4VEFLKyAcI\\nMRnAagC70d0a3wrgMSnlmT7HuQC4AGDkyJFTDxw4kJTARFq1hdpw+bLLceMVN2LDfRtUxyGKSAix\\nVUpZHM99tXStZAGYAmCllPI6AGcA/GPfg6SUq6WUxVLK4mHDuBs5qffCzhdwou0EhxyS5Wkp5IcA\\nHJJSbu75dz26CzuRYfUOOZxwyQT8cNQPVcchSqqohVxKeRTAF0KIa3r+103o7mYhMqw/f/FnbD+6\\nHYumLeKQQ7I8ravfLAbwvBAiG8A+AA8mLxJR4tw+NwbnDkZZUZnqKERJp6mQSym3A4irE54o1Q6f\\nPoxXdr+Cx65/DPnZ+arjECUdZ3aS5axqWIUu2YWq6VWqoxClBAs5WUp7ZztWb1uNO8bcgasuukp1\\nHEsJBAKorKw8b9x4ZWUlAoGA6mhpj4WcLOXlXS/j2JljHHKoM6/Xi6KiItTU1CAYDEJKiWAwiJqa\\nGhQVFcHr9aqOmNZYyMlS3D43rhlyDX581Y9VR7GMQCCA0tJStLa2XrBfZygUQmtrK0pLS9kyV4iF\\nnCxj86HN2PLlFiyavggZgr/aelm6dGnUDZdDoRCWLVuWokTUF3/byTLcPjcKswsxb9I81VEspa6u\\nTlMhX7NmTYoSUV8s5GQJR1uO4uVdL2P+5PkozClUHcdSWlpaNB/HvnI1WMjJElZvXY1QVwiLpi9S\\nHcVyYtnph33larCQk+l1hDuwqmEVbht9G8YMGaM6juVo2RGoF/vK1WAhJ9PbsGcDjrQc4ZDDJNGy\\nI1CvUCiE2traJCeivljIyfTcPjdGXzwat42+TXUUS+rdEUgrrX3qpB8WcjK1bUe24S9f/AVV06o4\\n5DCJSkpKkJ+vbd2aWPrUSR/8zSdTc/vcyLfl48HJXJAz2R544AFNmy6Xl5enKBH1YiEn02o604QX\\ndryAByY9gEG5g1THsTwtfeU2mw3V1dUpSkS9WMjJtGq21aA93M4hhynS21dut9svKOg2mw12ux31\\n9fVwOp2KEqYvFnIypc6uTqxoWIGbrrwJ44aNUx0nbZSUlMDv98Plcp23CqLL5YLf70dJSYnqiGlJ\\n6w5BRIby6qev4tDpQ/CUeFRHSTtOpxMejwceD3/2RsEWOZmS2+fGqMGjMHPMTNVRiJRjISfT8X/l\\nx/sH3kdlcSUyMzJVxyFSjoWcTMe92Y28rDwsmLJAdRQiQ2AhJ1M52XYSz+94HnMnzsXFeRerjkNk\\nCCzkZCpPb3sabZ1tWHw911Uh6sVCTqYR7gpjRcMK3HjFjSj6VpHqOGmJGzAbEws5mcYbe9/A/lP7\\nucqhItyA2bhYyMk03D43RjhGYNbYWaqjpB1uwGxsLORkCrubduOdv72DiuIKZGVwHluy9e1Cufba\\na9HW1hbxPtxUQh0WcjIFj8+DnMwcPDLlEdVRLK+/LpRQKAQpZcT7cVMJddi0IcNrPtuMtZ+sxf0T\\n7sew/GGq41jauV0o8eCmEmqwRU6G9+z2Z3EmdIYXOVNg6dKlF/SBx4KbSqjBQk6G1iW7sHzLcvzD\\n5f+Aqd+eqjqO5dXV1cVdyLmphDos5GRobza+icaTjWyNp0giXSPcVEIdFnIyNLfPjUsLLsW9196r\\nOkpaiKdrhJtKqKepkAsh9gshdgghtgshGpIdiggA9p7Yizcb38TC4oWwZUbeYoz0UVZWFnU7NyEE\\nsrOzuamEgcQyauVHUsrjSUtC1Mdy33LYMmxwTXWpjpI2lixZgjVr1kTsJ8/Ly4Pf72fr20DYtUKG\\nFGwP4tntz+Kn43+K4QXDVcdJG9yX05y0FnIJ4C0hxFYhRL/NIyGESwjRIIRoaGpq0i8hpaW1n6xF\\nsCPIi5wKcF9O8xHRZmsBgBDi21LKL4UQlwD4A4DFUsr3Bzq+uLhYNjSwK53i0yW7MG75ODhyHPA9\\n4lMdhyglhBBbpZTF8dxXU4tcSvllz3+PAdgIYHo8T0akxdv73sZnJz5ja5xIo6iFXAiRL4Qo7P0a\\nwC0AdiY7GKUvt8+NS/IvwU/H/1R1FCJT0DJq5VsANgoheo9fJ6V8M6mpKG3t+3offrf3d/jn7/8z\\ncrJyVMchMoWohVxKuQ/ApBRkIcJy33JkZmRiYfFC1VGITIPDD8kwznScwTPbn8E9196DyxyXqY5D\\nZBos5GQYdf46nDp7ihc5iWLEQk6GIKWE2+fG5OGT8d3Lv6s6DpGpsJCTIfxx/x+xq2kXFk9fjJ4L\\n60SkEQs5GYLb58aQvCH42YSfqY5CZDos5KTcgVMH8NvPfouHpzyMPFue6jhEpsNCTsqtbFgJAKic\\nVqk4CQHd+3ZWVlaet85KZWUlAoGA6mg0ABZyUqot1Iantj2FWWNnYeSgkarjpD2v14uioiLU1NQg\\nGAxCSolgMIiamhoUFRXB6/Wqjkj9YCEnpV7Y+QJOtp3kkEMDCAQCKC0tRWtr6wXrkYdCIbS2tqK0\\ntJQtcwNiISdleoccTrhkAn5wxQ9Ux0l7S5cujbrxcigUwrJly1KUiLRiISdl/vzFn7H96HYOOTSI\\nuro6TYW8trY2RYlIKxZyUsbtc2Nw7mDMnThXdRQC0NLSoutxlDos5KTE4dOH8cruV7DgugXIz85X\\nHYcAFBQU6HocpQ4LOSmxqmEVumQXhxwaSFlZ2QX7dPZls9lQXl6eokSkFQs5pVx7Zzue3PokZo6Z\\niasuukp1HOqxZMkSTYW8uro6RYlIKxZySrmXdr2EptYmDjk0GKfTifr6etjt9gsKus1mg91uR319\\nPZxOp6KENBAWckqp3iGHY4eOxY+v+rHqONRHSUkJ/H4/XC7XeTM7XS4X/H4/SkpKVEekfrCQU0pt\\nPrwZDV82YNG0RRxyaECBQABLly7F2rVrEQwGkZ+fj7lz56K6upotcQNjIaeUcvvcKMwuxAOTHlAd\\nhfrg9HzzYiGnlDnachTrd63Hg5MfRGFOoeo4aau/RbHKyspwzz33cHq+SbGQW5BRV697suFJhLpC\\nqJpepTRHOhuo1b1u3TqcPXs24n05Pd+4hJRS9wctLi6WDQ0Nuj8uRef1elFaWopQKHRey8pms8Fm\\ns6G+vl7JBauOcAeueOIKTB4+Gd65/IiuQiAQQFFREVpbW+N+DIfDgebmZh1TUS8hxFYpZXE892WL\\n3EKMvHrdK7tfwdGWoxxyqJCWRbGi4fR8Y2Iht5Bkr16XSJeN2+fG6ItH47bRt8X13JQ4LYtiRcPp\\n+cbEQm4hWlevW758OQoKCjBhwgQUFBRoKsqJjGjY+uVWfHToI1RNq0KG4K+cKom2pjk937jYR24h\\nGRkZSOT1HKgfXUvfqt1uh9/v73es8fxX56N+dz0O//IwBuUOijsfJcbhcCAYDMZ9/0ivMSWOfeQE\\nIPGPvQP1oyfSZdN0pgkv7nwR8ybNYxFXTMuiWP3h9HzjYyG3kHjfqH31LcqxdNn07aJ5attTaA+3\\nY9H0RQnnosRoWRSrL07PNwd2rViIHsPLep07zCzWLpveLpqXXn4JFXsrMHboWPyh/A8JZ6LEeb1e\\n3HXXXejs7Ix4nM1mg8vlgsfjSVEyYteKRQUCAcydOxfZ2dkQQkAIgezsbJSVlfV7UTLS6nWxOvfC\\nWKxdNud20Rzaf4hDDg2kpKQEv//975GZmRnxuKysLC5XayIs5Abl9Xoxfvx4rFu37rxujVAohOef\\nfx7jx4/vd6RI39Xr4tXV1fXNH4+Wlpa4FrhqD7WjcFsh7rj6jrhzkP5mzJiB119/HTk5OQMe09XV\\nhb1796YwFSVCcyEXQmQKIT4WQryRzEDpZqB1L2bNmoX29vYB79fe3o577713wJa5x+NBc3MzKioq\\nEm6dSynjGw0TBjo+7kBmRuTWH6XemDFjIv5xbm9v59oqJhJLi/wxAHuSFSSd9BZvu92O0aNHY+XK\\nlRese9HR0RH1cc6ePRt1ck88F7j01H6m3TBrvdDfLV26FOFwOOIxXFvFRHpbW5FuAEYAeAfADABv\\nRDt+6tSpkvq3adMmabfbZVZWlgSQ8M3hcGh+TpvNpstzZmdnx3wfm80m7Xa73LRpUwp+yhRNYWGh\\nbr9fpA8ADVJDPe7vprVF/gSA/wmgS+Px1I9z10KJNmpAKy2z9frb9aXvzM5Y5Obmxtxlo3qtFzqf\\n1lmeXFvFHKK+g4UQMwEck1JujXKcSwjRIIRoaGpq0i2gleixaFFfWkeUnNtvHg6HEQwGsWPHDgSD\\nQYTD4ZguZra0tMTdZcOP68ag9feGa6uYg5am2HcB3CWE2A/gRQAzhBB1fQ+SUq6WUhZLKYuHDRum\\nc0xr0GPRonMJITStfaFlsatY3rAFBQVxD3UMhUKora3VfDwlh5bJY1xbxURi6YcB8EOwjzxuQghd\\n+qh7b3l5ebKxsTHicw7UP963z7qiokJTPiGErKqq+ubxGxsbZVVVlXQ4HJpzZ2RkJPXnTNE1NjZK\\nu90e8XWy2+1Rf79IP0igj5yFPIW0XmDScsvJyYl64TCWN2tjY6PMzc1N6I9Hnj2PF9BMROsfeUqN\\nRAp5TFe5pJR/lFLOjOU+9Hd6rYUyZswY7Nq1K+raF7EsduV0OrFhw4aIk0RycnLwyiuv9Ltwktfr\\nxdn2yFuFAfy4biT9XQTn2iomFe9fgEg3tsj7p6WFHO2Wk5Oj+eNuPEPMGhsbZVlZ2XmttOzsbDl3\\n7twBnzeW8+LH9dRqbGyUFRUVMj8//7zXIT8/X1ZUVPC1MBCkqmtF642FfGCJjumOpZBr7ZNPtM+6\\noqJCZmRlaHquO+64g8UjRXp/1zIzM/t9LTIzM9mFYiCJFHKutZJiA32craqqwpw5c6J2vXR1dWke\\nvpeqIWZ1dXXo6tQ2xeCtt96KuqMQJe7cOQsDzeAMh8Mc228V8f4FiHRjizw+es+2q6ioiNryt9ls\\n541CiUe8o3HmzJnD1nmSaHnt9fwdoMSBLXJjiXeTYq2z6LRu16Vl0o7NZkt4udKM7Ph+jV544QW2\\nzpMkljkLHNtvfizkOktkk2KtXRxSSk0fhSNN2tFr+66nXnwK4Y7Iiy8NRErJj/ZJEuvUek7FNzcW\\nch2d2y/ZtzWkZa2RsrIyTVPlhRCa+8mTOcQsEAigcn5l9wf0BHDavv5ive7BqfgmF2+fTKRbuvaR\\nJ9on3djYqLl/2QiTaha4FkhkxD+U0mjnYyXsIzcfJNBHzj07deRwODT1X5+7H2ZfWvfHzMjIiLqe\\ndLLlFeTh7Jnok4C0MML5WEks+7fa7Xb4/f6Eutgocdyz0yD0WBrULKvSdcku3Yo4oP58rObc6yMD\\n7c+ZmZmpy3USUo+FXEd6FGGzrEr39r63gWx9HssI52NFvddHFi5ceMHvXEFBARYuXMip+BbBQq4j\\nPYpwqoYMJsrtcyN3am7UrFou3hrhfKzK6XSiuroa5eXlKCwshBAChYWFKC8vR3V1NVviVhFv53qk\\nW7pe7NRraVCjr0oXOBmQ4nEhq2qrNJ3v008/bejzsbJNmzbJvLy8CyZtCSFkXl4ef/YGAq61Yhx6\\nFeFz1/nOyMiQDodDVlVVGWIm5C/f/KXM+nWWPHz6sObzNfL5WFVjY6PMycmJ+Ic2lrV7KLlYyA2k\\nsbFRzpkz57zCZrPZIq4eaCYt7S1y8P8dLO9bf983/y+eIt27Kl9hYaEUQsjCwkKuxqezuXPnahp+\\nOHfuXNVRSbKQG4bRu0T0sGrLKonHIT888GHcj5EOPycj0DqOPDs7W3VUkokVco4j14mWcbtmH68r\\npcTElRORnZmNra6tMW3Y3Ovdd9/FLbfcEnHMuNl/TkYRy+uTjDpAseE4cgOIZTces3pv/3vY1bQL\\ni6cvjquIe71e3HrrrVEn/pj950SUamyR60SPWZ1Gd/dLd+ODAx/gi+ovkGfLi+m+scw0BMz9czKK\\n7OxsTSsg2mw2dHR0pCARRcIWuQJ9l6rVurSsWVeZO3DqAF777DU8MuWRmIs4oO0Ty7nM+nMyktmz\\nZ2s67r777ktyEko2FvI49LdUrVZmnYq+YssKAEDFtIq47h/L+tiAeX9ORvLrX/864mbaQPeG2o8/\\n/nhqAlHSsJDHKNJStdGYdSp6W6gNNR/XYNbYWRg5aGRcjxFLC9usPyejcTqd2LhxI3Jzcy+4piGE\\nQG5uLjZu3MiLyhbAQh6jWLsIzmXWqejrdqzDybaTWDx9cdyPEUsL26w/JyMqKSnBzp07+92xaufO\\nnVxnxSJYyGMUaxcBoN9uPCpIKeH2uTHxkon4wRU/iPtxtKxDA3SvyGfGn5MRDLTFIAB4PB40Nzcj\\nHA6jubkZHo+HP2MLYSGPUbwX4e6++26MGTNG5zTJ9+HBD/HJV5/EPeSwl5bFwLKysvDWW2+xlRiH\\nRLYYJPNjIY9RVlZWzPcJhUJ4+eWXTfmGcvvcuCj3IswtmpvQ42jZP/S1117DjBkzEnqedJToFoNk\\nfizkKWLGN9Sh04ewYc8GLLhuAew2e8KPl8z9Q9NZOkxGo8g4IShGiXQvAN2tT5fLBY/Ho1Oi5PmX\\nd/8F//7BvyPw8wCuvOhK1XFoAOkwGS0dcEJQChUWFiZ0/1AohNraWp3SJM/ZzrNYvXU17rzmThZx\\ng9Nji0EyNxbyGGkdfRGJGd5QL+96GU2tTQkNOaTUMMs+r5Q8LOQx0jL6Ihqjv6F6hxxeO/Ra3HTl\\nTarjDDiszizXGpLNLPu8UvKwkMeod/RFPKNXAHO8oTYf3oyGLxuwaPqihK8JJIrD6qIzyz6vlDxR\\nC7kQIlcI4RNCfCKE2CWE+NdUBDOykpKSqGtYDMQMbyi3zw1HjgMPTHpAaQ4Oq9NGy9BOTrKyNi0t\\n8nYAM6SUkwBMBnCbEOKG5MYyPq3LsfYyyxvqaMtRrN+1Hg9OfhAF2Wq7gDisTnu3Eod2prlYthMC\\nYAewDcD1kY5Lh63eCgsLNW2jBcBUGw0//t7jEo9D7j2+V3UUzT9jh8OhOmpScEu89IIEtnrT1Ecu\\nhMgUQmwHcAzAH6SUm/s5xiWEaBBCNDQ1NcX1R8VMtF5gqqqqMs3aFh3hDqzaugolo0tw9ZCrVcdJ\\n62F17FaiWGgq5FLKsJRyMoARAKYLISb0c8xqKWWxlLJ42LBheudMqnhGRVjxAlP97nocbTlqmCGH\\nWkf3ZGZmxlXQjDwaht1KFJMw92e1AAAWEElEQVRYm/AAfgXgf0Q6xkxdK4l8fLXaR98bam6QV//m\\nahnuCquOIqWUsqKiQtNO8EKImH/eRn/t0r1bKR0hga4VLYV7GIDBPV/nAfgAwMxI9zFLIW9sbJR2\\nuz3iG8Vut0fs225sbJRVVVXS4XDIjIwMU/WHn2vL4S0Sj0M+8dETqqN8Q8vrE8trFcvjan2sZBFC\\naDrnjIwMZRlJX4kUci1dK5cCeE8I4QewBd195G9ouJ/h6fHx1el0WmKtZ7fPjXxbPuZPnq86yjfO\\nHVanZTy71q4GM3RbcLYmxSTevwCRbmZpkcfy8bWxsVFWVFTIwsJCKYSQhYWFsqKiwnQt7/581fKV\\nzP7f2bLyjUrVUfrV2NioqYul97WKxgzdFlq6lWw2m6yqqlKWkfSFZHatxHMzSyHX+vG1tw/WqP2p\\nifq3P/2bxOOQu4/tVh1lQHp0NfT+MdbyONEeK9nM0P1D+kqkkKf1FH2tH0ullJYdBhYKh7CyYSVu\\nvupmXDvsWtVxBpRoV8O5U/31fk69BQIBLF26tPca1QXMMrmMUietC7mWseBCiKj9s6r7UxPx6qev\\n4nDwsGGGHA4kkYWhIo3JjvWxku3cPzhtbW0XfN9ut3O2Jl0o3qZ8pJtZulZiHRUR6WbWYWDff+b7\\n8sonrpSd4U7VUSJKpKtB6zDGvrf8/PyUXgdhd0p6A7tW4qNlsSGtzDi78JOjn+CDgx+galoVMjMy\\nVceJKJGFoerq6jS3xM915syZlK6yaIbRNGRQ8f4FiHQzS4u8V6Sx4GYY4RCvBb9dIO3/xy5Ptp5U\\nHUWzeMbta71QGumWipawlX/XKDpw1EryWHUY2PEzx2Xuv+VK12su1VGSLpYFzvR+jWMZtspJQOmN\\nhTyJrNpv+R8f/ofE45D+o37VUZIu3j7yRFvCsS4DwBZ5ekukkKd1H7kWVly0P9wVxootK/DDUT/E\\nxG9NVB0n6fTYng+IfB2k7wJcBQUFuPPOO2Matqp1P9jTp08baoEvMoB4/wJEulmpRd7LKmuqSCnl\\nxj0bJR6HfGX3K6qjpEyk1jFiaJH311Vyxx13yNzc3Jhb/X27a2IdRWWVCWnUDQm0yEX3/fVVXFws\\nGxoadH9c0sdNa2/C5yc+x77H9iErI769R80oEAhg2bJlqK2tRUtLCwoKClBeXo6vv/4a69evjzhi\\nxGaz4dZbb8W7776LUCgU1yiY/jgcDjQ3N3/z72eeeQYLFiyI6THsdjv8fr+pPhXShYQQW6WUxfHc\\nl10raWbXsV1492/vonJaZVoVcWDgBc5+/etfR+3SyMzMxDvvvBPTpCIt+nbXNDQ0xLyxN4ckEgt5\\nmvH4PMjJzMHDUx5WHcUwtFwHuemmm9DZ2an7c/ddBqCuri7m5wmFQqitrdUzFpkMC3kaOXX2FNb6\\n12LOxDkYah+qOo6hRNu8+P3339e1JQ70vwxAvBPLzDghjfTDPvI0suyjZfjlW7/ENtc2XHfpdarj\\nmEpGRgb0fq/017ftcDgQDAZjfqy+fe1kPuwjp6jCXWF4tnjw3cu/yyIeBz1XQow0bLWsrCzmPnJV\\nC3yRcbCQpwlvoxf7vt5n+FUOjUrrGO/+ZGVloaCg4ILumv5WLywuLo65j9xsm3yT/ti1kiZurbsV\\nO4/txP7H9sOWmfjkmHQTCARQVFSE1tZWzfex2Wyw2Wyor6/XtORsIBDAxIkT+12+Vo/HJ2Nj1wpF\\n9Nnxz/BW4C0snLqQRTxO0Ua25OXlYebMmf1eKO2vyPadCepwODBjxgzNRTza41N6Sa+BxGnK4/Mg\\nOzMbrqku1VFMrXdkS3+TiqqrqzVPyPF6vSgtLT1vYlEwGNR8kZMXNqkvdq1Y3On207jsvy7DrLGz\\nUHs3xxqrFk8XTV8ZGRkIh8M6piIjYNcKDWjN9jVo6WjBz6f/XHUUgrbNI6JRtZcoGRcLuYV1yS54\\ntnhw/WXXY9pl01THIcS/W9G5ONSQ+mIht7A/BP6AvSf2cshhgvq7MBnvErJ6zMDkUEPqi4Xcwtw+\\nN76V/y3MHj9bdRTTOndX+2AwCCklgsFg3Ht5JtotMnPmTK5ySBdgIbeowMkANn2+CY9OfRTZmdmq\\n45hSIBBAaWlpTJtDRJPIxKLc3Fw88cQTcd2XrI2F3KKWb1mOzIxMPFr8qOooppWMXe3j2a1ICAG7\\n3Y4NGzawNU79YiG3oJaOFjzz8TMoHVeKbxd+W3Uc09JyYTLWJWSdTifcbndM66nMmTOHE38oorQs\\n5HpevDKiOn8dmtubeZEzQVovTMZyAdPr9WLx4uivS+/CWps2bUJdXR1b4hRR2k0I6m9WHWCddSuk\\nlJi4ciJysnLQ8EgDhBCqI5mW1iVltc601DoZqKCgAPPmzYtptiiZHycEaZSMi1dG897+97CraRcW\\nT1/MIp4gLRcmY1lCVkufu81mw7x58+DxeFjESbO0KuTJuHhlNG6fG0PtQ3H/hPtVRzE9LRcmY1lC\\nNhl97kSAhkIuhLhcCPGeEGKPEGKXEOKxVARLBqu/kQ6cOoDXPnsNj0x5BLlZuarjmJ6WvTz72xxi\\nIMnocycCtLXIOwEskVJeC+AGAFVCiHHJjZUcVn8jrdiyAgICFcUVqqNYRrS9PGO5nqJ1MhDXUqFY\\nRS3kUsojUsptPV8HAewBcFmygyWDld9IbaE21Hxcg1ljZ+HyQZerjmMpTqcTHo8Hzc3NCIfDaG5u\\njqsPW+8+d6JeMfWRCyFGAbgOwOZ+vucSQjQIIRqampr0SaczK7+R1u1Yh5NtJznk0MD07nMn6qW5\\nkAshCgC8AuAXUsrTfb8vpVwtpSyWUhYPGzZMz4y6seobSUqJ3/h+g4mXTMSNV9yoOg4NQO8+d6Je\\nmgq5EMKG7iL+vJRyQ3IjJY9V30gfHPwA/q/8HHJoAnr2uRP1ijohSHRXhjUATkopf6HlQY08IQjo\\nHk+e6HZdRjJ7/Wy8s+8dHPrlIdhtdtVxiCgOiUwI0lLIvwfgAwA7AHT1/O9/klJuGug+Ri/kVvJF\\n8xe48r+vRPUN1fjPW/5TdRwiilMihTzqyj1Syg8B8PO6Qa1qWAUJiarpVaqjEJEiaTWz02rOdp7F\\n6m2rceeYOzFq8CjVcYhIERZyE3tp50s43nqcQw6J0hwLuUlJKeH2uTFu2DjMuHKG6jhEpBALuUn9\\n9dBfsfXIViyatohDDonSHAu5Sbl9bgzKGYTySeabhUpE+mIhN6EjwSNYv3s9Hpz8IAqyzbcuDBHp\\ni4XchJ7c+iTCXWEOOSQiACzkptMR7sCTW59EydUlGH3xaNVxiMgAWMhNpn53PY62HOWQQyL6Bgu5\\nybh9blx98dW4xXmL6ihEZBAs5CbS8GUD/nror1g0fREyBF86IurGamAibp8bBdkFmD95vuooRGQg\\nLOQmcezMMby480XMmzQPjhyH6jhEZCAs5Cbx1Nan0BHuwKLpi1RHISKDYSE3gVA4hJUNK3HzVTdj\\n7NCxquMQkcGwkJvAxk834nDwMIccElG/TFfIA4EAKisrz9vvsLKyEoFAQHW0pHH73Lhy8JW4/erb\\nVUchIgMyTSEPBAK44447MHr0aKxcuRLBYBBSSgSDQdTU1KCoqAher1d1TN1tP7odHx78EFXTqpCZ\\nkak6DhEZkCkKudfrxYQJE7BpU//bhIZCIbS2tqK0tNRyLXP3ZjfsNjseuu4h1VGIyKAMX8gDgQBK\\nS0tx9uzZqMeGQiEsW7YsBalS40TrCazbuQ7lReW4KO8i1XGIyKAMX8iXLl2KUCik6dhQKITa2tok\\nJ0qdmm01ONt5lkMOiSgiwxfyuro6zYUcAFpaWpKYJnU6uzqxomEFfjTqR5hwyQTVcYjIwAxfyGMt\\nzAUF1tho4fXPXsfB5oMcckhEURm+kMdSmG02G8rLrbH1mdvnxshBI3HnNXeqjkJEBmf4Ql5WVgab\\nzabpWJvNhurq6iQnSr6dx3bivf3vobK4ElkZWarjEJHBGb6QL1myRFMhz8vLQ319PZxOZwpSJZfH\\n50FuVi4envKw6ihEZAKGL+ROpxP19fWw2+0DFvSZM2dix44dKCkpSXE6/X3d9jVq/bWYM2EOhtiH\\nqI5DRCZg+EIOACUlJfD7/XC5XOdNza+qqkJjYyNef/11S7TEAeDZ7c+iNdSKxdfzIicRaWOaDlin\\n04nq6mp0dXWhrq4OwWAQa9euRVdXF5YsWWKJQh7uCmP5luX43sjvYfLwyarjEJFJmKJFDnRP0y8q\\nKkJNTY1l11nxNnqx7+t9HHJIRDExRSHvnabf2tp6weQgK62z4va5cVnhZbh77N2qoxCRiZiikGuZ\\npm/2dVY+O/4Z3gq8hYXFC2HL1DbckogI0FDIhRDPCCGOCSF2piJQf7RM0zf7OisenwfZmdlwTXWp\\njkJEJqOlRf4cgNuSnCMirdP0zbrOyun203juk+dw3/j7cEn+JarjEJHJRC3kUsr3AZxMQZZ+BQIB\\nSCk1HWvWdVbWbF+Dlo4WXuQkorjo1kcuhHAJIRqEEA1NTU16PSyWLl0KIYSW5zflOitdsgueLR5c\\nf9n1mHbZNNVxiMiEdCvkUsrVUspiKWXxsGHD9HpY1NXVaWqRSylNuc7KW4G3sPfEXrbGiShuhh+1\\norXfWwhhyklBbp8bwwuGY/b42aqjEJFJGb6Qa+33LiwsTHIS/TWebIT3cy8enfoosjOzVcchIpPS\\nMvzwBQAfAbhGCHFICLEg+bH+TssytmZdh3y5bzkyMzLx6NRHVUchIhPTMmrlZ1LKS6WUNinlCCnl\\n06kI1kvLMrZmXIe8paMFz2x/BrPHzcalhZeqjkNEJmb4rpVIy9jabDbY7XZTrkNe+0ktTref5kVO\\nIkqY4Qs5MPAyti6XC36/33TrkEsp4dniwdRLp+KGETeojkNEJmeqZWw9Hg88Ho/qKAl792/vYnfT\\nbjz3k+c0jZEnIorEFC1yq3H73BhqH4r7JtynOgoRWQALeYrtP7Ufr+99Ha4pLuRm5aqOQ0QWwEKe\\nYiu2rICAQMW0CtVRiMgiWMhTqDXUipptNbj72rsxwjFCdRwisggW8hRat2Mdvj77NYccEpGuDFPI\\nA4EAKisrzxteWFlZafrt23pJKeH2uVH0rSJ8f+T3VcchIgsxRCFPh42VPzj4Afxf+bF4+mIOOSQi\\nXSkv5Om0sfJFuRdhzsQ5qqMQkcUoL+TpsLHyF81fYOOejXh4ysOw2+yq4xCRxSgv5OmwsfKqhlWQ\\nkKicVqk6ChFZkPJCbvWNlc92nsXqbatx55g7MWrwKNVxiMiClBdyrRtHmHVj5Zd2voTjrcc55JCI\\nkkZ5IbfyxhFSSvzG9xuMGzYOM66coToOEVmU8kJu1Y0jAOCjQx9h25FtHHJIREmlvJBbdeMIoHvI\\n4aCcQSgrKlMdhYgsTHkhB6y3cQQAfBn8EvW76/HQdQ+hINuc/ftEZA6G2VjCShtHAMCTDU8i3BVG\\n1bQq1VGIyOIM0SK3mo5wB57c+iRuv/p2OC82X5cQEZkLC3kSrN+1Hl+d+YpDDokoJVjIk8Dtc2PM\\nkDG42Xmz6ihElAZYyHW25fAWbD68GYumLUKG4I+XiJKPlUZnbp8bBdkFmDd5nuooRJQmWMh1dOzM\\nMby06yXMnzQfjhyH6jhElCZYyHW0eutqdIQ7sGj6ItVRiCiNsJDrJBQOYWXDStzivAXXDL1GdRwi\\nSiMs5DrZ+OlGfBn8kkMOiSjlWMh14va5cdVFV6FktPmWEyAic2Mh18H2o9vx4cEPUTWtCpkZmarj\\nEFGa0VTIhRC3CSE+E0I0CiH+MdmhzMa92Q27zY6HrntIdRQiSkNRC7kQIhPAcgAlAMYB+JkQYlwi\\nTxoIBFBZWXneSoeVlZUIBAKJPKwSJ1pPYN3OdSgvKsfg3MGq4xBRGtLSIp8OoFFKuU9K2QHgRQA/\\nifcJvV4vioqKUFNTg2AwCCklgsEgampqUFRUBK/XG+9DK1GzrQZnO89yyCERKaOlkF8G4Itz/n2o\\n5//FLBAIoLS0FK2trQiFQud9LxQKobW1FaWlpaZpmXd2dWJFwwr8aNSPMOGSCarjEFGa0rIeeX97\\nlMkLDhLCBcDV8892IcTOfu43EsDQAR4TANDa2ipHjx59HMBBDdlUGArg+Ln/4yAOQsy3zFZuF5yf\\nxfD8zM3K5xf3BBQthfwQgMvP+fcIAF/2PUhKuRrAagAQQjRIKYvjDWVkVj43gOdndjw/8xJCNMR7\\nXy1dK1sAXC2EuFIIkQ3gfgCvxfuERESkr6gtcillpxBiEYDfA8gE8IyUclfSkxERkSaa9uyUUm4C\\nsCmGx10dXxxTsPK5ATw/s+P5mVfc5yakvOC6JRERmQin6BMRmVzchTzatH0hRI4Q4qWe728WQoxK\\nJGiqaTi/+UKIJiHE9p7bwypyxkMI8YwQ4tgAQ0Qhuv2m59z9Qogpqc6YCA3n90MhRPM5r93/SnXG\\nRAghLhdCvCeE2COE2CWEeKyfY0z5Gmo8N9O+fkKIXCGETwjxSc/5/Ws/x8ReO6WUMd/QfdEzAOAq\\nANkAPgEwrs8xlQBW9Xx9P4CX4nkuFTeN5zcfgEd11jjP70YAUwDsHOD7twPwonu8/w0ANqvOrPP5\\n/RDAG6pzJnB+lwKY0vN1IYC9/fx+mvI11Hhupn39el6Pgp6vbQA2A7ihzzEx1854W+Rapu3/BMCa\\nnq/rAdwkhDDLrBldlyUwGinl+wBORjjkJwDWym5/BTBYCHFpatIlTsP5mZqU8oiUclvP10EAe3Dh\\nbGtTvoYaz820el6Plp5/2npufS9Uxlw74y3kWqbtf3OMlLITQDOAIXE+X6ppXZbg3p6PrfVCiMv7\\n+b5Z6bYsg4F9p+fjrVcIMV51mHj1fOy+Dt0tu3OZ/jWMcG6AiV8/IUSmEGI7gGMA/iClHPC101o7\\n4y3kWqbta5rab1Basr8OYJSUsgjA2/j7X1ArMPNrp8U2AFdIKScBcAN4VXGeuAghCgC8AuAXUsrT\\nfb/dz11M8xpGOTdTv35SyrCUcjK6Z8lPF0L0Xagp5tcu3kKuZdr+N8cIIbIADIJ5Pu5GPT8p5Qkp\\nZXvPP58CMDVF2VJB07IMZiWlPN378VZ2z5GwCSGGKo4VEyGEDd2F7nkp5YZ+DjHtaxjt3Kzw+gGA\\nlPIUgD8CuK3Pt2KunfEWci3T9l8DMK/n61IA78qe3nsTiHp+ffob70J3X55VvAbggZ6RDzcAaJZS\\nHlEdSi9CiOG9fY5CiOnofh+cUJtKu57sTwPYI6X8rwEOM+VrqOXczPz6CSGGCSEG93ydB+DHAD7t\\nc1jMtVPTzM6+5ADT9oUQvwbQIKV8Dd0vRq0QohHdf03uj+e5VNB4fj8XQtwFoBPd5zdfWeAYCSFe\\nQPeV/6FCiEMAfoXuiy6QUq5C9yze2wE0AmgF8KCapPHRcH6lACqEEJ0A2gDcb6JGBgB8F0A5gB09\\nfa0A8E/oXl3U7K+hlnMz8+t3KYA1onvDngwAL0sp30i0dnJmJxGRyXFmJxGRybGQExGZHAs5EZHJ\\nsZATEZkcCzkRkcmxkBMRmRwLORGRybGQExGZ3P8HNivw7p82hRYAAAAASUVORK5CYII=\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x432 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"x_f_lr = np.linspace(0., 3, 200)\\n\",\n    \"y_f_lr = f_lr_1(x_tr)\\n\",\n    \"plt.figure(figsize=(6,6));\\n\",\n    \"axes = plt.gca()\\n\",\n    \"axes.set_xlim([0,3])\\n\",\n    \"axes.set_ylim([0,8])\\n\",\n    \"plt.plot(x_f_lr, y_f_lr, 'g');\\n\",\n    \"plt.plot(x, y, 'ok', ms=10);\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie\\n\",\n    \"Nauczmy prosty model regresji\\n\",\n    \"\\n\",\n    \"$$\\n\",\n    \"y=a_1\\\\cdot x + a_2 \\\\cdot x^2 + b\\n\",\n    \"$$\\n\",\n    \"\\n\",\n    \"na naszych danych.\\n\",\n    \"\\n\",\n    \"Oraz narysujmy prostą regresji.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"M2 = np.vstack( (np.ones_like(x), x, x**2) ).T\\n\",\n    \"p2 = np.linalg.lstsq(M2, y, rcond=None)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Definiujemy naszą funkcję regresji\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"f_lr_2 = lambda x: p2[0][2]*pow(x,2) + p2[0][1] * x + p2[0][0] \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 17,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"image/png\": \"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\\n\",\n      \"text/plain\": [\n       \"<matplotlib.figure.Figure at 0x7413b2b6d8>\"\n      ]\n     },\n     \"metadata\": {},\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"x_f_lr = np.linspace(0., 3, 200)\\n\",\n    \"y_f_lr = f_lr_2(x_tr)\\n\",\n    \"plt.figure(figsize=(6,6));\\n\",\n    \"axes = plt.gca()\\n\",\n    \"axes.set_xlim([0,3])\\n\",\n    \"axes.set_ylim([0,8])\\n\",\n    \"plt.plot(x_f_lr, y_f_lr, 'g');\\n\",\n    \"plt.plot(x, y, 'ok', ms=10);\\n\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie\\n\",\n    \"Nauczmy prosty model regresji\\n\",\n    \"\\n\",\n    \"$$\\n\",\n    \"y=a_1\\\\cdot x + a_2 \\\\cdot x^2 + a_3 \\\\cdot x ^3 + b\\n\",\n    \"$$\\n\",\n    \"\\n\",\n    \"na naszych danych.\\n\",\n    \"\\n\",\n    \"Oraz narysujmy prostą regresji.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie\\n\",\n    \"Nauczmy prosty model regresji\\n\",\n    \"\\n\",\n    \"$$\\n\",\n    \"y=a_1\\\\cdot x + a_2 \\\\cdot x^2 + a_3 \\\\cdot x ^3 + a_4 \\\\cdot x ^4 + b\\n\",\n    \"$$\\n\",\n    \"\\n\",\n    \"na naszych danych.\\n\",\n    \"\\n\",\n    \"Oraz narysujmy prostą regresji.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie\\n\",\n    \"Nauczmy prosty model regresji\\n\",\n    \"\\n\",\n    \"$$\\n\",\n    \"y=a_1\\\\cdot x + a_2 \\\\cdot x^2 + a_3 \\\\cdot x ^3 + a_4 \\\\cdot x ^4 + a_5 \\\\cdot x^5 + b\\n\",\n    \"$$\\n\",\n    \"\\n\",\n    \"na naszych danych.\\n\",\n    \"\\n\",\n    \"Oraz narysujmy prostą regresji.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie\\n\",\n    \"Narysuj wszystkie wyniki na jednym wykresie.\\n\",\n    \"\\n\",\n    \"## Która z krzywych jest najleprza?\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie\\n\",\n    \"Musimy mieć jakąś miarę oceny.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 11,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"import statsmodels.api as sm\\n\",\n    \"Res1 = sm.OLS(y, M1).fit()\\n\",\n    \"Res2 = sm.OLS(y, M2).fit()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"                 Results: Ordinary least squares\\n\",\n      \"=================================================================\\n\",\n      \"Model:              OLS              Adj. R-squared:     0.482   \\n\",\n      \"Dependent Variable: y                AIC:                611.1382\\n\",\n      \"Date:               2017-05-07 09:56 BIC:                616.3485\\n\",\n      \"No. Observations:   100              Log-Likelihood:     -303.57 \\n\",\n      \"Df Model:           1                F-statistic:        93.14   \\n\",\n      \"Df Residuals:       98               Prob (F-statistic): 6.93e-16\\n\",\n      \"R-squared:          0.487            Scale:              25.886  \\n\",\n      \"-------------------------------------------------------------------\\n\",\n      \"           Coef.    Std.Err.      t      P>|t|     [0.025    0.975]\\n\",\n      \"-------------------------------------------------------------------\\n\",\n      \"const     -2.6934     1.0090   -2.6694   0.0089   -4.6958   -0.6911\\n\",\n      \"x1         6.0015     0.6219    9.6510   0.0000    4.7675    7.2355\\n\",\n      \"-----------------------------------------------------------------\\n\",\n      \"Omnibus:              38.537       Durbin-Watson:          2.247 \\n\",\n      \"Prob(Omnibus):        0.000        Jarque-Bera (JB):       95.249\\n\",\n      \"Skew:                 1.413        Prob(JB):               0.000 \\n\",\n      \"Kurtosis:             6.857        Condition No.:          4     \\n\",\n      \"=================================================================\\n\",\n      \"\\n\",\n      \".....................................\\n\",\n      \".....................................\\n\",\n      \".....................................\\n\",\n      \"                 Results: Ordinary least squares\\n\",\n      \"=================================================================\\n\",\n      \"Model:              OLS              Adj. R-squared:     0.758   \\n\",\n      \"Dependent Variable: y                AIC:                535.9663\\n\",\n      \"Date:               2017-05-07 09:56 BIC:                543.7818\\n\",\n      \"No. Observations:   100              Log-Likelihood:     -264.98 \\n\",\n      \"Df Model:           2                F-statistic:        156.2   \\n\",\n      \"Df Residuals:       97               Prob (F-statistic): 4.72e-31\\n\",\n      \"R-squared:          0.763            Scale:              12.088  \\n\",\n      \"-------------------------------------------------------------------\\n\",\n      \"         Coef.     Std.Err.      t      P>|t|     [0.025     0.975]\\n\",\n      \"-------------------------------------------------------------------\\n\",\n      \"const     5.6426     1.0446    5.4017   0.0000     3.5693    7.7158\\n\",\n      \"x1      -10.5600     1.6158   -6.5353   0.0000   -13.7670   -7.3530\\n\",\n      \"x2        5.6480     0.5317   10.6235   0.0000     4.5928    6.7032\\n\",\n      \"-----------------------------------------------------------------\\n\",\n      \"Omnibus:              5.962        Durbin-Watson:           2.070\\n\",\n      \"Prob(Omnibus):        0.051        Jarque-Bera (JB):        5.995\\n\",\n      \"Skew:                 0.390        Prob(JB):                0.050\\n\",\n      \"Kurtosis:             3.911        Condition No.:           22   \\n\",\n      \"=================================================================\\n\",\n      \"\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(Res1.summary2())\\n\",\n    \"print(\\\".....................................\\\")\\n\",\n    \"print(\\\".....................................\\\")\\n\",\n    \"print(\\\".....................................\\\")\\n\",\n    \"print(Res2.summary2())\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Zadanie\\n\",\n    \"Analogiczne wyniki możemy izusklać za pomocą prostego kodu.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 13,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"import statsmodels.formula.api as smf\\n\",\n    \"# Turn the data into a pandas DataFrame, so that we\\n\",\n    \"# can address them in the formulas with their name\\n\",\n    \"df = pd.DataFrame({'x':x, 'y':y})\\n\",\n    \"\\n\",\n    \"# Fit the models, and show the results\\n\",\n    \"Res1F = smf.ols('y~x', df).fit()\\n\",\n    \"Res2F = smf.ols('y ~ x+I(x**2)', df).fit()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 14,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"                            OLS Regression Results                            \\n\",\n      \"==============================================================================\\n\",\n      \"Dep. Variable:                      y   R-squared:                       0.487\\n\",\n      \"Model:                            OLS   Adj. R-squared:                  0.482\\n\",\n      \"Method:                 Least Squares   F-statistic:                     93.14\\n\",\n      \"Date:                Sun, 07 May 2017   Prob (F-statistic):           6.93e-16\\n\",\n      \"Time:                        09:57:02   Log-Likelihood:                -303.57\\n\",\n      \"No. Observations:                 100   AIC:                             611.1\\n\",\n      \"Df Residuals:                      98   BIC:                             616.3\\n\",\n      \"Df Model:                           1                                         \\n\",\n      \"Covariance Type:            nonrobust                                         \\n\",\n      \"==============================================================================\\n\",\n      \"                 coef    std err          t      P>|t|      [95.0% Conf. Int.]\\n\",\n      \"------------------------------------------------------------------------------\\n\",\n      \"Intercept     -2.6934      1.009     -2.669      0.009        -4.696    -0.691\\n\",\n      \"x              6.0015      0.622      9.651      0.000         4.767     7.236\\n\",\n      \"==============================================================================\\n\",\n      \"Omnibus:                       38.537   Durbin-Watson:                   2.247\\n\",\n      \"Prob(Omnibus):                  0.000   Jarque-Bera (JB):               95.249\\n\",\n      \"Skew:                           1.413   Prob(JB):                     2.07e-21\\n\",\n      \"Kurtosis:                       6.857   Cond. No.                         4.20\\n\",\n      \"==============================================================================\\n\",\n      \"\\n\",\n      \"Warnings:\\n\",\n      \"[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\\n\",\n      \".....................................\\n\",\n      \".....................................\\n\",\n      \".....................................\\n\",\n      \"                            OLS Regression Results                            \\n\",\n      \"==============================================================================\\n\",\n      \"Dep. Variable:                      y   R-squared:                       0.763\\n\",\n      \"Model:                            OLS   Adj. R-squared:                  0.758\\n\",\n      \"Method:                 Least Squares   F-statistic:                     156.2\\n\",\n      \"Date:                Sun, 07 May 2017   Prob (F-statistic):           4.72e-31\\n\",\n      \"Time:                        09:57:02   Log-Likelihood:                -264.98\\n\",\n      \"No. Observations:                 100   AIC:                             536.0\\n\",\n      \"Df Residuals:                      97   BIC:                             543.8\\n\",\n      \"Df Model:                           2                                         \\n\",\n      \"Covariance Type:            nonrobust                                         \\n\",\n      \"==============================================================================\\n\",\n      \"                 coef    std err          t      P>|t|      [95.0% Conf. Int.]\\n\",\n      \"------------------------------------------------------------------------------\\n\",\n      \"Intercept      5.6426      1.045      5.402      0.000         3.569     7.716\\n\",\n      \"x            -10.5600      1.616     -6.535      0.000       -13.767    -7.353\\n\",\n      \"I(x ** 2)      5.6480      0.532     10.623      0.000         4.593     6.703\\n\",\n      \"==============================================================================\\n\",\n      \"Omnibus:                        5.962   Durbin-Watson:                   2.070\\n\",\n      \"Prob(Omnibus):                  0.051   Jarque-Bera (JB):                5.995\\n\",\n      \"Skew:                           0.390   Prob(JB):                       0.0499\\n\",\n      \"Kurtosis:                       3.911   Cond. No.                         22.4\\n\",\n      \"==============================================================================\\n\",\n      \"\\n\",\n      \"Warnings:\\n\",\n      \"[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(Res1F.summary())\\n\",\n    \"print(\\\".....................................\\\")\\n\",\n    \"print(\\\".....................................\\\")\\n\",\n    \"print(\\\".....................................\\\")\\n\",\n    \"print(Res2F.summary())\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": true\n   },\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.8.5\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Z05_A_linear_regression.ipynb b/Z05_A_linear_regression.ipynb
--- a/Z05_A_linear_regression.ipynb	(revision 23b7d23cdb1c969d11dad11bcc79574ad6e5458b)
+++ b/Z05_A_linear_regression.ipynb	(date 1648214802604)
@@ -547,4 +547,4 @@
  },
  "nbformat": 4,
  "nbformat_minor": 2
-}
+}
\ No newline at end of file
